
14_ST1089_IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005584  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  0800581c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800581c  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117b5  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  0001884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6e  00000000  00000000  0001bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280be  00000000  00000000  0001cc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b1c  00000000  00000000  00044d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f43e1  00000000  00000000  00058820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cc01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000499c  00000000  00000000  0014cc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001515e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056fc 	.word	0x080056fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080056fc 	.word	0x080056fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_GPIO_Init+0x44>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <MX_GPIO_Init+0x44>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_GPIO_Init+0x44>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_GPIO_Init+0x44>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <MX_GPIO_Init+0x44>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_GPIO_Init+0x44>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2bf9      	cmp	r3, #249	@ 0xf9
 80005b4:	d801      	bhi.n	80005ba <calc_pulse+0x12>
		return PULSE_ERROR;
 80005b6:	2305      	movs	r3, #5
 80005b8:	e021      	b.n	80005fe <calc_pulse+0x56>
	else if (time < 1200)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80005c0:	d201      	bcs.n	80005c6 <calc_pulse+0x1e>
		return PULSE_SHORT;
 80005c2:	2304      	movs	r3, #4
 80005c4:	e01b      	b.n	80005fe <calc_pulse+0x56>
	else if (time < 2000)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005cc:	d201      	bcs.n	80005d2 <calc_pulse+0x2a>
		return PULSE_LONG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	e015      	b.n	80005fe <calc_pulse+0x56>
	else if (time < 3000)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80005d8:	4293      	cmp	r3, r2
 80005da:	d801      	bhi.n	80005e0 <calc_pulse+0x38>
		return PULSE_2MS;
 80005dc:	2302      	movs	r3, #2
 80005de:	e00e      	b.n	80005fe <calc_pulse+0x56>
	else if (time < 6000)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f241 726f 	movw	r2, #5999	@ 0x176f
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d801      	bhi.n	80005ee <calc_pulse+0x46>
		return PULSE_4MS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e007      	b.n	80005fe <calc_pulse+0x56>
	else if (time < 12000)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d801      	bhi.n	80005fc <calc_pulse+0x54>
		return PULSE_9MS;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e000      	b.n	80005fe <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 80005fc:	2305      	movs	r3, #5
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <ir_tim_interrupt>:

void ir_tim_interrupt(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

	pulse_t pulse;

	if (received_bits >= 32)
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b1f      	cmp	r3, #31
 8000618:	dc43      	bgt.n	80006a2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 800061a:	2100      	movs	r1, #0
 800061c:	4825      	ldr	r0, [pc, #148]	@ (80006b4 <ir_tim_interrupt+0xa8>)
 800061e:	f002 ff55 	bl	80034cc <HAL_TIM_ReadCapturedValue>
 8000622:	4603      	mov	r3, r0
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffbf 	bl	80005a8 <calc_pulse>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]

	switch(pulse) {
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	3b01      	subs	r3, #1
 8000632:	2b03      	cmp	r3, #3
 8000634:	d831      	bhi.n	800069a <ir_tim_interrupt+0x8e>
 8000636:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <ir_tim_interrupt+0x30>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	0800067d 	.word	0x0800067d
 8000640:	0800068b 	.word	0x0800068b
 8000644:	08000663 	.word	0x08000663
 8000648:	0800064d 	.word	0x0800064d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <ir_tim_interrupt+0xac>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	085b      	lsrs	r3, r3, #1
 8000652:	4a19      	ldr	r2, [pc, #100]	@ (80006b8 <ir_tim_interrupt+0xac>)
 8000654:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 800065e:	6013      	str	r3, [r2, #0]
		break;
 8000660:	e022      	b.n	80006a8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <ir_tim_interrupt+0xac>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <ir_tim_interrupt+0xac>)
 800066e:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a0e      	ldr	r2, [pc, #56]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000678:	6013      	str	r3, [r2, #0]
		break;
 800067a:	e015      	b.n	80006a8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <ir_tim_interrupt+0xac>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
		break;
 8000688:	e00e      	b.n	80006a8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if(received_bits == 0)
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 8000694:	2220      	movs	r2, #32
 8000696:	601a      	str	r2, [r3, #0]
		break;
 8000698:	e005      	b.n	80006a6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <ir_tim_interrupt+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
		break;
 80006a0:	e002      	b.n	80006a8 <ir_tim_interrupt+0x9c>
		return;
 80006a2:	bf00      	nop
 80006a4:	e000      	b.n	80006a8 <ir_tim_interrupt+0x9c>
		break;
 80006a6:	bf00      	nop
	}

}
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000088 	.word	0x20000088
 80006b4:	20000090 	.word	0x20000090
 80006b8:	20000084 	.word	0x20000084

080006bc <ir_init>:

void ir_init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

	 HAL_TIM_Base_Start(&htim2);
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <ir_init+0x18>)
 80006c2:	f002 fa41 	bl	8002b48 <HAL_TIM_Base_Start>
	 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006c6:	2100      	movs	r1, #0
 80006c8:	4802      	ldr	r0, [pc, #8]	@ (80006d4 <ir_init+0x18>)
 80006ca:	f002 fb07 	bl	8002cdc <HAL_TIM_IC_Start_IT>

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000090 	.word	0x20000090

080006d8 <ir_read>:

int ir_read(void) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0

	if(received_bits != 32)
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <ir_read+0x30>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b20      	cmp	r3, #32
 80006e4:	d002      	beq.n	80006ec <ir_read+0x14>
		return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e007      	b.n	80006fc <ir_read+0x24>

	uint8_t value = received_value >> 16;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <ir_read+0x34>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <ir_read+0x30>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	return value;
 80006fa:	79fb      	ldrb	r3, [r7, #7]

}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	20000088 	.word	0x20000088
 800070c:	20000084 	.word	0x20000084

08000710 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  if (ch == '\n') {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b0a      	cmp	r3, #10
 800071c:	d102      	bne.n	8000724 <__io_putchar+0x14>

    __io_putchar('\r');
 800071e:	200d      	movs	r0, #13
 8000720:	f7ff fff6 	bl	8000710 <__io_putchar>

  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <__io_putchar+0x2c>)
 800072e:	f003 fb57 	bl	8003de0 <HAL_UART_Transmit>

  return 1;
 8000732:	2301      	movs	r3, #1

}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000dc 	.word	0x200000dc

08000740 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  if (htim == &htim2) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_TIM_IC_CaptureCallback+0x2c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d109      	bne.n	8000764 <HAL_TIM_IC_CaptureCallback+0x24>

    switch (HAL_TIM_GetActiveChannel(&htim2)) {
 8000750:	4806      	ldr	r0, [pc, #24]	@ (800076c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000752:	f002 ff27 	bl	80035a4 <HAL_TIM_GetActiveChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d102      	bne.n	8000762 <HAL_TIM_IC_CaptureCallback+0x22>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  ir_tim_interrupt();
 800075c:	f7ff ff56 	bl	800060c <ir_tim_interrupt>
        break;
 8000760:	e000      	b.n	8000764 <HAL_TIM_IC_CaptureCallback+0x24>
      default:
        break;
 8000762:	bf00      	nop
    }

  }

}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000090 	.word	0x20000090

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fb1e 	bl	8000db6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f817 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f7ff feef 	bl	8000560 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000782:	f000 f98f 	bl	8000aa4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000786:	f000 fa61 	bl	8000c4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ir_init();
 800078a:	f7ff ff97 	bl	80006bc <ir_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int value = ir_read();
 800078e:	f7ff ffa3 	bl	80006d8 <ir_read>
 8000792:	6078      	str	r0, [r7, #4]
	  if(value != -1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800079a:	d0f8      	beq.n	800078e <main+0x1e>
		  printf("button code: %02x\n", value);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <main+0x38>)
 80007a0:	f004 f93e 	bl	8004a20 <iprintf>
  {
 80007a4:	e7f3      	b.n	800078e <main+0x1e>
 80007a6:	bf00      	nop
 80007a8:	08005714 	.word	0x08005714

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	@ 0x58
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2244      	movs	r2, #68	@ 0x44
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 f985 	bl	8004aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007d2:	f000 fe3f 	bl	8001454 <HAL_PWREx_ControlVoltageScaling>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007dc:	f000 f848 	bl	8000870 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007e0:	f000 fe1a 	bl	8001418 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <SystemClock_Config+0xc0>)
 80007e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <SystemClock_Config+0xc0>)
 80007ec:	f023 0318 	bic.w	r3, r3, #24
 80007f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007f4:	2314      	movs	r3, #20
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000804:	2360      	movs	r3, #96	@ 0x60
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800080c:	2301      	movs	r3, #1
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000814:	2328      	movs	r3, #40	@ 0x28
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000818:	2307      	movs	r3, #7
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fe69 	bl	8001500 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000834:	f000 f81c 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2303      	movs	r3, #3
 800083e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	2104      	movs	r1, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fa31 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800085c:	f000 f808 	bl	8000870 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000860:	f001 ff38 	bl	80026d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000864:	bf00      	nop
 8000866:	3758      	adds	r7, #88	@ 0x58
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	@ 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 faa1 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <TIM2_IRQHandler+0x10>)
 800092a:	f002 fb21 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000090 	.word	0x20000090

08000938 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
  }

  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff febf 	bl	8000710 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
  }
  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f004 f890 	bl	8004b68 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20018000 	.word	0x20018000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	200002b8 	.word	0x200002b8

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	@ 0x40
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000aea:	224f      	movs	r2, #79	@ 0x4f
 8000aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000af6:	f04f 32ff 	mov.w	r2, #4294967295
 8000afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b08:	482b      	ldr	r0, [pc, #172]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b0a:	f001 ffc5 	bl	8002a98 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b14:	f7ff feac 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b22:	4619      	mov	r1, r3
 8000b24:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b26:	f002 fbc6 	bl	80032b6 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b30:	f7ff fe9e 	bl	8000870 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b34:	4820      	ldr	r0, [pc, #128]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b36:	f002 f86f 	bl	8002c18 <HAL_TIM_IC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b40:	f7ff fe96 	bl	8000870 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b44:	2304      	movs	r3, #4
 8000b46:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000b48:	2340      	movs	r3, #64	@ 0x40
 8000b4a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4817      	ldr	r0, [pc, #92]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b5c:	f002 fc74 	bl	8003448 <HAL_TIM_SlaveConfigSynchro>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000b66:	f7ff fe83 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000b7a:	f003 f83d 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000b84:	f7ff fe74 	bl	8000870 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_TIM2_Init+0x114>)
 8000ba0:	f002 faed 	bl	800317e <HAL_TIM_IC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000baa:	f7ff fe61 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3740      	adds	r7, #64	@ 0x40
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000090 	.word	0x20000090

08000bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bdc:	d130      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_TIM_Base_MspInit+0x8c>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f000 fa4a 	bl	80010c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2108      	movs	r1, #8
 8000c34:	201c      	movs	r0, #28
 8000c36:	f000 fa0e 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f000 fa27 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	@ 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <MX_USART2_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c90:	f003 f858 	bl	8003d44 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f7ff fde9 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000dc 	.word	0x200000dc
 8000ca8:	40004400 	.word	0x40004400

08000cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ac      	sub	sp, #176	@ 0xb0
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2288      	movs	r2, #136	@ 0x88
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fefc 	bl	8004aca <memset>
  if(uartHandle->Instance==USART2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <HAL_UART_MspInit+0xb0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d13b      	bne.n	8000d54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fa09 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf4:	f7ff fdbc 	bl	8000870 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <HAL_UART_MspInit+0xb4>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f000 f9b8 	bl	80010c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	37b0      	adds	r7, #176	@ 0xb0
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff fe8a 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 feef 	bl	8004b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fceb 	bl	8000770 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da8:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 8000dac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db0:	200002b4 	.word	0x200002b4

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>

08000db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f93d 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f80e 	bl	8000de8 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fd50 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_InitTick+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d023      	beq.n	8000e44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <HAL_InitTick+0x70>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f949 	bl	80010aa <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d809      	bhi.n	8000e38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f913 	bl	8001056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_InitTick+0x74>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e004      	b.n	8000e48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e001      	b.n	8000e48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000164 	.word	0x20000164

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000164 	.word	0x20000164

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e17f      	b.n	80013d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8171 	beq.w	80013ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x40>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d118      	bne.n	80011a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	6939      	ldr	r1, [r7, #16]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80ac 	beq.w	80013ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b5f      	ldr	r3, [pc, #380]	@ (80013f4 <HAL_GPIO_Init+0x330>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127a:	4a5e      	ldr	r2, [pc, #376]	@ (80013f4 <HAL_GPIO_Init+0x330>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6613      	str	r3, [r2, #96]	@ 0x60
 8001282:	4b5c      	ldr	r3, [pc, #368]	@ (80013f4 <HAL_GPIO_Init+0x330>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128e:	4a5a      	ldr	r2, [pc, #360]	@ (80013f8 <HAL_GPIO_Init+0x334>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012b8:	d025      	beq.n	8001306 <HAL_GPIO_Init+0x242>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	@ (80013fc <HAL_GPIO_Init+0x338>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01f      	beq.n	8001302 <HAL_GPIO_Init+0x23e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001400 <HAL_GPIO_Init+0x33c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x23a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <HAL_GPIO_Init+0x340>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x236>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001408 <HAL_GPIO_Init+0x344>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x232>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	@ (800140c <HAL_GPIO_Init+0x348>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x22e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001410 <HAL_GPIO_Init+0x34c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x22a>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x244>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x244>
 8001306:	2300      	movs	r3, #0
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001318:	4937      	ldr	r1, [pc, #220]	@ (80013f8 <HAL_GPIO_Init+0x334>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_GPIO_Init+0x350>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	@ (8001414 <HAL_GPIO_Init+0x350>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001350:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <HAL_GPIO_Init+0x350>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <HAL_GPIO_Init+0x350>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_GPIO_Init+0x350>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_GPIO_Init+0x350>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_GPIO_Init+0x350>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_GPIO_Init+0x350>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f47f ae78 	bne.w	80010d4 <HAL_GPIO_Init+0x10>
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	48001800 	.word	0x48001800
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <HAL_PWREx_GetVoltageRange+0x18>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40007000 	.word	0x40007000

08001454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001462:	d130      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800146c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001470:	d038      	beq.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800147a:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2232      	movs	r2, #50	@ 0x32
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001498:	e002      	b.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ac:	d102      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f2      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c0:	d110      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e00f      	b.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d2:	d007      	beq.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014dc:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83

08001500 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e3ca      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001512:	4b97      	ldr	r3, [pc, #604]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800151c:	4b94      	ldr	r3, [pc, #592]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80e4 	beq.w	80016fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <HAL_RCC_OscConfig+0x4a>
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	f040 808b 	bne.w	8001658 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b01      	cmp	r3, #1
 8001546:	f040 8087 	bne.w	8001658 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x62>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e3a2      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1a      	ldr	r2, [r3, #32]
 8001566:	4b82      	ldr	r3, [pc, #520]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_RCC_OscConfig+0x7c>
 8001572:	4b7f      	ldr	r3, [pc, #508]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800157a:	e005      	b.n	8001588 <HAL_RCC_OscConfig+0x88>
 800157c:	4b7c      	ldr	r3, [pc, #496]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001588:	4293      	cmp	r3, r2
 800158a:	d223      	bcs.n	80015d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fd55 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e383      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a0:	4b73      	ldr	r3, [pc, #460]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a72      	ldr	r2, [pc, #456]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b70      	ldr	r3, [pc, #448]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	496d      	ldr	r1, [pc, #436]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015be:	4b6c      	ldr	r3, [pc, #432]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	4968      	ldr	r1, [pc, #416]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
 80015d2:	e025      	b.n	8001620 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d4:	4b66      	ldr	r3, [pc, #408]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a65      	ldr	r2, [pc, #404]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4960      	ldr	r1, [pc, #384]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	495b      	ldr	r1, [pc, #364]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd15 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e343      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001620:	f000 fc4a 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b52      	ldr	r3, [pc, #328]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	4950      	ldr	r1, [pc, #320]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	4a4e      	ldr	r2, [pc, #312]	@ (8001778 <HAL_RCC_OscConfig+0x278>)
 800163e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001640:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <HAL_RCC_OscConfig+0x27c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fbcf 	bl	8000de8 <HAL_InitTick>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d052      	beq.n	80016fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	e327      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d032      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a42      	ldr	r2, [pc, #264]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc0c 	bl	8000e88 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001674:	f7ff fc08 	bl	8000e88 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e310      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001686:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a36      	ldr	r2, [pc, #216]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4931      	ldr	r1, [pc, #196]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	492c      	ldr	r1, [pc, #176]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e01a      	b.n	80016fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a29      	ldr	r2, [pc, #164]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fbd9 	bl	8000e88 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016da:	f7ff fbd5 	bl	8000e88 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e2dd      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x1da>
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d074      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b08      	cmp	r3, #8
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x21a>
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d10e      	bne.n	8001732 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d10b      	bne.n	8001732 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d064      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d160      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e2ba      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x24a>
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e026      	b.n	8001798 <HAL_RCC_OscConfig+0x298>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001752:	d115      	bne.n	8001780 <HAL_RCC_OscConfig+0x280>
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 800175a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a02      	ldr	r2, [pc, #8]	@ (8001770 <HAL_RCC_OscConfig+0x270>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x298>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	08005728 	.word	0x08005728
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004
 8001780:	4ba0      	ldr	r3, [pc, #640]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a9f      	ldr	r2, [pc, #636]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b9d      	ldr	r3, [pc, #628]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a9c      	ldr	r2, [pc, #624]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb72 	bl	8000e88 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb6e 	bl	8000e88 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	@ 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e276      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ba:	4b92      	ldr	r3, [pc, #584]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2a8>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb5e 	bl	8000e88 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb5a 	bl	8000e88 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e262      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e2:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2d0>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d060      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x310>
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d119      	bne.n	800183e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d116      	bne.n	800183e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x328>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e23f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	4973      	ldr	r1, [pc, #460]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	e040      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d023      	beq.n	800188e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001846:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fb19 	bl	8000e88 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fb15 	bl	8000e88 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e21d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186c:	4b65      	ldr	r3, [pc, #404]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b62      	ldr	r3, [pc, #392]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	495f      	ldr	r1, [pc, #380]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	e018      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a5c      	ldr	r2, [pc, #368]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff faf5 	bl	8000e88 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff faf1 	bl	8000e88 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1f9      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d03c      	beq.n	8001946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01c      	beq.n	800190e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018da:	4a4a      	ldr	r2, [pc, #296]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fad0 	bl	8000e88 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff facc 	bl	8000e88 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1d4      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fe:	4b41      	ldr	r3, [pc, #260]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ef      	beq.n	80018ec <HAL_RCC_OscConfig+0x3ec>
 800190c:	e01b      	b.n	8001946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001914:	4a3b      	ldr	r2, [pc, #236]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191e:	f7ff fab3 	bl	8000e88 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff faaf 	bl	8000e88 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1b7      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001938:	4b32      	ldr	r3, [pc, #200]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ef      	bne.n	8001926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80a6 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197c:	2301      	movs	r3, #1
 800197e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_RCC_OscConfig+0x508>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d118      	bne.n	80019be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_RCC_OscConfig+0x508>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_RCC_OscConfig+0x508>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001998:	f7ff fa76 	bl	8000e88 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a0:	f7ff fa72 	bl	8000e88 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e17a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x508>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4d8>
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d6:	e029      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d115      	bne.n	8001a0c <HAL_RCC_OscConfig+0x50c>
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	4a03      	ldr	r2, [pc, #12]	@ (8001a04 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a00:	e014      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a12:	4a9b      	ldr	r2, [pc, #620]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a1c:	4b98      	ldr	r3, [pc, #608]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a22:	4a97      	ldr	r2, [pc, #604]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d016      	beq.n	8001a62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fa28 	bl	8000e88 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fa24 	bl	8000e88 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e12a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	4b8b      	ldr	r3, [pc, #556]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ed      	beq.n	8001a3c <HAL_RCC_OscConfig+0x53c>
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa11 	bl	8000e88 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa0d 	bl	8000e88 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e113      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ed      	bne.n	8001a6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b7a      	ldr	r3, [pc, #488]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	4a79      	ldr	r2, [pc, #484]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80fe 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	f040 80d0 	bne.w	8001c54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ab4:	4b72      	ldr	r3, [pc, #456]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d130      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d127      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d11f      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001af4:	2a07      	cmp	r2, #7
 8001af6:	bf14      	ite	ne
 8001af8:	2201      	movne	r2, #1
 8001afa:	2200      	moveq	r2, #0
 8001afc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d113      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d06e      	beq.n	8001c08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	d069      	beq.n	8001c04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b3c:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0ad      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a4b      	ldr	r2, [pc, #300]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b58:	f7ff f996 	bl	8000e88 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f992 	bl	8000e88 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b72:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7e:	4b40      	ldr	r3, [pc, #256]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <HAL_RCC_OscConfig+0x784>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b8e:	3a01      	subs	r2, #1
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b98:	0212      	lsls	r2, r2, #8
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	0552      	lsls	r2, r2, #21
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bac:	0852      	lsrs	r2, r2, #1
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	0652      	lsls	r2, r2, #25
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bb8:	0912      	lsrs	r2, r2, #4
 8001bba:	0452      	lsls	r2, r2, #17
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4930      	ldr	r1, [pc, #192]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bdc:	f7ff f954 	bl	8000e88 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f950 	bl	8000e88 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c02:	e050      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e04f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d148      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c2c:	f7ff f92c 	bl	8000e88 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f928 	bl	8000e88 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e030      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x734>
 8001c52:	e028      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d023      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_RCC_OscConfig+0x780>)
 8001c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f90f 	bl	8000e88 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6c:	e00c      	b.n	8001c88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f90b 	bl	8000e88 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d905      	bls.n	8001c88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
 8001c80:	40021000 	.word	0x40021000
 8001c84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x7b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ec      	bne.n	8001c6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_OscConfig+0x7b0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4905      	ldr	r1, [pc, #20]	@ (8001cb0 <HAL_RCC_OscConfig+0x7b0>)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCC_OscConfig+0x7b4>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e001      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	feeefffc 	.word	0xfeeefffc

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e7      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b75      	ldr	r3, [pc, #468]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b72      	ldr	r3, [pc, #456]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4970      	ldr	r1, [pc, #448]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0cf      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d908      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b63      	ldr	r3, [pc, #396]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4960      	ldr	r1, [pc, #384]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d04c      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d121      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0a6      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4b54      	ldr	r3, [pc, #336]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e09a      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e08e      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e086      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4943      	ldr	r1, [pc, #268]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7ff f872 	bl	8000e88 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f86e 	bl	8000e88 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e06e      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d208      	bcs.n	8001dfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	492b      	ldr	r1, [pc, #172]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d210      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 0207 	bic.w	r2, r3, #7
 8001e14:	4923      	ldr	r1, [pc, #140]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e036      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4918      	ldr	r1, [pc, #96]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4910      	ldr	r1, [pc, #64]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6c:	f000 f824 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	490b      	ldr	r1, [pc, #44]	@ (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ffa9 	bl	8000de8 <HAL_InitTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08005728 	.word	0x08005728
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x34>
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d121      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d11e      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eec:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ef8:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f08:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f14:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e004      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d134      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d003      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0xac>
 8001f5c:	e005      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	617b      	str	r3, [r7, #20]
      break;
 8001f68:	e002      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	617b      	str	r3, [r7, #20]
      break;
 8001f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f70:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fb03 f202 	mul.w	r2, r3, r2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	0e5b      	lsrs	r3, r3, #25
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08005740 	.word	0x08005740
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4904      	ldr	r1, [pc, #16]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08005738 	.word	0x08005738

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002018:	f7ff ffda 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0adb      	lsrs	r3, r3, #11
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08005738 	.word	0x08005738

08002040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800204c:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002058:	f7ff f9ee 	bl	8001438 <HAL_PWREx_GetVoltageRange>
 800205c:	6178      	str	r0, [r7, #20]
 800205e:	e014      	b.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	4a24      	ldr	r2, [pc, #144]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	@ 0x58
 800206c:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002078:	f7ff f9de 	bl	8001438 <HAL_PWREx_GetVoltageRange>
 800207c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002090:	d10b      	bne.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	@ 0x80
 8002096:	d919      	bls.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2ba0      	cmp	r3, #160	@ 0xa0
 800209c:	d902      	bls.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800209e:	2302      	movs	r3, #2
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e013      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e010      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	@ 0x80
 80020ae:	d902      	bls.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b0:	2303      	movs	r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e00a      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	@ 0x80
 80020ba:	d102      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e004      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b70      	cmp	r3, #112	@ 0x70
 80020c6:	d101      	bne.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	4909      	ldr	r1, [pc, #36]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2300      	movs	r3, #0
 800210e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002118:	2b00      	cmp	r3, #0
 800211a:	d041      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002120:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002124:	d02a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002126:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800212a:	d824      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800212c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002132:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002136:	d81e      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002140:	d010      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002142:	e018      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002144:	4b86      	ldr	r3, [pc, #536]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a85      	ldr	r2, [pc, #532]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e015      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f000 facb 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002162:	e00c      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3320      	adds	r3, #32
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fbb6 	bl	80028dc <RCCEx_PLLSAI2_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002174:	e003      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	74fb      	strb	r3, [r7, #19]
      break;
 800217a:	e000      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002184:	4b76      	ldr	r3, [pc, #472]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002192:	4973      	ldr	r1, [pc, #460]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800219a:	e001      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021b4:	d02a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80021ba:	d824      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021c6:	d81e      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d010      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021d2:	e018      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d4:	4b62      	ldr	r3, [pc, #392]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a61      	ldr	r2, [pc, #388]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e0:	e015      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fa83 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f2:	e00c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb6e 	bl	80028dc <RCCEx_PLLSAI2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]
      break;
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002214:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002222:	494f      	ldr	r1, [pc, #316]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a0 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	4a40      	ldr	r2, [pc, #256]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	@ 0x58
 8002264:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002280:	f7fe fe02 	bl	8000e88 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fdfe 	bl	8000e88 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	74fb      	strb	r3, [r7, #19]
        break;
 800229a:	e005      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229c:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d15c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01f      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d019      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022de:	4a20      	ldr	r2, [pc, #128]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f8:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fdbd 	bl	8000e88 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002310:	e00b      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fdb9 	bl	8000e88 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d902      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	74fb      	strb	r3, [r7, #19]
            break;
 8002328:	e006      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ec      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233e:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800234e:	4904      	ldr	r1, [pc, #16]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002356:	e009      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
 800235c:	e006      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236c:	7c7b      	ldrb	r3, [r7, #17]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4b9e      	ldr	r3, [pc, #632]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	4a9d      	ldr	r2, [pc, #628]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4b98      	ldr	r3, [pc, #608]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	4994      	ldr	r1, [pc, #592]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ac:	4b8f      	ldr	r3, [pc, #572]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f023 020c 	bic.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	498c      	ldr	r1, [pc, #560]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ce:	4b87      	ldr	r3, [pc, #540]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	4983      	ldr	r1, [pc, #524]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f0:	4b7e      	ldr	r3, [pc, #504]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	497b      	ldr	r1, [pc, #492]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002412:	4b76      	ldr	r3, [pc, #472]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	4972      	ldr	r1, [pc, #456]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002434:	4b6d      	ldr	r3, [pc, #436]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	496a      	ldr	r1, [pc, #424]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002456:	4b65      	ldr	r3, [pc, #404]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	4961      	ldr	r1, [pc, #388]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002478:	4b5c      	ldr	r3, [pc, #368]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	4959      	ldr	r1, [pc, #356]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249a:	4b54      	ldr	r3, [pc, #336]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a8:	4950      	ldr	r1, [pc, #320]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024bc:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ca:	4948      	ldr	r1, [pc, #288]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024de:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	493f      	ldr	r1, [pc, #252]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d028      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002500:	4b3a      	ldr	r3, [pc, #232]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002506:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250e:	4937      	ldr	r1, [pc, #220]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800251a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800251e:	d106      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a31      	ldr	r2, [pc, #196]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800252a:	60d3      	str	r3, [r2, #12]
 800252c:	e011      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002536:	d10c      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f8d8 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	491f      	ldr	r1, [pc, #124]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800257c:	d106      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002588:	60d3      	str	r3, [r2, #12]
 800258a:	e011      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f8a9 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02b      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025da:	d109      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a02      	ldr	r2, [pc, #8]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	e014      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f877 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d02f      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800262e:	4928      	ldr	r1, [pc, #160]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800263a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800263e:	d10d      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f854 	bl	80026f4 <RCCEx_PLLSAI1_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d014      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	74bb      	strb	r3, [r7, #18]
 800265a:	e011      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002664:	d10c      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3320      	adds	r3, #32
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f935 	bl	80028dc <RCCEx_PLLSAI2_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800268c:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800269a:	490d      	ldr	r1, [pc, #52]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026be:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002702:	4b75      	ldr	r3, [pc, #468]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d018      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800270e:	4b72      	ldr	r3, [pc, #456]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d10d      	bne.n	800273a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
       ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002726:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
       ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d047      	beq.n	80027ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e044      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d018      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x86>
 8002748:	2b03      	cmp	r3, #3
 800274a:	d825      	bhi.n	8002798 <RCCEx_PLLSAI1_Config+0xa4>
 800274c:	2b01      	cmp	r3, #1
 800274e:	d002      	beq.n	8002756 <RCCEx_PLLSAI1_Config+0x62>
 8002750:	2b02      	cmp	r3, #2
 8002752:	d009      	beq.n	8002768 <RCCEx_PLLSAI1_Config+0x74>
 8002754:	e020      	b.n	8002798 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002756:	4b60      	ldr	r3, [pc, #384]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11d      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002766:	e01a      	b.n	800279e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002768:	4b5b      	ldr	r3, [pc, #364]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e013      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800277a:	4b57      	ldr	r3, [pc, #348]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002786:	4b54      	ldr	r3, [pc, #336]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002796:	e006      	b.n	80027a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e004      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279e:	bf00      	nop
 80027a0:	e002      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ae:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	430b      	orrs	r3, r1
 80027c4:	4944      	ldr	r1, [pc, #272]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d17d      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027d0:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a40      	ldr	r2, [pc, #256]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7fe fb54 	bl	8000e88 <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027e2:	e009      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e4:	f7fe fb50 	bl	8000e88 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d902      	bls.n	80027f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	73fb      	strb	r3, [r7, #15]
        break;
 80027f6:	e005      	b.n	8002804 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f8:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ef      	bne.n	80027e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d160      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002810:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6892      	ldr	r2, [r2, #8]
 8002820:	0211      	lsls	r1, r2, #8
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	0912      	lsrs	r2, r2, #4
 8002828:	0452      	lsls	r2, r2, #17
 800282a:	430a      	orrs	r2, r1
 800282c:	492a      	ldr	r1, [pc, #168]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	610b      	str	r3, [r1, #16]
 8002832:	e027      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d112      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002842:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	0211      	lsls	r1, r2, #8
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6912      	ldr	r2, [r2, #16]
 8002850:	0852      	lsrs	r2, r2, #1
 8002852:	3a01      	subs	r2, #1
 8002854:	0552      	lsls	r2, r2, #21
 8002856:	430a      	orrs	r2, r1
 8002858:	491f      	ldr	r1, [pc, #124]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]
 800285e:	e011      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002868:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6952      	ldr	r2, [r2, #20]
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	3a01      	subs	r2, #1
 800287a:	0652      	lsls	r2, r2, #25
 800287c:	430a      	orrs	r2, r1
 800287e:	4916      	ldr	r1, [pc, #88]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002884:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800288e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fafa 	bl	8000e88 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002896:	e009      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002898:	f7fe faf6 	bl	8000e88 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	73fb      	strb	r3, [r7, #15]
          break;
 80028aa:	e005      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028f6:	4b67      	ldr	r3, [pc, #412]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0203 	and.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
       ||
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800290e:	4b61      	ldr	r3, [pc, #388]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
       ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d047      	beq.n	80029b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e044      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d018      	beq.n	8002962 <RCCEx_PLLSAI2_Config+0x86>
 8002930:	2b03      	cmp	r3, #3
 8002932:	d825      	bhi.n	8002980 <RCCEx_PLLSAI2_Config+0xa4>
 8002934:	2b01      	cmp	r3, #1
 8002936:	d002      	beq.n	800293e <RCCEx_PLLSAI2_Config+0x62>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d009      	beq.n	8002950 <RCCEx_PLLSAI2_Config+0x74>
 800293c:	e020      	b.n	8002980 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800293e:	4b55      	ldr	r3, [pc, #340]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11d      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e01a      	b.n	8002986 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002950:	4b50      	ldr	r3, [pc, #320]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002960:	e013      	b.n	800298a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002962:	4b4c      	ldr	r3, [pc, #304]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800296e:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800297e:	e006      	b.n	800298e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e004      	b.n	8002990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800298e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002996:	4b3f      	ldr	r3, [pc, #252]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	430b      	orrs	r3, r1
 80029ac:	4939      	ldr	r1, [pc, #228]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d167      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029b8:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a35      	ldr	r2, [pc, #212]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe fa60 	bl	8000e88 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029ca:	e009      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029cc:	f7fe fa5c 	bl	8000e88 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	73fb      	strb	r3, [r7, #15]
        break;
 80029de:	e005      	b.n	80029ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ef      	bne.n	80029cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d14a      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	0211      	lsls	r1, r2, #8
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68d2      	ldr	r2, [r2, #12]
 8002a0e:	0912      	lsrs	r2, r2, #4
 8002a10:	0452      	lsls	r2, r2, #17
 8002a12:	430a      	orrs	r2, r1
 8002a14:	491f      	ldr	r1, [pc, #124]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	614b      	str	r3, [r1, #20]
 8002a1a:	e011      	b.n	8002a40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6892      	ldr	r2, [r2, #8]
 8002a2c:	0211      	lsls	r1, r2, #8
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6912      	ldr	r2, [r2, #16]
 8002a32:	0852      	lsrs	r2, r2, #1
 8002a34:	3a01      	subs	r2, #1
 8002a36:	0652      	lsls	r2, r2, #25
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	4916      	ldr	r1, [pc, #88]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fa1c 	bl	8000e88 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a52:	e009      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a54:	f7fe fa18 	bl	8000e88 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	73fb      	strb	r3, [r7, #15]
          break;
 8002a66:	e005      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a68:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e049      	b.n	8002b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f87c 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fd70 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e047      	b.n	8002bf0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <HAL_TIM_Base_Start+0xb4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d018      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	@ (8002c00 <HAL_TIM_Base_Start+0xb8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c04 <HAL_TIM_Base_Start+0xbc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00e      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_TIM_Base_Start+0xc0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <HAL_TIM_Base_Start+0xc4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_TIM_Base_Start+0x66>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_TIM_Base_Start+0xc8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <HAL_TIM_Base_Start+0xcc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d015      	beq.n	8002bec <HAL_TIM_Base_Start+0xa4>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc6:	d011      	beq.n	8002bec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd8:	e008      	b.n	8002bec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e000      	b.n	8002bee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40013400 	.word	0x40013400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	00010007 	.word	0x00010007

08002c18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e049      	b.n	8002cbe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f841 	bl	8002cc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 fcb0 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0x1e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e023      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x66>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_Start_IT+0x2e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e01b      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x66>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_IC_Start_IT+0x3e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x66>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start_IT+0x4e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x66>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start_IT+0x5e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x66>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_TIM_IC_Start_IT+0x78>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	e013      	b.n	8002d7c <HAL_TIM_IC_Start_IT+0xa0>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d104      	bne.n	8002d64 <HAL_TIM_IC_Start_IT+0x88>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e00b      	b.n	8002d7c <HAL_TIM_IC_Start_IT+0xa0>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d104      	bne.n	8002d74 <HAL_TIM_IC_Start_IT+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e003      	b.n	8002d7c <HAL_TIM_IC_Start_IT+0xa0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d84:	7b7b      	ldrb	r3, [r7, #13]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0dd      	b.n	8002f4a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_IC_Start_IT+0xc2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d9c:	e023      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x10a>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_IC_Start_IT+0xd2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dac:	e01b      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x10a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start_IT+0xe2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dbc:	e013      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x10a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0xf2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dcc:	e00b      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x10a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_IC_Start_IT+0x102>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ddc:	e003      	b.n	8002de6 <HAL_TIM_IC_Start_IT+0x10a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_IC_Start_IT+0x11a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df4:	e013      	b.n	8002e1e <HAL_TIM_IC_Start_IT+0x142>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0x12a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e04:	e00b      	b.n	8002e1e <HAL_TIM_IC_Start_IT+0x142>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0x13a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e14:	e003      	b.n	8002e1e <HAL_TIM_IC_Start_IT+0x142>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d841      	bhi.n	8002ea8 <HAL_TIM_IC_Start_IT+0x1cc>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <HAL_TIM_IC_Start_IT+0x150>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002ea9 	.word	0x08002ea9
 8002e34:	08002ea9 	.word	0x08002ea9
 8002e38:	08002ea9 	.word	0x08002ea9
 8002e3c:	08002e73 	.word	0x08002e73
 8002e40:	08002ea9 	.word	0x08002ea9
 8002e44:	08002ea9 	.word	0x08002ea9
 8002e48:	08002ea9 	.word	0x08002ea9
 8002e4c:	08002e85 	.word	0x08002e85
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002ea9 	.word	0x08002ea9
 8002e5c:	08002e97 	.word	0x08002e97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0202 	orr.w	r2, r2, #2
 8002e6e:	60da      	str	r2, [r3, #12]
      break;
 8002e70:	e01d      	b.n	8002eae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0204 	orr.w	r2, r2, #4
 8002e80:	60da      	str	r2, [r3, #12]
      break;
 8002e82:	e014      	b.n	8002eae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	60da      	str	r2, [r3, #12]
      break;
 8002e94:	e00b      	b.n	8002eae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0210 	orr.w	r2, r2, #16
 8002ea4:	60da      	str	r2, [r3, #12]
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d149      	bne.n	8002f48 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fe75 	bl	8003bac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a23      	ldr	r2, [pc, #140]	@ (8002f54 <HAL_TIM_IC_Start_IT+0x278>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d018      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	@ (8002f58 <HAL_TIM_IC_Start_IT+0x27c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <HAL_TIM_IC_Start_IT+0x280>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <HAL_TIM_IC_Start_IT+0x284>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_TIM_IC_Start_IT+0x288>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_TIM_IC_Start_IT+0x22c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a19      	ldr	r2, [pc, #100]	@ (8002f68 <HAL_TIM_IC_Start_IT+0x28c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d115      	bne.n	8002f34 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <HAL_TIM_IC_Start_IT+0x290>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d015      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x26a>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d011      	beq.n	8002f46 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	e008      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e000      	b.n	8002f48 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40013400 	.word	0x40013400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	00010007 	.word	0x00010007

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fbc0 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fad0 	bl	8003568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fad7 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d020      	beq.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fb9a 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faaa 	bl	8003568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fab1 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0208 	mvn.w	r2, #8
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2204      	movs	r2, #4
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd fb74 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa84 	bl	8003568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa8b 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fb4e 	bl	8000740 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa5e 	bl	8003568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa65 	bl	800357c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa3c 	bl	8003554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d104      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fe09 	bl	8003d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00c      	beq.n	800312e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fe01 	bl	8003d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00c      	beq.n	8003152 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800314a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fa1f 	bl	8003590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0220 	mvn.w	r2, #32
 800316e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fdc9 	bl	8003d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003198:	2302      	movs	r3, #2
 800319a:	e088      	b.n	80032ae <HAL_TIM_IC_ConfigChannel+0x130>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11b      	bne.n	80031e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031ba:	f000 fb39 	bl	8003830 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 020c 	bic.w	r2, r2, #12
 80031cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6999      	ldr	r1, [r3, #24]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
 80031e0:	e060      	b.n	80032a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11c      	bne.n	8003222 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80031f8:	f000 fbb7 	bl	800396a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800320a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6999      	ldr	r1, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
 8003220:	e040      	b.n	80032a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d11b      	bne.n	8003260 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003238:	f000 fc04 	bl	8003a44 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 020c 	bic.w	r2, r2, #12
 800324a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69d9      	ldr	r1, [r3, #28]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	61da      	str	r2, [r3, #28]
 800325e:	e021      	b.n	80032a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d11c      	bne.n	80032a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003276:	f000 fc21 	bl	8003abc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003288:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	021a      	lsls	r2, r3, #8
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	61da      	str	r2, [r3, #28]
 800329e:	e001      	b.n	80032a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_ConfigClockSource+0x1c>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0b6      	b.n	8003440 <HAL_TIM_ConfigClockSource+0x18a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	d03e      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xd8>
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003314:	f200 8087 	bhi.w	8003426 <HAL_TIM_ConfigClockSource+0x170>
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331c:	f000 8086 	beq.w	800342c <HAL_TIM_ConfigClockSource+0x176>
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003324:	d87f      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 8003326:	2b70      	cmp	r3, #112	@ 0x70
 8003328:	d01a      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0xaa>
 800332a:	2b70      	cmp	r3, #112	@ 0x70
 800332c:	d87b      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 800332e:	2b60      	cmp	r3, #96	@ 0x60
 8003330:	d050      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x11e>
 8003332:	2b60      	cmp	r3, #96	@ 0x60
 8003334:	d877      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 8003336:	2b50      	cmp	r3, #80	@ 0x50
 8003338:	d03c      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0xfe>
 800333a:	2b50      	cmp	r3, #80	@ 0x50
 800333c:	d873      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 800333e:	2b40      	cmp	r3, #64	@ 0x40
 8003340:	d058      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x13e>
 8003342:	2b40      	cmp	r3, #64	@ 0x40
 8003344:	d86f      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 8003346:	2b30      	cmp	r3, #48	@ 0x30
 8003348:	d064      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x15e>
 800334a:	2b30      	cmp	r3, #48	@ 0x30
 800334c:	d86b      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 800334e:	2b20      	cmp	r3, #32
 8003350:	d060      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x15e>
 8003352:	2b20      	cmp	r3, #32
 8003354:	d867      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d05c      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x15e>
 800335a:	2b10      	cmp	r3, #16
 800335c:	d05a      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0x15e>
 800335e:	e062      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003370:	f000 fbfc 	bl	8003b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003382:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e04f      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800339e:	f000 fbe5 	bl	8003b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033b0:	609a      	str	r2, [r3, #8]
      break;
 80033b2:	e03c      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 faa3 	bl	800390c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2150      	movs	r1, #80	@ 0x50
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fbb2 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 80033d2:	e02c      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e0:	461a      	mov	r2, r3
 80033e2:	f000 faff 	bl	80039e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2160      	movs	r1, #96	@ 0x60
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fba2 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 80033f2:	e01c      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003400:	461a      	mov	r2, r3
 8003402:	f000 fa83 	bl	800390c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2140      	movs	r1, #64	@ 0x40
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fb92 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 8003412:	e00c      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fb89 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 8003424:	e003      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      break;
 800342a:	e000      	b.n	800342e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800342c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_SlaveConfigSynchro+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e031      	b.n	80034c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f948 	bl	8003708 <TIM_SlaveTimer_SetConfig>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e018      	b.n	80034c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d831      	bhi.n	8003544 <HAL_TIM_ReadCapturedValue+0x78>
 80034e0:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003545 	.word	0x08003545
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003527 	.word	0x08003527
 80034fc:	08003545 	.word	0x08003545
 8003500:	08003545 	.word	0x08003545
 8003504:	08003545 	.word	0x08003545
 8003508:	08003531 	.word	0x08003531
 800350c:	08003545 	.word	0x08003545
 8003510:	08003545 	.word	0x08003545
 8003514:	08003545 	.word	0x08003545
 8003518:	0800353b 	.word	0x0800353b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	60fb      	str	r3, [r7, #12]

      break;
 8003524:	e00f      	b.n	8003546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	60fb      	str	r3, [r7, #12]

      break;
 800352e:	e00a      	b.n	8003546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003536:	60fb      	str	r3, [r7, #12]

      break;
 8003538:	e005      	b.n	8003546 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	60fb      	str	r3, [r7, #12]

      break;
 8003542:	e000      	b.n	8003546 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003544:	bf00      	nop
  }

  return tmpreg;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7f1b      	ldrb	r3, [r3, #28]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <TIM_Base_SetConfig+0x12c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a43      	ldr	r2, [pc, #268]	@ (80036ec <TIM_Base_SetConfig+0x130>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a42      	ldr	r2, [pc, #264]	@ (80036f0 <TIM_Base_SetConfig+0x134>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a41      	ldr	r2, [pc, #260]	@ (80036f4 <TIM_Base_SetConfig+0x138>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <TIM_Base_SetConfig+0x13c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a35      	ldr	r2, [pc, #212]	@ (80036e8 <TIM_Base_SetConfig+0x12c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a32      	ldr	r2, [pc, #200]	@ (80036ec <TIM_Base_SetConfig+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a31      	ldr	r2, [pc, #196]	@ (80036f0 <TIM_Base_SetConfig+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <TIM_Base_SetConfig+0x138>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2f      	ldr	r2, [pc, #188]	@ (80036f8 <TIM_Base_SetConfig+0x13c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <TIM_Base_SetConfig+0x140>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2d      	ldr	r2, [pc, #180]	@ (8003700 <TIM_Base_SetConfig+0x144>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	@ (8003704 <TIM_Base_SetConfig+0x148>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <TIM_Base_SetConfig+0x12c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00f      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <TIM_Base_SetConfig+0x13c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a17      	ldr	r2, [pc, #92]	@ (80036fc <TIM_Base_SetConfig+0x140>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a16      	ldr	r2, [pc, #88]	@ (8003700 <TIM_Base_SetConfig+0x144>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <TIM_Base_SetConfig+0x148>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f023 0201 	bic.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	611a      	str	r2, [r3, #16]
  }
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40013400 	.word	0x40013400
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800

08003708 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003724:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b70      	cmp	r3, #112	@ 0x70
 8003754:	d01a      	beq.n	800378c <TIM_SlaveTimer_SetConfig+0x84>
 8003756:	2b70      	cmp	r3, #112	@ 0x70
 8003758:	d860      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 800375a:	2b60      	cmp	r3, #96	@ 0x60
 800375c:	d054      	beq.n	8003808 <TIM_SlaveTimer_SetConfig+0x100>
 800375e:	2b60      	cmp	r3, #96	@ 0x60
 8003760:	d85c      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 8003762:	2b50      	cmp	r3, #80	@ 0x50
 8003764:	d046      	beq.n	80037f4 <TIM_SlaveTimer_SetConfig+0xec>
 8003766:	2b50      	cmp	r3, #80	@ 0x50
 8003768:	d858      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d019      	beq.n	80037a2 <TIM_SlaveTimer_SetConfig+0x9a>
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d854      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 8003772:	2b30      	cmp	r3, #48	@ 0x30
 8003774:	d055      	beq.n	8003822 <TIM_SlaveTimer_SetConfig+0x11a>
 8003776:	2b30      	cmp	r3, #48	@ 0x30
 8003778:	d850      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 800377a:	2b20      	cmp	r3, #32
 800377c:	d051      	beq.n	8003822 <TIM_SlaveTimer_SetConfig+0x11a>
 800377e:	2b20      	cmp	r3, #32
 8003780:	d84c      	bhi.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04d      	beq.n	8003822 <TIM_SlaveTimer_SetConfig+0x11a>
 8003786:	2b10      	cmp	r3, #16
 8003788:	d04b      	beq.n	8003822 <TIM_SlaveTimer_SetConfig+0x11a>
 800378a:	e047      	b.n	800381c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	f000 f9e6 	bl	8003b6c <TIM_ETR_SetConfig>
      break;
 80037a0:	e040      	b.n	8003824 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d101      	bne.n	80037ae <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e03b      	b.n	8003826 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
      break;
 80037f2:	e017      	b.n	8003824 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003800:	461a      	mov	r2, r3
 8003802:	f000 f883 	bl	800390c <TIM_TI1_ConfigInputStage>
      break;
 8003806:	e00d      	b.n	8003824 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003814:	461a      	mov	r2, r3
 8003816:	f000 f8e5 	bl	80039e4 <TIM_TI2_ConfigInputStage>
      break;
 800381a:	e003      	b.n	8003824 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
      break;
 8003820:	e000      	b.n	8003824 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003822:	bf00      	nop
  }

  return status;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 0201 	bic.w	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a26      	ldr	r2, [pc, #152]	@ (80038f4 <TIM_TI1_SetConfig+0xc4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d017      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003864:	d013      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a23      	ldr	r2, [pc, #140]	@ (80038f8 <TIM_TI1_SetConfig+0xc8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <TIM_TI1_SetConfig+0xcc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a21      	ldr	r2, [pc, #132]	@ (8003900 <TIM_TI1_SetConfig+0xd0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a20      	ldr	r2, [pc, #128]	@ (8003904 <TIM_TI1_SetConfig+0xd4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_TI1_SetConfig+0x5e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a1f      	ldr	r2, [pc, #124]	@ (8003908 <TIM_TI1_SetConfig+0xd8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <TIM_TI1_SetConfig+0x62>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <TIM_TI1_SetConfig+0x64>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e003      	b.n	80038b2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f023 030a 	bic.w	r3, r3, #10
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 030a 	and.w	r3, r3, #10
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000

0800390c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 030a 	bic.w	r3, r3, #10
 8003948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800396a:	b480      	push	{r7}
 800396c:	b087      	sub	sp, #28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0210 	bic.w	r2, r3, #16
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f023 0303 	bic.w	r3, r3, #3
 8003a70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	031b      	lsls	r3, r3, #12
 8003b14:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0307 	orr.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e068      	b.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c82:	d018      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40014000 	.word	0x40014000

08003d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e040      	b.n	8003dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc ffa0 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	@ 0x24
 8003d70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb6a 	bl	8004464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8af 	bl	8003ef4 <UART_SetConfig>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e01b      	b.n	8003dd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fbe9 	bl	80045a8 <UART_CheckIdleState>
 8003dd6:	4603      	mov	r3, r0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	@ 0x28
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d177      	bne.n	8003ee8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Transmit+0x24>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e070      	b.n	8003eea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2221      	movs	r2, #33	@ 0x21
 8003e14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e16:	f7fd f837 	bl	8000e88 <HAL_GetTick>
 8003e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e34:	d108      	bne.n	8003e48 <HAL_UART_Transmit+0x68>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e003      	b.n	8003e50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e50:	e02f      	b.n	8003eb2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	@ 0x80
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fc4b 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e03b      	b.n	8003eea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e84:	b292      	uxth	r2, r2
 8003e86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e007      	b.n	8003ea0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1c9      	bne.n	8003e52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2140      	movs	r1, #64	@ 0x40
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fc15 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e005      	b.n	8003eea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b08a      	sub	sp, #40	@ 0x28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4ba4      	ldr	r3, [pc, #656]	@ (80041b4 <UART_SetConfig+0x2c0>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a99      	ldr	r2, [pc, #612]	@ (80041b8 <UART_SetConfig+0x2c4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	430a      	orrs	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a90      	ldr	r2, [pc, #576]	@ (80041bc <UART_SetConfig+0x2c8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d126      	bne.n	8003fcc <UART_SetConfig+0xd8>
 8003f7e:	4b90      	ldr	r3, [pc, #576]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d81b      	bhi.n	8003fc4 <UART_SetConfig+0xd0>
 8003f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <UART_SetConfig+0xa0>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fb5 	.word	0x08003fb5
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fbd 	.word	0x08003fbd
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e116      	b.n	80041da <UART_SetConfig+0x2e6>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e112      	b.n	80041da <UART_SetConfig+0x2e6>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e10e      	b.n	80041da <UART_SetConfig+0x2e6>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e10a      	b.n	80041da <UART_SetConfig+0x2e6>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e106      	b.n	80041da <UART_SetConfig+0x2e6>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80041c4 <UART_SetConfig+0x2d0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d138      	bne.n	8004048 <UART_SetConfig+0x154>
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d82d      	bhi.n	8004040 <UART_SetConfig+0x14c>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0xf8>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004041 	.word	0x08004041
 8003ff4:	08004041 	.word	0x08004041
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004041 	.word	0x08004041
 8004004:	08004041 	.word	0x08004041
 8004008:	08004041 	.word	0x08004041
 800400c:	08004029 	.word	0x08004029
 8004010:	08004041 	.word	0x08004041
 8004014:	08004041 	.word	0x08004041
 8004018:	08004041 	.word	0x08004041
 800401c:	08004039 	.word	0x08004039
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e0d8      	b.n	80041da <UART_SetConfig+0x2e6>
 8004028:	2302      	movs	r3, #2
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402e:	e0d4      	b.n	80041da <UART_SetConfig+0x2e6>
 8004030:	2304      	movs	r3, #4
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004036:	e0d0      	b.n	80041da <UART_SetConfig+0x2e6>
 8004038:	2308      	movs	r3, #8
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403e:	e0cc      	b.n	80041da <UART_SetConfig+0x2e6>
 8004040:	2310      	movs	r3, #16
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004046:	e0c8      	b.n	80041da <UART_SetConfig+0x2e6>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5e      	ldr	r2, [pc, #376]	@ (80041c8 <UART_SetConfig+0x2d4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d125      	bne.n	800409e <UART_SetConfig+0x1aa>
 8004052:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800405c:	2b30      	cmp	r3, #48	@ 0x30
 800405e:	d016      	beq.n	800408e <UART_SetConfig+0x19a>
 8004060:	2b30      	cmp	r3, #48	@ 0x30
 8004062:	d818      	bhi.n	8004096 <UART_SetConfig+0x1a2>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d00a      	beq.n	800407e <UART_SetConfig+0x18a>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d814      	bhi.n	8004096 <UART_SetConfig+0x1a2>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <UART_SetConfig+0x182>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d008      	beq.n	8004086 <UART_SetConfig+0x192>
 8004074:	e00f      	b.n	8004096 <UART_SetConfig+0x1a2>
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407c:	e0ad      	b.n	80041da <UART_SetConfig+0x2e6>
 800407e:	2302      	movs	r3, #2
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004084:	e0a9      	b.n	80041da <UART_SetConfig+0x2e6>
 8004086:	2304      	movs	r3, #4
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408c:	e0a5      	b.n	80041da <UART_SetConfig+0x2e6>
 800408e:	2308      	movs	r3, #8
 8004090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004094:	e0a1      	b.n	80041da <UART_SetConfig+0x2e6>
 8004096:	2310      	movs	r3, #16
 8004098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409c:	e09d      	b.n	80041da <UART_SetConfig+0x2e6>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4a      	ldr	r2, [pc, #296]	@ (80041cc <UART_SetConfig+0x2d8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d125      	bne.n	80040f4 <UART_SetConfig+0x200>
 80040a8:	4b45      	ldr	r3, [pc, #276]	@ (80041c0 <UART_SetConfig+0x2cc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80040b4:	d016      	beq.n	80040e4 <UART_SetConfig+0x1f0>
 80040b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040b8:	d818      	bhi.n	80040ec <UART_SetConfig+0x1f8>
 80040ba:	2b80      	cmp	r3, #128	@ 0x80
 80040bc:	d00a      	beq.n	80040d4 <UART_SetConfig+0x1e0>
 80040be:	2b80      	cmp	r3, #128	@ 0x80
 80040c0:	d814      	bhi.n	80040ec <UART_SetConfig+0x1f8>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <UART_SetConfig+0x1d8>
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d008      	beq.n	80040dc <UART_SetConfig+0x1e8>
 80040ca:	e00f      	b.n	80040ec <UART_SetConfig+0x1f8>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e082      	b.n	80041da <UART_SetConfig+0x2e6>
 80040d4:	2302      	movs	r3, #2
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e07e      	b.n	80041da <UART_SetConfig+0x2e6>
 80040dc:	2304      	movs	r3, #4
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e07a      	b.n	80041da <UART_SetConfig+0x2e6>
 80040e4:	2308      	movs	r3, #8
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e076      	b.n	80041da <UART_SetConfig+0x2e6>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f2:	e072      	b.n	80041da <UART_SetConfig+0x2e6>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a35      	ldr	r2, [pc, #212]	@ (80041d0 <UART_SetConfig+0x2dc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d12a      	bne.n	8004154 <UART_SetConfig+0x260>
 80040fe:	4b30      	ldr	r3, [pc, #192]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410c:	d01a      	beq.n	8004144 <UART_SetConfig+0x250>
 800410e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004112:	d81b      	bhi.n	800414c <UART_SetConfig+0x258>
 8004114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004118:	d00c      	beq.n	8004134 <UART_SetConfig+0x240>
 800411a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411e:	d815      	bhi.n	800414c <UART_SetConfig+0x258>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <UART_SetConfig+0x238>
 8004124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004128:	d008      	beq.n	800413c <UART_SetConfig+0x248>
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x258>
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e052      	b.n	80041da <UART_SetConfig+0x2e6>
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e04e      	b.n	80041da <UART_SetConfig+0x2e6>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e04a      	b.n	80041da <UART_SetConfig+0x2e6>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e046      	b.n	80041da <UART_SetConfig+0x2e6>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e042      	b.n	80041da <UART_SetConfig+0x2e6>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a17      	ldr	r2, [pc, #92]	@ (80041b8 <UART_SetConfig+0x2c4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d13a      	bne.n	80041d4 <UART_SetConfig+0x2e0>
 800415e:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800416c:	d01a      	beq.n	80041a4 <UART_SetConfig+0x2b0>
 800416e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004172:	d81b      	bhi.n	80041ac <UART_SetConfig+0x2b8>
 8004174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004178:	d00c      	beq.n	8004194 <UART_SetConfig+0x2a0>
 800417a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800417e:	d815      	bhi.n	80041ac <UART_SetConfig+0x2b8>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <UART_SetConfig+0x298>
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004188:	d008      	beq.n	800419c <UART_SetConfig+0x2a8>
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x2b8>
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e022      	b.n	80041da <UART_SetConfig+0x2e6>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e01e      	b.n	80041da <UART_SetConfig+0x2e6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a2:	e01a      	b.n	80041da <UART_SetConfig+0x2e6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e016      	b.n	80041da <UART_SetConfig+0x2e6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b2:	e012      	b.n	80041da <UART_SetConfig+0x2e6>
 80041b4:	efff69f3 	.word	0xefff69f3
 80041b8:	40008000 	.word	0x40008000
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40004400 	.word	0x40004400
 80041c8:	40004800 	.word	0x40004800
 80041cc:	40004c00 	.word	0x40004c00
 80041d0:	40005000 	.word	0x40005000
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a9f      	ldr	r2, [pc, #636]	@ (800445c <UART_SetConfig+0x568>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d17a      	bne.n	80042da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d824      	bhi.n	8004236 <UART_SetConfig+0x342>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <UART_SetConfig+0x300>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004237 	.word	0x08004237
 8004204:	08004227 	.word	0x08004227
 8004208:	08004237 	.word	0x08004237
 800420c:	08004237 	.word	0x08004237
 8004210:	08004237 	.word	0x08004237
 8004214:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fd fee6 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800421c:	61f8      	str	r0, [r7, #28]
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b8f      	ldr	r3, [pc, #572]	@ (8004460 <UART_SetConfig+0x56c>)
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fd fe47 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80fb 	beq.w	8004440 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	429a      	cmp	r2, r3
 8004258:	d305      	bcc.n	8004266 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	429a      	cmp	r2, r3
 8004264:	d903      	bls.n	800426e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800426c:	e0e8      	b.n	8004440 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2200      	movs	r2, #0
 8004272:	461c      	mov	r4, r3
 8004274:	4615      	mov	r5, r2
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	022b      	lsls	r3, r5, #8
 8004280:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004284:	0222      	lsls	r2, r4, #8
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6849      	ldr	r1, [r1, #4]
 800428a:	0849      	lsrs	r1, r1, #1
 800428c:	2000      	movs	r0, #0
 800428e:	4688      	mov	r8, r1
 8004290:	4681      	mov	r9, r0
 8004292:	eb12 0a08 	adds.w	sl, r2, r8
 8004296:	eb43 0b09 	adc.w	fp, r3, r9
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a8:	4650      	mov	r0, sl
 80042aa:	4659      	mov	r1, fp
 80042ac:	f7fb ffe0 	bl	8000270 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042be:	d308      	bcc.n	80042d2 <UART_SetConfig+0x3de>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d204      	bcs.n	80042d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]
 80042d0:	e0b6      	b.n	8004440 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042d8:	e0b2      	b.n	8004440 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e2:	d15e      	bne.n	80043a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d828      	bhi.n	800433e <UART_SetConfig+0x44a>
 80042ec:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <UART_SetConfig+0x400>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004329 	.word	0x08004329
 8004300:	0800433f 	.word	0x0800433f
 8004304:	0800432f 	.word	0x0800432f
 8004308:	0800433f 	.word	0x0800433f
 800430c:	0800433f 	.word	0x0800433f
 8004310:	0800433f 	.word	0x0800433f
 8004314:	08004337 	.word	0x08004337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004318:	f7fd fe66 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800431c:	61f8      	str	r0, [r7, #28]
        break;
 800431e:	e014      	b.n	800434a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7fd fe78 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8004324:	61f8      	str	r0, [r7, #28]
        break;
 8004326:	e010      	b.n	800434a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b4d      	ldr	r3, [pc, #308]	@ (8004460 <UART_SetConfig+0x56c>)
 800432a:	61fb      	str	r3, [r7, #28]
        break;
 800432c:	e00d      	b.n	800434a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7fd fdc3 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8004332:	61f8      	str	r0, [r7, #28]
        break;
 8004334:	e009      	b.n	800434a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800433a:	61fb      	str	r3, [r7, #28]
        break;
 800433c:	e005      	b.n	800434a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d077      	beq.n	8004440 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005a      	lsls	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d916      	bls.n	800439a <UART_SetConfig+0x4a6>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004372:	d212      	bcs.n	800439a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f023 030f 	bic.w	r3, r3, #15
 800437c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	b29b      	uxth	r3, r3
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	b29a      	uxth	r2, r3
 800438a:	8afb      	ldrh	r3, [r7, #22]
 800438c:	4313      	orrs	r3, r2
 800438e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	8afa      	ldrh	r2, [r7, #22]
 8004396:	60da      	str	r2, [r3, #12]
 8004398:	e052      	b.n	8004440 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043a0:	e04e      	b.n	8004440 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d827      	bhi.n	80043fa <UART_SetConfig+0x506>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <UART_SetConfig+0x4bc>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fd fe08 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 80043d8:	61f8      	str	r0, [r7, #28]
        break;
 80043da:	e014      	b.n	8004406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fd fe1a 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 80043e0:	61f8      	str	r0, [r7, #28]
        break;
 80043e2:	e010      	b.n	8004406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <UART_SetConfig+0x56c>)
 80043e6:	61fb      	str	r3, [r7, #28]
        break;
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fd fd65 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 80043ee:	61f8      	str	r0, [r7, #28]
        break;
 80043f0:	e009      	b.n	8004406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f6:	61fb      	str	r3, [r7, #28]
        break;
 80043f8:	e005      	b.n	8004406 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004404:	bf00      	nop
    }

    if (pclk != 0U)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d019      	beq.n	8004440 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	085a      	lsrs	r2, r3, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	441a      	add	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	d909      	bls.n	800443a <UART_SetConfig+0x546>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d205      	bcs.n	800443a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e002      	b.n	8004440 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800444c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	@ 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800445a:	bf00      	nop
 800445c:	40008000 	.word	0x40008000
 8004460:	00f42400 	.word	0x00f42400

08004464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01a      	beq.n	800457a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004562:	d10a      	bne.n	800457a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
  }
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b098      	sub	sp, #96	@ 0x60
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b8:	f7fc fc66 	bl	8000e88 <HAL_GetTick>
 80045bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d12e      	bne.n	800462a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d4:	2200      	movs	r2, #0
 80045d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f88c 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d021      	beq.n	800462a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004604:	647b      	str	r3, [r7, #68]	@ 0x44
 8004606:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800460a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e6      	bne.n	80045e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e062      	b.n	80046f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d149      	bne.n	80046cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f856 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d03c      	beq.n	80046cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	623b      	str	r3, [r7, #32]
   return(result);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
 8004672:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e6      	bne.n	8004652 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	60fb      	str	r3, [r7, #12]
   return(result);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a4:	61fa      	str	r2, [r7, #28]
 80046a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	617b      	str	r3, [r7, #20]
   return(result);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e011      	b.n	80046f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3758      	adds	r7, #88	@ 0x58
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004708:	e04f      	b.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d04b      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fc fbb9 	bl	8000e88 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <UART_WaitOnFlagUntilTimeout+0x30>
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e04e      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d037      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b80      	cmp	r3, #128	@ 0x80
 800473e:	d034      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b40      	cmp	r3, #64	@ 0x40
 8004744:	d031      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b08      	cmp	r3, #8
 8004752:	d110      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2208      	movs	r2, #8
 800475a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f838 	bl	80047d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2208      	movs	r2, #8
 8004766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e029      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004784:	d111      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800478e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f81e 	bl	80047d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00f      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0a0      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b095      	sub	sp, #84	@ 0x54
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	61fb      	str	r3, [r7, #28]
   return(result);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800482c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	60bb      	str	r3, [r7, #8]
   return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 0310 	bic.w	r3, r3, #16
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e6      	bne.n	8004848 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800488e:	bf00      	nop
 8004890:	3754      	adds	r7, #84	@ 0x54
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <std>:
 800489c:	2300      	movs	r3, #0
 800489e:	b510      	push	{r4, lr}
 80048a0:	4604      	mov	r4, r0
 80048a2:	e9c0 3300 	strd	r3, r3, [r0]
 80048a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048aa:	6083      	str	r3, [r0, #8]
 80048ac:	8181      	strh	r1, [r0, #12]
 80048ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80048b0:	81c2      	strh	r2, [r0, #14]
 80048b2:	6183      	str	r3, [r0, #24]
 80048b4:	4619      	mov	r1, r3
 80048b6:	2208      	movs	r2, #8
 80048b8:	305c      	adds	r0, #92	@ 0x5c
 80048ba:	f000 f906 	bl	8004aca <memset>
 80048be:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <std+0x58>)
 80048c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <std+0x5c>)
 80048c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <std+0x60>)
 80048c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <std+0x64>)
 80048cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <std+0x68>)
 80048d0:	6224      	str	r4, [r4, #32]
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d006      	beq.n	80048e4 <std+0x48>
 80048d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048da:	4294      	cmp	r4, r2
 80048dc:	d002      	beq.n	80048e4 <std+0x48>
 80048de:	33d0      	adds	r3, #208	@ 0xd0
 80048e0:	429c      	cmp	r4, r3
 80048e2:	d105      	bne.n	80048f0 <std+0x54>
 80048e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ec:	f000 b966 	b.w	8004bbc <__retarget_lock_init_recursive>
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop
 80048f4:	08004a45 	.word	0x08004a45
 80048f8:	08004a67 	.word	0x08004a67
 80048fc:	08004a9f 	.word	0x08004a9f
 8004900:	08004ac3 	.word	0x08004ac3
 8004904:	20000168 	.word	0x20000168

08004908 <stdio_exit_handler>:
 8004908:	4a02      	ldr	r2, [pc, #8]	@ (8004914 <stdio_exit_handler+0xc>)
 800490a:	4903      	ldr	r1, [pc, #12]	@ (8004918 <stdio_exit_handler+0x10>)
 800490c:	4803      	ldr	r0, [pc, #12]	@ (800491c <stdio_exit_handler+0x14>)
 800490e:	f000 b869 	b.w	80049e4 <_fwalk_sglue>
 8004912:	bf00      	nop
 8004914:	2000000c 	.word	0x2000000c
 8004918:	0800545d 	.word	0x0800545d
 800491c:	2000001c 	.word	0x2000001c

08004920 <cleanup_stdio>:
 8004920:	6841      	ldr	r1, [r0, #4]
 8004922:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <cleanup_stdio+0x34>)
 8004924:	4299      	cmp	r1, r3
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	d001      	beq.n	8004930 <cleanup_stdio+0x10>
 800492c:	f000 fd96 	bl	800545c <_fflush_r>
 8004930:	68a1      	ldr	r1, [r4, #8]
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <cleanup_stdio+0x38>)
 8004934:	4299      	cmp	r1, r3
 8004936:	d002      	beq.n	800493e <cleanup_stdio+0x1e>
 8004938:	4620      	mov	r0, r4
 800493a:	f000 fd8f 	bl	800545c <_fflush_r>
 800493e:	68e1      	ldr	r1, [r4, #12]
 8004940:	4b06      	ldr	r3, [pc, #24]	@ (800495c <cleanup_stdio+0x3c>)
 8004942:	4299      	cmp	r1, r3
 8004944:	d004      	beq.n	8004950 <cleanup_stdio+0x30>
 8004946:	4620      	mov	r0, r4
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f000 bd86 	b.w	800545c <_fflush_r>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	20000168 	.word	0x20000168
 8004958:	200001d0 	.word	0x200001d0
 800495c:	20000238 	.word	0x20000238

08004960 <global_stdio_init.part.0>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <global_stdio_init.part.0+0x30>)
 8004964:	4c0b      	ldr	r4, [pc, #44]	@ (8004994 <global_stdio_init.part.0+0x34>)
 8004966:	4a0c      	ldr	r2, [pc, #48]	@ (8004998 <global_stdio_init.part.0+0x38>)
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	4620      	mov	r0, r4
 800496c:	2200      	movs	r2, #0
 800496e:	2104      	movs	r1, #4
 8004970:	f7ff ff94 	bl	800489c <std>
 8004974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004978:	2201      	movs	r2, #1
 800497a:	2109      	movs	r1, #9
 800497c:	f7ff ff8e 	bl	800489c <std>
 8004980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004984:	2202      	movs	r2, #2
 8004986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498a:	2112      	movs	r1, #18
 800498c:	f7ff bf86 	b.w	800489c <std>
 8004990:	200002a0 	.word	0x200002a0
 8004994:	20000168 	.word	0x20000168
 8004998:	08004909 	.word	0x08004909

0800499c <__sfp_lock_acquire>:
 800499c:	4801      	ldr	r0, [pc, #4]	@ (80049a4 <__sfp_lock_acquire+0x8>)
 800499e:	f000 b90e 	b.w	8004bbe <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	200002a9 	.word	0x200002a9

080049a8 <__sfp_lock_release>:
 80049a8:	4801      	ldr	r0, [pc, #4]	@ (80049b0 <__sfp_lock_release+0x8>)
 80049aa:	f000 b909 	b.w	8004bc0 <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	200002a9 	.word	0x200002a9

080049b4 <__sinit>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	f7ff fff0 	bl	800499c <__sfp_lock_acquire>
 80049bc:	6a23      	ldr	r3, [r4, #32]
 80049be:	b11b      	cbz	r3, 80049c8 <__sinit+0x14>
 80049c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c4:	f7ff bff0 	b.w	80049a8 <__sfp_lock_release>
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <__sinit+0x28>)
 80049ca:	6223      	str	r3, [r4, #32]
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <__sinit+0x2c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f5      	bne.n	80049c0 <__sinit+0xc>
 80049d4:	f7ff ffc4 	bl	8004960 <global_stdio_init.part.0>
 80049d8:	e7f2      	b.n	80049c0 <__sinit+0xc>
 80049da:	bf00      	nop
 80049dc:	08004921 	.word	0x08004921
 80049e0:	200002a0 	.word	0x200002a0

080049e4 <_fwalk_sglue>:
 80049e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e8:	4607      	mov	r7, r0
 80049ea:	4688      	mov	r8, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	2600      	movs	r6, #0
 80049f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049f4:	f1b9 0901 	subs.w	r9, r9, #1
 80049f8:	d505      	bpl.n	8004a06 <_fwalk_sglue+0x22>
 80049fa:	6824      	ldr	r4, [r4, #0]
 80049fc:	2c00      	cmp	r4, #0
 80049fe:	d1f7      	bne.n	80049f0 <_fwalk_sglue+0xc>
 8004a00:	4630      	mov	r0, r6
 8004a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a06:	89ab      	ldrh	r3, [r5, #12]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d907      	bls.n	8004a1c <_fwalk_sglue+0x38>
 8004a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a10:	3301      	adds	r3, #1
 8004a12:	d003      	beq.n	8004a1c <_fwalk_sglue+0x38>
 8004a14:	4629      	mov	r1, r5
 8004a16:	4638      	mov	r0, r7
 8004a18:	47c0      	blx	r8
 8004a1a:	4306      	orrs	r6, r0
 8004a1c:	3568      	adds	r5, #104	@ 0x68
 8004a1e:	e7e9      	b.n	80049f4 <_fwalk_sglue+0x10>

08004a20 <iprintf>:
 8004a20:	b40f      	push	{r0, r1, r2, r3}
 8004a22:	b507      	push	{r0, r1, r2, lr}
 8004a24:	4906      	ldr	r1, [pc, #24]	@ (8004a40 <iprintf+0x20>)
 8004a26:	ab04      	add	r3, sp, #16
 8004a28:	6808      	ldr	r0, [r1, #0]
 8004a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a2e:	6881      	ldr	r1, [r0, #8]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	f000 f9e9 	bl	8004e08 <_vfiprintf_r>
 8004a36:	b003      	add	sp, #12
 8004a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a3c:	b004      	add	sp, #16
 8004a3e:	4770      	bx	lr
 8004a40:	20000018 	.word	0x20000018

08004a44 <__sread>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	460c      	mov	r4, r1
 8004a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4c:	f000 f868 	bl	8004b20 <_read_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	bfab      	itete	ge
 8004a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a56:	89a3      	ldrhlt	r3, [r4, #12]
 8004a58:	181b      	addge	r3, r3, r0
 8004a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a5e:	bfac      	ite	ge
 8004a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a62:	81a3      	strhlt	r3, [r4, #12]
 8004a64:	bd10      	pop	{r4, pc}

08004a66 <__swrite>:
 8004a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6a:	461f      	mov	r7, r3
 8004a6c:	898b      	ldrh	r3, [r1, #12]
 8004a6e:	05db      	lsls	r3, r3, #23
 8004a70:	4605      	mov	r5, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	4616      	mov	r6, r2
 8004a76:	d505      	bpl.n	8004a84 <__swrite+0x1e>
 8004a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f000 f83c 	bl	8004afc <_lseek_r>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	4628      	mov	r0, r5
 8004a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	f000 b853 	b.w	8004b44 <_write_r>

08004a9e <__sseek>:
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa6:	f000 f829 	bl	8004afc <_lseek_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	bf15      	itete	ne
 8004ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004aba:	81a3      	strheq	r3, [r4, #12]
 8004abc:	bf18      	it	ne
 8004abe:	81a3      	strhne	r3, [r4, #12]
 8004ac0:	bd10      	pop	{r4, pc}

08004ac2 <__sclose>:
 8004ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac6:	f000 b809 	b.w	8004adc <_close_r>

08004aca <memset>:
 8004aca:	4402      	add	r2, r0
 8004acc:	4603      	mov	r3, r0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <memset+0xa>
 8004ad2:	4770      	bx	lr
 8004ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad8:	e7f9      	b.n	8004ace <memset+0x4>
	...

08004adc <_close_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4d06      	ldr	r5, [pc, #24]	@ (8004af8 <_close_r+0x1c>)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	f7fb ff5f 	bl	80009aa <_close>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_close_r+0x1a>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_close_r+0x1a>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	200002a4 	.word	0x200002a4

08004afc <_lseek_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	@ (8004b1c <_lseek_r+0x20>)
 8004b00:	4604      	mov	r4, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	602a      	str	r2, [r5, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fb ff74 	bl	80009f8 <_lseek>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_lseek_r+0x1e>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_lseek_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	200002a4 	.word	0x200002a4

08004b20 <_read_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	@ (8004b40 <_read_r+0x20>)
 8004b24:	4604      	mov	r4, r0
 8004b26:	4608      	mov	r0, r1
 8004b28:	4611      	mov	r1, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f7fb ff02 	bl	8000938 <_read>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_read_r+0x1e>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_read_r+0x1e>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	200002a4 	.word	0x200002a4

08004b44 <_write_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d07      	ldr	r5, [pc, #28]	@ (8004b64 <_write_r+0x20>)
 8004b48:	4604      	mov	r4, r0
 8004b4a:	4608      	mov	r0, r1
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f7fb ff0d 	bl	8000972 <_write>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_write_r+0x1e>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_write_r+0x1e>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	200002a4 	.word	0x200002a4

08004b68 <__errno>:
 8004b68:	4b01      	ldr	r3, [pc, #4]	@ (8004b70 <__errno+0x8>)
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000018 	.word	0x20000018

08004b74 <__libc_init_array>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	4d0d      	ldr	r5, [pc, #52]	@ (8004bac <__libc_init_array+0x38>)
 8004b78:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb0 <__libc_init_array+0x3c>)
 8004b7a:	1b64      	subs	r4, r4, r5
 8004b7c:	10a4      	asrs	r4, r4, #2
 8004b7e:	2600      	movs	r6, #0
 8004b80:	42a6      	cmp	r6, r4
 8004b82:	d109      	bne.n	8004b98 <__libc_init_array+0x24>
 8004b84:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb4 <__libc_init_array+0x40>)
 8004b86:	4c0c      	ldr	r4, [pc, #48]	@ (8004bb8 <__libc_init_array+0x44>)
 8004b88:	f000 fdb8 	bl	80056fc <_init>
 8004b8c:	1b64      	subs	r4, r4, r5
 8004b8e:	10a4      	asrs	r4, r4, #2
 8004b90:	2600      	movs	r6, #0
 8004b92:	42a6      	cmp	r6, r4
 8004b94:	d105      	bne.n	8004ba2 <__libc_init_array+0x2e>
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9c:	4798      	blx	r3
 8004b9e:	3601      	adds	r6, #1
 8004ba0:	e7ee      	b.n	8004b80 <__libc_init_array+0xc>
 8004ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba6:	4798      	blx	r3
 8004ba8:	3601      	adds	r6, #1
 8004baa:	e7f2      	b.n	8004b92 <__libc_init_array+0x1e>
 8004bac:	080057ac 	.word	0x080057ac
 8004bb0:	080057ac 	.word	0x080057ac
 8004bb4:	080057ac 	.word	0x080057ac
 8004bb8:	080057b0 	.word	0x080057b0

08004bbc <__retarget_lock_init_recursive>:
 8004bbc:	4770      	bx	lr

08004bbe <__retarget_lock_acquire_recursive>:
 8004bbe:	4770      	bx	lr

08004bc0 <__retarget_lock_release_recursive>:
 8004bc0:	4770      	bx	lr
	...

08004bc4 <_free_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d041      	beq.n	8004c50 <_free_r+0x8c>
 8004bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd0:	1f0c      	subs	r4, r1, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfb8      	it	lt
 8004bd6:	18e4      	addlt	r4, r4, r3
 8004bd8:	f000 f8e0 	bl	8004d9c <__malloc_lock>
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <_free_r+0x90>)
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	b933      	cbnz	r3, 8004bf0 <_free_r+0x2c>
 8004be2:	6063      	str	r3, [r4, #4]
 8004be4:	6014      	str	r4, [r2, #0]
 8004be6:	4628      	mov	r0, r5
 8004be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bec:	f000 b8dc 	b.w	8004da8 <__malloc_unlock>
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d908      	bls.n	8004c06 <_free_r+0x42>
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	1821      	adds	r1, r4, r0
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	bf01      	itttt	eq
 8004bfc:	6819      	ldreq	r1, [r3, #0]
 8004bfe:	685b      	ldreq	r3, [r3, #4]
 8004c00:	1809      	addeq	r1, r1, r0
 8004c02:	6021      	streq	r1, [r4, #0]
 8004c04:	e7ed      	b.n	8004be2 <_free_r+0x1e>
 8004c06:	461a      	mov	r2, r3
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	b10b      	cbz	r3, 8004c10 <_free_r+0x4c>
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	d9fa      	bls.n	8004c06 <_free_r+0x42>
 8004c10:	6811      	ldr	r1, [r2, #0]
 8004c12:	1850      	adds	r0, r2, r1
 8004c14:	42a0      	cmp	r0, r4
 8004c16:	d10b      	bne.n	8004c30 <_free_r+0x6c>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	4401      	add	r1, r0
 8004c1c:	1850      	adds	r0, r2, r1
 8004c1e:	4283      	cmp	r3, r0
 8004c20:	6011      	str	r1, [r2, #0]
 8004c22:	d1e0      	bne.n	8004be6 <_free_r+0x22>
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	6053      	str	r3, [r2, #4]
 8004c2a:	4408      	add	r0, r1
 8004c2c:	6010      	str	r0, [r2, #0]
 8004c2e:	e7da      	b.n	8004be6 <_free_r+0x22>
 8004c30:	d902      	bls.n	8004c38 <_free_r+0x74>
 8004c32:	230c      	movs	r3, #12
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	e7d6      	b.n	8004be6 <_free_r+0x22>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	1821      	adds	r1, r4, r0
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf04      	itt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	bf04      	itt	eq
 8004c48:	1809      	addeq	r1, r1, r0
 8004c4a:	6021      	streq	r1, [r4, #0]
 8004c4c:	6054      	str	r4, [r2, #4]
 8004c4e:	e7ca      	b.n	8004be6 <_free_r+0x22>
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	bf00      	nop
 8004c54:	200002b0 	.word	0x200002b0

08004c58 <sbrk_aligned>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c98 <sbrk_aligned+0x40>)
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	6831      	ldr	r1, [r6, #0]
 8004c60:	4605      	mov	r5, r0
 8004c62:	b911      	cbnz	r1, 8004c6a <sbrk_aligned+0x12>
 8004c64:	f000 fcb6 	bl	80055d4 <_sbrk_r>
 8004c68:	6030      	str	r0, [r6, #0]
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 fcb1 	bl	80055d4 <_sbrk_r>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d103      	bne.n	8004c7e <sbrk_aligned+0x26>
 8004c76:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d0f8      	beq.n	8004c7a <sbrk_aligned+0x22>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 fca2 	bl	80055d4 <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1f2      	bne.n	8004c7a <sbrk_aligned+0x22>
 8004c94:	e7ef      	b.n	8004c76 <sbrk_aligned+0x1e>
 8004c96:	bf00      	nop
 8004c98:	200002ac 	.word	0x200002ac

08004c9c <_malloc_r>:
 8004c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca0:	1ccd      	adds	r5, r1, #3
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	db01      	blt.n	8004cb8 <_malloc_r+0x1c>
 8004cb4:	42a9      	cmp	r1, r5
 8004cb6:	d904      	bls.n	8004cc2 <_malloc_r+0x26>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d98 <_malloc_r+0xfc>
 8004cc6:	f000 f869 	bl	8004d9c <__malloc_lock>
 8004cca:	f8d8 3000 	ldr.w	r3, [r8]
 8004cce:	461c      	mov	r4, r3
 8004cd0:	bb44      	cbnz	r4, 8004d24 <_malloc_r+0x88>
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff ffbf 	bl	8004c58 <sbrk_aligned>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	4604      	mov	r4, r0
 8004cde:	d158      	bne.n	8004d92 <_malloc_r+0xf6>
 8004ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ce4:	4627      	mov	r7, r4
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d143      	bne.n	8004d72 <_malloc_r+0xd6>
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	d04b      	beq.n	8004d86 <_malloc_r+0xea>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	eb04 0903 	add.w	r9, r4, r3
 8004cf8:	f000 fc6c 	bl	80055d4 <_sbrk_r>
 8004cfc:	4581      	cmp	r9, r0
 8004cfe:	d142      	bne.n	8004d86 <_malloc_r+0xea>
 8004d00:	6821      	ldr	r1, [r4, #0]
 8004d02:	1a6d      	subs	r5, r5, r1
 8004d04:	4629      	mov	r1, r5
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ffa6 	bl	8004c58 <sbrk_aligned>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d03a      	beq.n	8004d86 <_malloc_r+0xea>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	442b      	add	r3, r5
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	bb62      	cbnz	r2, 8004d78 <_malloc_r+0xdc>
 8004d1e:	f8c8 7000 	str.w	r7, [r8]
 8004d22:	e00f      	b.n	8004d44 <_malloc_r+0xa8>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	1b52      	subs	r2, r2, r5
 8004d28:	d420      	bmi.n	8004d6c <_malloc_r+0xd0>
 8004d2a:	2a0b      	cmp	r2, #11
 8004d2c:	d917      	bls.n	8004d5e <_malloc_r+0xc2>
 8004d2e:	1961      	adds	r1, r4, r5
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	6025      	str	r5, [r4, #0]
 8004d34:	bf18      	it	ne
 8004d36:	6059      	strne	r1, [r3, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	bf08      	it	eq
 8004d3c:	f8c8 1000 	streq.w	r1, [r8]
 8004d40:	5162      	str	r2, [r4, r5]
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f82f 	bl	8004da8 <__malloc_unlock>
 8004d4a:	f104 000b 	add.w	r0, r4, #11
 8004d4e:	1d23      	adds	r3, r4, #4
 8004d50:	f020 0007 	bic.w	r0, r0, #7
 8004d54:	1ac2      	subs	r2, r0, r3
 8004d56:	bf1c      	itt	ne
 8004d58:	1a1b      	subne	r3, r3, r0
 8004d5a:	50a3      	strne	r3, [r4, r2]
 8004d5c:	e7af      	b.n	8004cbe <_malloc_r+0x22>
 8004d5e:	6862      	ldr	r2, [r4, #4]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	bf0c      	ite	eq
 8004d64:	f8c8 2000 	streq.w	r2, [r8]
 8004d68:	605a      	strne	r2, [r3, #4]
 8004d6a:	e7eb      	b.n	8004d44 <_malloc_r+0xa8>
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	6864      	ldr	r4, [r4, #4]
 8004d70:	e7ae      	b.n	8004cd0 <_malloc_r+0x34>
 8004d72:	463c      	mov	r4, r7
 8004d74:	687f      	ldr	r7, [r7, #4]
 8004d76:	e7b6      	b.n	8004ce6 <_malloc_r+0x4a>
 8004d78:	461a      	mov	r2, r3
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d1fb      	bne.n	8004d78 <_malloc_r+0xdc>
 8004d80:	2300      	movs	r3, #0
 8004d82:	6053      	str	r3, [r2, #4]
 8004d84:	e7de      	b.n	8004d44 <_malloc_r+0xa8>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 f80c 	bl	8004da8 <__malloc_unlock>
 8004d90:	e794      	b.n	8004cbc <_malloc_r+0x20>
 8004d92:	6005      	str	r5, [r0, #0]
 8004d94:	e7d6      	b.n	8004d44 <_malloc_r+0xa8>
 8004d96:	bf00      	nop
 8004d98:	200002b0 	.word	0x200002b0

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f7ff bf0e 	b.w	8004bbe <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	200002a8 	.word	0x200002a8

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f7ff bf09 	b.w	8004bc0 <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	200002a8 	.word	0x200002a8

08004db4 <__sfputc_r>:
 8004db4:	6893      	ldr	r3, [r2, #8]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	b410      	push	{r4}
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	da08      	bge.n	8004dd2 <__sfputc_r+0x1e>
 8004dc0:	6994      	ldr	r4, [r2, #24]
 8004dc2:	42a3      	cmp	r3, r4
 8004dc4:	db01      	blt.n	8004dca <__sfputc_r+0x16>
 8004dc6:	290a      	cmp	r1, #10
 8004dc8:	d103      	bne.n	8004dd2 <__sfputc_r+0x1e>
 8004dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dce:	f000 bb6d 	b.w	80054ac <__swbuf_r>
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	1c58      	adds	r0, r3, #1
 8004dd6:	6010      	str	r0, [r2, #0]
 8004dd8:	7019      	strb	r1, [r3, #0]
 8004dda:	4608      	mov	r0, r1
 8004ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <__sfputs_r>:
 8004de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de4:	4606      	mov	r6, r0
 8004de6:	460f      	mov	r7, r1
 8004de8:	4614      	mov	r4, r2
 8004dea:	18d5      	adds	r5, r2, r3
 8004dec:	42ac      	cmp	r4, r5
 8004dee:	d101      	bne.n	8004df4 <__sfputs_r+0x12>
 8004df0:	2000      	movs	r0, #0
 8004df2:	e007      	b.n	8004e04 <__sfputs_r+0x22>
 8004df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df8:	463a      	mov	r2, r7
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff ffda 	bl	8004db4 <__sfputc_r>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d1f3      	bne.n	8004dec <__sfputs_r+0xa>
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e08 <_vfiprintf_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	b09d      	sub	sp, #116	@ 0x74
 8004e10:	4614      	mov	r4, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	4606      	mov	r6, r0
 8004e16:	b118      	cbz	r0, 8004e20 <_vfiprintf_r+0x18>
 8004e18:	6a03      	ldr	r3, [r0, #32]
 8004e1a:	b90b      	cbnz	r3, 8004e20 <_vfiprintf_r+0x18>
 8004e1c:	f7ff fdca 	bl	80049b4 <__sinit>
 8004e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e22:	07d9      	lsls	r1, r3, #31
 8004e24:	d405      	bmi.n	8004e32 <_vfiprintf_r+0x2a>
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	059a      	lsls	r2, r3, #22
 8004e2a:	d402      	bmi.n	8004e32 <_vfiprintf_r+0x2a>
 8004e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e2e:	f7ff fec6 	bl	8004bbe <__retarget_lock_acquire_recursive>
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	071b      	lsls	r3, r3, #28
 8004e36:	d501      	bpl.n	8004e3c <_vfiprintf_r+0x34>
 8004e38:	692b      	ldr	r3, [r5, #16]
 8004e3a:	b99b      	cbnz	r3, 8004e64 <_vfiprintf_r+0x5c>
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f000 fb72 	bl	8005528 <__swsetup_r>
 8004e44:	b170      	cbz	r0, 8004e64 <_vfiprintf_r+0x5c>
 8004e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e48:	07dc      	lsls	r4, r3, #31
 8004e4a:	d504      	bpl.n	8004e56 <_vfiprintf_r+0x4e>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	b01d      	add	sp, #116	@ 0x74
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	0598      	lsls	r0, r3, #22
 8004e5a:	d4f7      	bmi.n	8004e4c <_vfiprintf_r+0x44>
 8004e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e5e:	f7ff feaf 	bl	8004bc0 <__retarget_lock_release_recursive>
 8004e62:	e7f3      	b.n	8004e4c <_vfiprintf_r+0x44>
 8004e64:	2300      	movs	r3, #0
 8004e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e68:	2320      	movs	r3, #32
 8004e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e72:	2330      	movs	r3, #48	@ 0x30
 8004e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005024 <_vfiprintf_r+0x21c>
 8004e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e7c:	f04f 0901 	mov.w	r9, #1
 8004e80:	4623      	mov	r3, r4
 8004e82:	469a      	mov	sl, r3
 8004e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e88:	b10a      	cbz	r2, 8004e8e <_vfiprintf_r+0x86>
 8004e8a:	2a25      	cmp	r2, #37	@ 0x25
 8004e8c:	d1f9      	bne.n	8004e82 <_vfiprintf_r+0x7a>
 8004e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e92:	d00b      	beq.n	8004eac <_vfiprintf_r+0xa4>
 8004e94:	465b      	mov	r3, fp
 8004e96:	4622      	mov	r2, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ffa1 	bl	8004de2 <__sfputs_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f000 80a7 	beq.w	8004ff4 <_vfiprintf_r+0x1ec>
 8004ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ea8:	445a      	add	r2, fp
 8004eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eac:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 809f 	beq.w	8004ff4 <_vfiprintf_r+0x1ec>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec0:	f10a 0a01 	add.w	sl, sl, #1
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	9307      	str	r3, [sp, #28]
 8004ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ece:	4654      	mov	r4, sl
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed6:	4853      	ldr	r0, [pc, #332]	@ (8005024 <_vfiprintf_r+0x21c>)
 8004ed8:	f7fb f97a 	bl	80001d0 <memchr>
 8004edc:	9a04      	ldr	r2, [sp, #16]
 8004ede:	b9d8      	cbnz	r0, 8004f18 <_vfiprintf_r+0x110>
 8004ee0:	06d1      	lsls	r1, r2, #27
 8004ee2:	bf44      	itt	mi
 8004ee4:	2320      	movmi	r3, #32
 8004ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eea:	0713      	lsls	r3, r2, #28
 8004eec:	bf44      	itt	mi
 8004eee:	232b      	movmi	r3, #43	@ 0x2b
 8004ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004efa:	d015      	beq.n	8004f28 <_vfiprintf_r+0x120>
 8004efc:	9a07      	ldr	r2, [sp, #28]
 8004efe:	4654      	mov	r4, sl
 8004f00:	2000      	movs	r0, #0
 8004f02:	f04f 0c0a 	mov.w	ip, #10
 8004f06:	4621      	mov	r1, r4
 8004f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f0c:	3b30      	subs	r3, #48	@ 0x30
 8004f0e:	2b09      	cmp	r3, #9
 8004f10:	d94b      	bls.n	8004faa <_vfiprintf_r+0x1a2>
 8004f12:	b1b0      	cbz	r0, 8004f42 <_vfiprintf_r+0x13a>
 8004f14:	9207      	str	r2, [sp, #28]
 8004f16:	e014      	b.n	8004f42 <_vfiprintf_r+0x13a>
 8004f18:	eba0 0308 	sub.w	r3, r0, r8
 8004f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f20:	4313      	orrs	r3, r2
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	46a2      	mov	sl, r4
 8004f26:	e7d2      	b.n	8004ece <_vfiprintf_r+0xc6>
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	1d19      	adds	r1, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	9103      	str	r1, [sp, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfbb      	ittet	lt
 8004f34:	425b      	neglt	r3, r3
 8004f36:	f042 0202 	orrlt.w	r2, r2, #2
 8004f3a:	9307      	strge	r3, [sp, #28]
 8004f3c:	9307      	strlt	r3, [sp, #28]
 8004f3e:	bfb8      	it	lt
 8004f40:	9204      	strlt	r2, [sp, #16]
 8004f42:	7823      	ldrb	r3, [r4, #0]
 8004f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f46:	d10a      	bne.n	8004f5e <_vfiprintf_r+0x156>
 8004f48:	7863      	ldrb	r3, [r4, #1]
 8004f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f4c:	d132      	bne.n	8004fb4 <_vfiprintf_r+0x1ac>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	1d1a      	adds	r2, r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9203      	str	r2, [sp, #12]
 8004f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f5a:	3402      	adds	r4, #2
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005034 <_vfiprintf_r+0x22c>
 8004f62:	7821      	ldrb	r1, [r4, #0]
 8004f64:	2203      	movs	r2, #3
 8004f66:	4650      	mov	r0, sl
 8004f68:	f7fb f932 	bl	80001d0 <memchr>
 8004f6c:	b138      	cbz	r0, 8004f7e <_vfiprintf_r+0x176>
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	eba0 000a 	sub.w	r0, r0, sl
 8004f74:	2240      	movs	r2, #64	@ 0x40
 8004f76:	4082      	lsls	r2, r0
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	3401      	adds	r4, #1
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f82:	4829      	ldr	r0, [pc, #164]	@ (8005028 <_vfiprintf_r+0x220>)
 8004f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f88:	2206      	movs	r2, #6
 8004f8a:	f7fb f921 	bl	80001d0 <memchr>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d03f      	beq.n	8005012 <_vfiprintf_r+0x20a>
 8004f92:	4b26      	ldr	r3, [pc, #152]	@ (800502c <_vfiprintf_r+0x224>)
 8004f94:	bb1b      	cbnz	r3, 8004fde <_vfiprintf_r+0x1d6>
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	3307      	adds	r3, #7
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	9303      	str	r3, [sp, #12]
 8004fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa4:	443b      	add	r3, r7
 8004fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fa8:	e76a      	b.n	8004e80 <_vfiprintf_r+0x78>
 8004faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fae:	460c      	mov	r4, r1
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	e7a8      	b.n	8004f06 <_vfiprintf_r+0xfe>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	3401      	adds	r4, #1
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f04f 0c0a 	mov.w	ip, #10
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc6:	3a30      	subs	r2, #48	@ 0x30
 8004fc8:	2a09      	cmp	r2, #9
 8004fca:	d903      	bls.n	8004fd4 <_vfiprintf_r+0x1cc>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0c6      	beq.n	8004f5e <_vfiprintf_r+0x156>
 8004fd0:	9105      	str	r1, [sp, #20]
 8004fd2:	e7c4      	b.n	8004f5e <_vfiprintf_r+0x156>
 8004fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd8:	4604      	mov	r4, r0
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e7f0      	b.n	8004fc0 <_vfiprintf_r+0x1b8>
 8004fde:	ab03      	add	r3, sp, #12
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <_vfiprintf_r+0x228>)
 8004fe6:	a904      	add	r1, sp, #16
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f3af 8000 	nop.w
 8004fee:	4607      	mov	r7, r0
 8004ff0:	1c78      	adds	r0, r7, #1
 8004ff2:	d1d6      	bne.n	8004fa2 <_vfiprintf_r+0x19a>
 8004ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ff6:	07d9      	lsls	r1, r3, #31
 8004ff8:	d405      	bmi.n	8005006 <_vfiprintf_r+0x1fe>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	059a      	lsls	r2, r3, #22
 8004ffe:	d402      	bmi.n	8005006 <_vfiprintf_r+0x1fe>
 8005000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005002:	f7ff fddd 	bl	8004bc0 <__retarget_lock_release_recursive>
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	065b      	lsls	r3, r3, #25
 800500a:	f53f af1f 	bmi.w	8004e4c <_vfiprintf_r+0x44>
 800500e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005010:	e71e      	b.n	8004e50 <_vfiprintf_r+0x48>
 8005012:	ab03      	add	r3, sp, #12
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	462a      	mov	r2, r5
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <_vfiprintf_r+0x228>)
 800501a:	a904      	add	r1, sp, #16
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f879 	bl	8005114 <_printf_i>
 8005022:	e7e4      	b.n	8004fee <_vfiprintf_r+0x1e6>
 8005024:	08005770 	.word	0x08005770
 8005028:	0800577a 	.word	0x0800577a
 800502c:	00000000 	.word	0x00000000
 8005030:	08004de3 	.word	0x08004de3
 8005034:	08005776 	.word	0x08005776

08005038 <_printf_common>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	4616      	mov	r6, r2
 800503e:	4698      	mov	r8, r3
 8005040:	688a      	ldr	r2, [r1, #8]
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005048:	4293      	cmp	r3, r2
 800504a:	bfb8      	it	lt
 800504c:	4613      	movlt	r3, r2
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005054:	4607      	mov	r7, r0
 8005056:	460c      	mov	r4, r1
 8005058:	b10a      	cbz	r2, 800505e <_printf_common+0x26>
 800505a:	3301      	adds	r3, #1
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	0699      	lsls	r1, r3, #26
 8005062:	bf42      	ittt	mi
 8005064:	6833      	ldrmi	r3, [r6, #0]
 8005066:	3302      	addmi	r3, #2
 8005068:	6033      	strmi	r3, [r6, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	f015 0506 	ands.w	r5, r5, #6
 8005070:	d106      	bne.n	8005080 <_printf_common+0x48>
 8005072:	f104 0a19 	add.w	sl, r4, #25
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	42ab      	cmp	r3, r5
 800507e:	dc26      	bgt.n	80050ce <_printf_common+0x96>
 8005080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	3b00      	subs	r3, #0
 8005088:	bf18      	it	ne
 800508a:	2301      	movne	r3, #1
 800508c:	0692      	lsls	r2, r2, #26
 800508e:	d42b      	bmi.n	80050e8 <_printf_common+0xb0>
 8005090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005094:	4641      	mov	r1, r8
 8005096:	4638      	mov	r0, r7
 8005098:	47c8      	blx	r9
 800509a:	3001      	adds	r0, #1
 800509c:	d01e      	beq.n	80050dc <_printf_common+0xa4>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	bf02      	ittt	eq
 80050aa:	68e5      	ldreq	r5, [r4, #12]
 80050ac:	6833      	ldreq	r3, [r6, #0]
 80050ae:	1aed      	subeq	r5, r5, r3
 80050b0:	68a3      	ldr	r3, [r4, #8]
 80050b2:	bf0c      	ite	eq
 80050b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b8:	2500      	movne	r5, #0
 80050ba:	4293      	cmp	r3, r2
 80050bc:	bfc4      	itt	gt
 80050be:	1a9b      	subgt	r3, r3, r2
 80050c0:	18ed      	addgt	r5, r5, r3
 80050c2:	2600      	movs	r6, #0
 80050c4:	341a      	adds	r4, #26
 80050c6:	42b5      	cmp	r5, r6
 80050c8:	d11a      	bne.n	8005100 <_printf_common+0xc8>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e008      	b.n	80050e0 <_printf_common+0xa8>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4652      	mov	r2, sl
 80050d2:	4641      	mov	r1, r8
 80050d4:	4638      	mov	r0, r7
 80050d6:	47c8      	blx	r9
 80050d8:	3001      	adds	r0, #1
 80050da:	d103      	bne.n	80050e4 <_printf_common+0xac>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	3501      	adds	r5, #1
 80050e6:	e7c6      	b.n	8005076 <_printf_common+0x3e>
 80050e8:	18e1      	adds	r1, r4, r3
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	2030      	movs	r0, #48	@ 0x30
 80050ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050f2:	4422      	add	r2, r4
 80050f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050fc:	3302      	adds	r3, #2
 80050fe:	e7c7      	b.n	8005090 <_printf_common+0x58>
 8005100:	2301      	movs	r3, #1
 8005102:	4622      	mov	r2, r4
 8005104:	4641      	mov	r1, r8
 8005106:	4638      	mov	r0, r7
 8005108:	47c8      	blx	r9
 800510a:	3001      	adds	r0, #1
 800510c:	d0e6      	beq.n	80050dc <_printf_common+0xa4>
 800510e:	3601      	adds	r6, #1
 8005110:	e7d9      	b.n	80050c6 <_printf_common+0x8e>
	...

08005114 <_printf_i>:
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	7e0f      	ldrb	r7, [r1, #24]
 800511a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800511c:	2f78      	cmp	r7, #120	@ 0x78
 800511e:	4691      	mov	r9, r2
 8005120:	4680      	mov	r8, r0
 8005122:	460c      	mov	r4, r1
 8005124:	469a      	mov	sl, r3
 8005126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800512a:	d807      	bhi.n	800513c <_printf_i+0x28>
 800512c:	2f62      	cmp	r7, #98	@ 0x62
 800512e:	d80a      	bhi.n	8005146 <_printf_i+0x32>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f000 80d2 	beq.w	80052da <_printf_i+0x1c6>
 8005136:	2f58      	cmp	r7, #88	@ 0x58
 8005138:	f000 80b9 	beq.w	80052ae <_printf_i+0x19a>
 800513c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005144:	e03a      	b.n	80051bc <_printf_i+0xa8>
 8005146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800514a:	2b15      	cmp	r3, #21
 800514c:	d8f6      	bhi.n	800513c <_printf_i+0x28>
 800514e:	a101      	add	r1, pc, #4	@ (adr r1, 8005154 <_printf_i+0x40>)
 8005150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051c1 	.word	0x080051c1
 800515c:	0800513d 	.word	0x0800513d
 8005160:	0800513d 	.word	0x0800513d
 8005164:	0800513d 	.word	0x0800513d
 8005168:	0800513d 	.word	0x0800513d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800513d 	.word	0x0800513d
 8005174:	0800513d 	.word	0x0800513d
 8005178:	0800513d 	.word	0x0800513d
 800517c:	0800513d 	.word	0x0800513d
 8005180:	080052c1 	.word	0x080052c1
 8005184:	080051eb 	.word	0x080051eb
 8005188:	0800527b 	.word	0x0800527b
 800518c:	0800513d 	.word	0x0800513d
 8005190:	0800513d 	.word	0x0800513d
 8005194:	080052e3 	.word	0x080052e3
 8005198:	0800513d 	.word	0x0800513d
 800519c:	080051eb 	.word	0x080051eb
 80051a0:	0800513d 	.word	0x0800513d
 80051a4:	0800513d 	.word	0x0800513d
 80051a8:	08005283 	.word	0x08005283
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6032      	str	r2, [r6, #0]
 80051b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051bc:	2301      	movs	r3, #1
 80051be:	e09d      	b.n	80052fc <_printf_i+0x1e8>
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	6031      	str	r1, [r6, #0]
 80051c8:	0606      	lsls	r6, r0, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xbc>
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	e003      	b.n	80051d8 <_printf_i+0xc4>
 80051d0:	0645      	lsls	r5, r0, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xb8>
 80051d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051d8:	2d00      	cmp	r5, #0
 80051da:	da03      	bge.n	80051e4 <_printf_i+0xd0>
 80051dc:	232d      	movs	r3, #45	@ 0x2d
 80051de:	426d      	negs	r5, r5
 80051e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e4:	4859      	ldr	r0, [pc, #356]	@ (800534c <_printf_i+0x238>)
 80051e6:	230a      	movs	r3, #10
 80051e8:	e011      	b.n	800520e <_printf_i+0xfa>
 80051ea:	6821      	ldr	r1, [r4, #0]
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	0608      	lsls	r0, r1, #24
 80051f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051f4:	d402      	bmi.n	80051fc <_printf_i+0xe8>
 80051f6:	0649      	lsls	r1, r1, #25
 80051f8:	bf48      	it	mi
 80051fa:	b2ad      	uxthmi	r5, r5
 80051fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80051fe:	4853      	ldr	r0, [pc, #332]	@ (800534c <_printf_i+0x238>)
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	bf14      	ite	ne
 8005204:	230a      	movne	r3, #10
 8005206:	2308      	moveq	r3, #8
 8005208:	2100      	movs	r1, #0
 800520a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800520e:	6866      	ldr	r6, [r4, #4]
 8005210:	60a6      	str	r6, [r4, #8]
 8005212:	2e00      	cmp	r6, #0
 8005214:	bfa2      	ittt	ge
 8005216:	6821      	ldrge	r1, [r4, #0]
 8005218:	f021 0104 	bicge.w	r1, r1, #4
 800521c:	6021      	strge	r1, [r4, #0]
 800521e:	b90d      	cbnz	r5, 8005224 <_printf_i+0x110>
 8005220:	2e00      	cmp	r6, #0
 8005222:	d04b      	beq.n	80052bc <_printf_i+0x1a8>
 8005224:	4616      	mov	r6, r2
 8005226:	fbb5 f1f3 	udiv	r1, r5, r3
 800522a:	fb03 5711 	mls	r7, r3, r1, r5
 800522e:	5dc7      	ldrb	r7, [r0, r7]
 8005230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005234:	462f      	mov	r7, r5
 8005236:	42bb      	cmp	r3, r7
 8005238:	460d      	mov	r5, r1
 800523a:	d9f4      	bls.n	8005226 <_printf_i+0x112>
 800523c:	2b08      	cmp	r3, #8
 800523e:	d10b      	bne.n	8005258 <_printf_i+0x144>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	07df      	lsls	r7, r3, #31
 8005244:	d508      	bpl.n	8005258 <_printf_i+0x144>
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6861      	ldr	r1, [r4, #4]
 800524a:	4299      	cmp	r1, r3
 800524c:	bfde      	ittt	le
 800524e:	2330      	movle	r3, #48	@ 0x30
 8005250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005258:	1b92      	subs	r2, r2, r6
 800525a:	6122      	str	r2, [r4, #16]
 800525c:	f8cd a000 	str.w	sl, [sp]
 8005260:	464b      	mov	r3, r9
 8005262:	aa03      	add	r2, sp, #12
 8005264:	4621      	mov	r1, r4
 8005266:	4640      	mov	r0, r8
 8005268:	f7ff fee6 	bl	8005038 <_printf_common>
 800526c:	3001      	adds	r0, #1
 800526e:	d14a      	bne.n	8005306 <_printf_i+0x1f2>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	b004      	add	sp, #16
 8005276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f043 0320 	orr.w	r3, r3, #32
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	4833      	ldr	r0, [pc, #204]	@ (8005350 <_printf_i+0x23c>)
 8005284:	2778      	movs	r7, #120	@ 0x78
 8005286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	6831      	ldr	r1, [r6, #0]
 800528e:	061f      	lsls	r7, r3, #24
 8005290:	f851 5b04 	ldr.w	r5, [r1], #4
 8005294:	d402      	bmi.n	800529c <_printf_i+0x188>
 8005296:	065f      	lsls	r7, r3, #25
 8005298:	bf48      	it	mi
 800529a:	b2ad      	uxthmi	r5, r5
 800529c:	6031      	str	r1, [r6, #0]
 800529e:	07d9      	lsls	r1, r3, #31
 80052a0:	bf44      	itt	mi
 80052a2:	f043 0320 	orrmi.w	r3, r3, #32
 80052a6:	6023      	strmi	r3, [r4, #0]
 80052a8:	b11d      	cbz	r5, 80052b2 <_printf_i+0x19e>
 80052aa:	2310      	movs	r3, #16
 80052ac:	e7ac      	b.n	8005208 <_printf_i+0xf4>
 80052ae:	4827      	ldr	r0, [pc, #156]	@ (800534c <_printf_i+0x238>)
 80052b0:	e7e9      	b.n	8005286 <_printf_i+0x172>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f023 0320 	bic.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	e7f6      	b.n	80052aa <_printf_i+0x196>
 80052bc:	4616      	mov	r6, r2
 80052be:	e7bd      	b.n	800523c <_printf_i+0x128>
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	6961      	ldr	r1, [r4, #20]
 80052c6:	1d18      	adds	r0, r3, #4
 80052c8:	6030      	str	r0, [r6, #0]
 80052ca:	062e      	lsls	r6, r5, #24
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	d501      	bpl.n	80052d4 <_printf_i+0x1c0>
 80052d0:	6019      	str	r1, [r3, #0]
 80052d2:	e002      	b.n	80052da <_printf_i+0x1c6>
 80052d4:	0668      	lsls	r0, r5, #25
 80052d6:	d5fb      	bpl.n	80052d0 <_printf_i+0x1bc>
 80052d8:	8019      	strh	r1, [r3, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	4616      	mov	r6, r2
 80052e0:	e7bc      	b.n	800525c <_printf_i+0x148>
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	1d1a      	adds	r2, r3, #4
 80052e6:	6032      	str	r2, [r6, #0]
 80052e8:	681e      	ldr	r6, [r3, #0]
 80052ea:	6862      	ldr	r2, [r4, #4]
 80052ec:	2100      	movs	r1, #0
 80052ee:	4630      	mov	r0, r6
 80052f0:	f7fa ff6e 	bl	80001d0 <memchr>
 80052f4:	b108      	cbz	r0, 80052fa <_printf_i+0x1e6>
 80052f6:	1b80      	subs	r0, r0, r6
 80052f8:	6060      	str	r0, [r4, #4]
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	2300      	movs	r3, #0
 8005300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005304:	e7aa      	b.n	800525c <_printf_i+0x148>
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	4632      	mov	r2, r6
 800530a:	4649      	mov	r1, r9
 800530c:	4640      	mov	r0, r8
 800530e:	47d0      	blx	sl
 8005310:	3001      	adds	r0, #1
 8005312:	d0ad      	beq.n	8005270 <_printf_i+0x15c>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	079b      	lsls	r3, r3, #30
 8005318:	d413      	bmi.n	8005342 <_printf_i+0x22e>
 800531a:	68e0      	ldr	r0, [r4, #12]
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	4298      	cmp	r0, r3
 8005320:	bfb8      	it	lt
 8005322:	4618      	movlt	r0, r3
 8005324:	e7a6      	b.n	8005274 <_printf_i+0x160>
 8005326:	2301      	movs	r3, #1
 8005328:	4632      	mov	r2, r6
 800532a:	4649      	mov	r1, r9
 800532c:	4640      	mov	r0, r8
 800532e:	47d0      	blx	sl
 8005330:	3001      	adds	r0, #1
 8005332:	d09d      	beq.n	8005270 <_printf_i+0x15c>
 8005334:	3501      	adds	r5, #1
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	9903      	ldr	r1, [sp, #12]
 800533a:	1a5b      	subs	r3, r3, r1
 800533c:	42ab      	cmp	r3, r5
 800533e:	dcf2      	bgt.n	8005326 <_printf_i+0x212>
 8005340:	e7eb      	b.n	800531a <_printf_i+0x206>
 8005342:	2500      	movs	r5, #0
 8005344:	f104 0619 	add.w	r6, r4, #25
 8005348:	e7f5      	b.n	8005336 <_printf_i+0x222>
 800534a:	bf00      	nop
 800534c:	08005781 	.word	0x08005781
 8005350:	08005792 	.word	0x08005792

08005354 <__sflush_r>:
 8005354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535c:	0716      	lsls	r6, r2, #28
 800535e:	4605      	mov	r5, r0
 8005360:	460c      	mov	r4, r1
 8005362:	d454      	bmi.n	800540e <__sflush_r+0xba>
 8005364:	684b      	ldr	r3, [r1, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	dc02      	bgt.n	8005370 <__sflush_r+0x1c>
 800536a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	dd48      	ble.n	8005402 <__sflush_r+0xae>
 8005370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005372:	2e00      	cmp	r6, #0
 8005374:	d045      	beq.n	8005402 <__sflush_r+0xae>
 8005376:	2300      	movs	r3, #0
 8005378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800537c:	682f      	ldr	r7, [r5, #0]
 800537e:	6a21      	ldr	r1, [r4, #32]
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	d030      	beq.n	80053e6 <__sflush_r+0x92>
 8005384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0759      	lsls	r1, r3, #29
 800538a:	d505      	bpl.n	8005398 <__sflush_r+0x44>
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005392:	b10b      	cbz	r3, 8005398 <__sflush_r+0x44>
 8005394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800539c:	6a21      	ldr	r1, [r4, #32]
 800539e:	4628      	mov	r0, r5
 80053a0:	47b0      	blx	r6
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	d106      	bne.n	80053b6 <__sflush_r+0x62>
 80053a8:	6829      	ldr	r1, [r5, #0]
 80053aa:	291d      	cmp	r1, #29
 80053ac:	d82b      	bhi.n	8005406 <__sflush_r+0xb2>
 80053ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005458 <__sflush_r+0x104>)
 80053b0:	410a      	asrs	r2, r1
 80053b2:	07d6      	lsls	r6, r2, #31
 80053b4:	d427      	bmi.n	8005406 <__sflush_r+0xb2>
 80053b6:	2200      	movs	r2, #0
 80053b8:	6062      	str	r2, [r4, #4]
 80053ba:	04d9      	lsls	r1, r3, #19
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	6022      	str	r2, [r4, #0]
 80053c0:	d504      	bpl.n	80053cc <__sflush_r+0x78>
 80053c2:	1c42      	adds	r2, r0, #1
 80053c4:	d101      	bne.n	80053ca <__sflush_r+0x76>
 80053c6:	682b      	ldr	r3, [r5, #0]
 80053c8:	b903      	cbnz	r3, 80053cc <__sflush_r+0x78>
 80053ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80053cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	b1b9      	cbz	r1, 8005402 <__sflush_r+0xae>
 80053d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d002      	beq.n	80053e0 <__sflush_r+0x8c>
 80053da:	4628      	mov	r0, r5
 80053dc:	f7ff fbf2 	bl	8004bc4 <_free_r>
 80053e0:	2300      	movs	r3, #0
 80053e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80053e4:	e00d      	b.n	8005402 <__sflush_r+0xae>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b0      	blx	r6
 80053ec:	4602      	mov	r2, r0
 80053ee:	1c50      	adds	r0, r2, #1
 80053f0:	d1c9      	bne.n	8005386 <__sflush_r+0x32>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0c6      	beq.n	8005386 <__sflush_r+0x32>
 80053f8:	2b1d      	cmp	r3, #29
 80053fa:	d001      	beq.n	8005400 <__sflush_r+0xac>
 80053fc:	2b16      	cmp	r3, #22
 80053fe:	d11e      	bne.n	800543e <__sflush_r+0xea>
 8005400:	602f      	str	r7, [r5, #0]
 8005402:	2000      	movs	r0, #0
 8005404:	e022      	b.n	800544c <__sflush_r+0xf8>
 8005406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800540a:	b21b      	sxth	r3, r3
 800540c:	e01b      	b.n	8005446 <__sflush_r+0xf2>
 800540e:	690f      	ldr	r7, [r1, #16]
 8005410:	2f00      	cmp	r7, #0
 8005412:	d0f6      	beq.n	8005402 <__sflush_r+0xae>
 8005414:	0793      	lsls	r3, r2, #30
 8005416:	680e      	ldr	r6, [r1, #0]
 8005418:	bf08      	it	eq
 800541a:	694b      	ldreq	r3, [r1, #20]
 800541c:	600f      	str	r7, [r1, #0]
 800541e:	bf18      	it	ne
 8005420:	2300      	movne	r3, #0
 8005422:	eba6 0807 	sub.w	r8, r6, r7
 8005426:	608b      	str	r3, [r1, #8]
 8005428:	f1b8 0f00 	cmp.w	r8, #0
 800542c:	dde9      	ble.n	8005402 <__sflush_r+0xae>
 800542e:	6a21      	ldr	r1, [r4, #32]
 8005430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005432:	4643      	mov	r3, r8
 8005434:	463a      	mov	r2, r7
 8005436:	4628      	mov	r0, r5
 8005438:	47b0      	blx	r6
 800543a:	2800      	cmp	r0, #0
 800543c:	dc08      	bgt.n	8005450 <__sflush_r+0xfc>
 800543e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005450:	4407      	add	r7, r0
 8005452:	eba8 0800 	sub.w	r8, r8, r0
 8005456:	e7e7      	b.n	8005428 <__sflush_r+0xd4>
 8005458:	dfbffffe 	.word	0xdfbffffe

0800545c <_fflush_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	690b      	ldr	r3, [r1, #16]
 8005460:	4605      	mov	r5, r0
 8005462:	460c      	mov	r4, r1
 8005464:	b913      	cbnz	r3, 800546c <_fflush_r+0x10>
 8005466:	2500      	movs	r5, #0
 8005468:	4628      	mov	r0, r5
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	b118      	cbz	r0, 8005476 <_fflush_r+0x1a>
 800546e:	6a03      	ldr	r3, [r0, #32]
 8005470:	b90b      	cbnz	r3, 8005476 <_fflush_r+0x1a>
 8005472:	f7ff fa9f 	bl	80049b4 <__sinit>
 8005476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f3      	beq.n	8005466 <_fflush_r+0xa>
 800547e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005480:	07d0      	lsls	r0, r2, #31
 8005482:	d404      	bmi.n	800548e <_fflush_r+0x32>
 8005484:	0599      	lsls	r1, r3, #22
 8005486:	d402      	bmi.n	800548e <_fflush_r+0x32>
 8005488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800548a:	f7ff fb98 	bl	8004bbe <__retarget_lock_acquire_recursive>
 800548e:	4628      	mov	r0, r5
 8005490:	4621      	mov	r1, r4
 8005492:	f7ff ff5f 	bl	8005354 <__sflush_r>
 8005496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005498:	07da      	lsls	r2, r3, #31
 800549a:	4605      	mov	r5, r0
 800549c:	d4e4      	bmi.n	8005468 <_fflush_r+0xc>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	059b      	lsls	r3, r3, #22
 80054a2:	d4e1      	bmi.n	8005468 <_fflush_r+0xc>
 80054a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a6:	f7ff fb8b 	bl	8004bc0 <__retarget_lock_release_recursive>
 80054aa:	e7dd      	b.n	8005468 <_fflush_r+0xc>

080054ac <__swbuf_r>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	460e      	mov	r6, r1
 80054b0:	4614      	mov	r4, r2
 80054b2:	4605      	mov	r5, r0
 80054b4:	b118      	cbz	r0, 80054be <__swbuf_r+0x12>
 80054b6:	6a03      	ldr	r3, [r0, #32]
 80054b8:	b90b      	cbnz	r3, 80054be <__swbuf_r+0x12>
 80054ba:	f7ff fa7b 	bl	80049b4 <__sinit>
 80054be:	69a3      	ldr	r3, [r4, #24]
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	071a      	lsls	r2, r3, #28
 80054c6:	d501      	bpl.n	80054cc <__swbuf_r+0x20>
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	b943      	cbnz	r3, 80054de <__swbuf_r+0x32>
 80054cc:	4621      	mov	r1, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 f82a 	bl	8005528 <__swsetup_r>
 80054d4:	b118      	cbz	r0, 80054de <__swbuf_r+0x32>
 80054d6:	f04f 37ff 	mov.w	r7, #4294967295
 80054da:	4638      	mov	r0, r7
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	1a98      	subs	r0, r3, r2
 80054e4:	6963      	ldr	r3, [r4, #20]
 80054e6:	b2f6      	uxtb	r6, r6
 80054e8:	4283      	cmp	r3, r0
 80054ea:	4637      	mov	r7, r6
 80054ec:	dc05      	bgt.n	80054fa <__swbuf_r+0x4e>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f7ff ffb3 	bl	800545c <_fflush_r>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1ed      	bne.n	80054d6 <__swbuf_r+0x2a>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	701e      	strb	r6, [r3, #0]
 8005508:	6962      	ldr	r2, [r4, #20]
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	429a      	cmp	r2, r3
 800550e:	d004      	beq.n	800551a <__swbuf_r+0x6e>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	07db      	lsls	r3, r3, #31
 8005514:	d5e1      	bpl.n	80054da <__swbuf_r+0x2e>
 8005516:	2e0a      	cmp	r6, #10
 8005518:	d1df      	bne.n	80054da <__swbuf_r+0x2e>
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f7ff ff9d 	bl	800545c <_fflush_r>
 8005522:	2800      	cmp	r0, #0
 8005524:	d0d9      	beq.n	80054da <__swbuf_r+0x2e>
 8005526:	e7d6      	b.n	80054d6 <__swbuf_r+0x2a>

08005528 <__swsetup_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <__swsetup_r+0xa8>)
 800552c:	4605      	mov	r5, r0
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	460c      	mov	r4, r1
 8005532:	b118      	cbz	r0, 800553c <__swsetup_r+0x14>
 8005534:	6a03      	ldr	r3, [r0, #32]
 8005536:	b90b      	cbnz	r3, 800553c <__swsetup_r+0x14>
 8005538:	f7ff fa3c 	bl	80049b4 <__sinit>
 800553c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005540:	0719      	lsls	r1, r3, #28
 8005542:	d422      	bmi.n	800558a <__swsetup_r+0x62>
 8005544:	06da      	lsls	r2, r3, #27
 8005546:	d407      	bmi.n	8005558 <__swsetup_r+0x30>
 8005548:	2209      	movs	r2, #9
 800554a:	602a      	str	r2, [r5, #0]
 800554c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	f04f 30ff 	mov.w	r0, #4294967295
 8005556:	e033      	b.n	80055c0 <__swsetup_r+0x98>
 8005558:	0758      	lsls	r0, r3, #29
 800555a:	d512      	bpl.n	8005582 <__swsetup_r+0x5a>
 800555c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800555e:	b141      	cbz	r1, 8005572 <__swsetup_r+0x4a>
 8005560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005564:	4299      	cmp	r1, r3
 8005566:	d002      	beq.n	800556e <__swsetup_r+0x46>
 8005568:	4628      	mov	r0, r5
 800556a:	f7ff fb2b 	bl	8004bc4 <_free_r>
 800556e:	2300      	movs	r3, #0
 8005570:	6363      	str	r3, [r4, #52]	@ 0x34
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	2300      	movs	r3, #0
 800557c:	6063      	str	r3, [r4, #4]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	b94b      	cbnz	r3, 80055a2 <__swsetup_r+0x7a>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	d003      	beq.n	80055a2 <__swsetup_r+0x7a>
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f000 f84f 	bl	8005640 <__smakebuf_r>
 80055a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a6:	f013 0201 	ands.w	r2, r3, #1
 80055aa:	d00a      	beq.n	80055c2 <__swsetup_r+0x9a>
 80055ac:	2200      	movs	r2, #0
 80055ae:	60a2      	str	r2, [r4, #8]
 80055b0:	6962      	ldr	r2, [r4, #20]
 80055b2:	4252      	negs	r2, r2
 80055b4:	61a2      	str	r2, [r4, #24]
 80055b6:	6922      	ldr	r2, [r4, #16]
 80055b8:	b942      	cbnz	r2, 80055cc <__swsetup_r+0xa4>
 80055ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055be:	d1c5      	bne.n	800554c <__swsetup_r+0x24>
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
 80055c2:	0799      	lsls	r1, r3, #30
 80055c4:	bf58      	it	pl
 80055c6:	6962      	ldrpl	r2, [r4, #20]
 80055c8:	60a2      	str	r2, [r4, #8]
 80055ca:	e7f4      	b.n	80055b6 <__swsetup_r+0x8e>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7f7      	b.n	80055c0 <__swsetup_r+0x98>
 80055d0:	20000018 	.word	0x20000018

080055d4 <_sbrk_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	@ (80055f0 <_sbrk_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb fa18 	bl	8000a14 <_sbrk>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_sbrk_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_sbrk_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	200002a4 	.word	0x200002a4

080055f4 <__swhatbuf_r>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	460c      	mov	r4, r1
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	2900      	cmp	r1, #0
 80055fe:	b096      	sub	sp, #88	@ 0x58
 8005600:	4615      	mov	r5, r2
 8005602:	461e      	mov	r6, r3
 8005604:	da0d      	bge.n	8005622 <__swhatbuf_r+0x2e>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	bf14      	ite	ne
 8005612:	2340      	movne	r3, #64	@ 0x40
 8005614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005618:	2000      	movs	r0, #0
 800561a:	6031      	str	r1, [r6, #0]
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	b016      	add	sp, #88	@ 0x58
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	466a      	mov	r2, sp
 8005624:	f000 f848 	bl	80056b8 <_fstat_r>
 8005628:	2800      	cmp	r0, #0
 800562a:	dbec      	blt.n	8005606 <__swhatbuf_r+0x12>
 800562c:	9901      	ldr	r1, [sp, #4]
 800562e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005636:	4259      	negs	r1, r3
 8005638:	4159      	adcs	r1, r3
 800563a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563e:	e7eb      	b.n	8005618 <__swhatbuf_r+0x24>

08005640 <__smakebuf_r>:
 8005640:	898b      	ldrh	r3, [r1, #12]
 8005642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005644:	079d      	lsls	r5, r3, #30
 8005646:	4606      	mov	r6, r0
 8005648:	460c      	mov	r4, r1
 800564a:	d507      	bpl.n	800565c <__smakebuf_r+0x1c>
 800564c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	2301      	movs	r3, #1
 8005656:	6163      	str	r3, [r4, #20]
 8005658:	b003      	add	sp, #12
 800565a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565c:	ab01      	add	r3, sp, #4
 800565e:	466a      	mov	r2, sp
 8005660:	f7ff ffc8 	bl	80055f4 <__swhatbuf_r>
 8005664:	9f00      	ldr	r7, [sp, #0]
 8005666:	4605      	mov	r5, r0
 8005668:	4639      	mov	r1, r7
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff fb16 	bl	8004c9c <_malloc_r>
 8005670:	b948      	cbnz	r0, 8005686 <__smakebuf_r+0x46>
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	059a      	lsls	r2, r3, #22
 8005678:	d4ee      	bmi.n	8005658 <__smakebuf_r+0x18>
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	e7e2      	b.n	800564c <__smakebuf_r+0xc>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	6020      	str	r0, [r4, #0]
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005696:	b15b      	cbz	r3, 80056b0 <__smakebuf_r+0x70>
 8005698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800569c:	4630      	mov	r0, r6
 800569e:	f000 f81d 	bl	80056dc <_isatty_r>
 80056a2:	b128      	cbz	r0, 80056b0 <__smakebuf_r+0x70>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	431d      	orrs	r5, r3
 80056b4:	81a5      	strh	r5, [r4, #12]
 80056b6:	e7cf      	b.n	8005658 <__smakebuf_r+0x18>

080056b8 <_fstat_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	@ (80056d8 <_fstat_r+0x20>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	f7fb f97c 	bl	80009c2 <_fstat>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d102      	bne.n	80056d4 <_fstat_r+0x1c>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b103      	cbz	r3, 80056d4 <_fstat_r+0x1c>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	200002a4 	.word	0x200002a4

080056dc <_isatty_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	@ (80056f8 <_isatty_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb f97b 	bl	80009e2 <_isatty>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_isatty_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_isatty_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	200002a4 	.word	0x200002a4

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
