
14_ST1089_IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007648  08007648  00008648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007870  08007870  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007870  08007870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007878  08007878  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007878  08007878  00008878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800787c  0800787c  0000887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007880  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000006c  080078ec  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080078ec  00009434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001305d  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d40  00000000  00000000  0001c0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001ee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286f1  00000000  00000000  00020cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c99  00000000  00000000  000493b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4833  00000000  00000000  0005f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015387f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  001538c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00158834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007630 	.word	0x08007630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007630 	.word	0x08007630

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_DMA_Init+0x38>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <MX_DMA_Init+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_DMA_Init+0x38>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2010      	movs	r0, #16
 8000584:	f001 fb07 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 fb20 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a08      	ldr	r2, [pc, #32]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <MX_GPIO_Init+0x44>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2bf9      	cmp	r3, #249	@ 0xf9
 80005f0:	d801      	bhi.n	80005f6 <calc_pulse+0x12>
		return PULSE_ERROR;
 80005f2:	2305      	movs	r3, #5
 80005f4:	e021      	b.n	800063a <calc_pulse+0x56>
	else if (time < 1200)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80005fc:	d201      	bcs.n	8000602 <calc_pulse+0x1e>
		return PULSE_SHORT;
 80005fe:	2304      	movs	r3, #4
 8000600:	e01b      	b.n	800063a <calc_pulse+0x56>
	else if (time < 2000)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000608:	d201      	bcs.n	800060e <calc_pulse+0x2a>
		return PULSE_LONG;
 800060a:	2303      	movs	r3, #3
 800060c:	e015      	b.n	800063a <calc_pulse+0x56>
	else if (time < 3000)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000614:	4293      	cmp	r3, r2
 8000616:	d801      	bhi.n	800061c <calc_pulse+0x38>
		return PULSE_2MS;
 8000618:	2302      	movs	r3, #2
 800061a:	e00e      	b.n	800063a <calc_pulse+0x56>
	else if (time < 6000)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000622:	4293      	cmp	r3, r2
 8000624:	d801      	bhi.n	800062a <calc_pulse+0x46>
		return PULSE_4MS;
 8000626:	2301      	movs	r3, #1
 8000628:	e007      	b.n	800063a <calc_pulse+0x56>
	else if (time < 12000)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000630:	4293      	cmp	r3, r2
 8000632:	d801      	bhi.n	8000638 <calc_pulse+0x54>
		return PULSE_9MS;
 8000634:	2300      	movs	r3, #0
 8000636:	e000      	b.n	800063a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000638:	2305      	movs	r3, #5
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <ir_tim_interrupt>:

void ir_tim_interrupt(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

	pulse_t pulse;

	if (received_bits >= 32)
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b1f      	cmp	r3, #31
 8000654:	dc3f      	bgt.n	80006d6 <ir_tim_interrupt+0x8e>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8000656:	2100      	movs	r1, #0
 8000658:	4823      	ldr	r0, [pc, #140]	@ (80006e8 <ir_tim_interrupt+0xa0>)
 800065a:	f004 fa67 	bl	8004b2c <HAL_TIM_ReadCapturedValue>
 800065e:	4603      	mov	r3, r0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffbf 	bl	80005e4 <calc_pulse>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	switch(pulse) {
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b03      	cmp	r3, #3
 8000670:	d82d      	bhi.n	80006ce <ir_tim_interrupt+0x86>
 8000672:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <ir_tim_interrupt+0x30>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006b9 	.word	0x080006b9
 800067c:	080006c7 	.word	0x080006c7
 8000680:	0800069f 	.word	0x0800069f
 8000684:	08000689 	.word	0x08000689
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <ir_tim_interrupt+0xa4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	085b      	lsrs	r3, r3, #1
 800068e:	4a17      	ldr	r2, [pc, #92]	@ (80006ec <ir_tim_interrupt+0xa4>)
 8000690:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 800069a:	6013      	str	r3, [r2, #0]
		break;
 800069c:	e01e      	b.n	80006dc <ir_tim_interrupt+0x94>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800069e:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <ir_tim_interrupt+0xa4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006a8:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <ir_tim_interrupt+0xa4>)
 80006aa:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 80006b4:	6013      	str	r3, [r2, #0]
		break;
 80006b6:	e011      	b.n	80006dc <ir_tim_interrupt+0x94>
	case PULSE_4MS:
		received_value = 0;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <ir_tim_interrupt+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		break;
 80006c4:	e00a      	b.n	80006dc <ir_tim_interrupt+0x94>
	case PULSE_2MS:
		if(received_bits == 0)
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d005      	beq.n	80006da <ir_tim_interrupt+0x92>
			//received_bits = 32;
		break;
	default:
		received_bits = 0;
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <ir_tim_interrupt+0x9c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
		break;
 80006d4:	e002      	b.n	80006dc <ir_tim_interrupt+0x94>
		return;
 80006d6:	bf00      	nop
 80006d8:	e000      	b.n	80006dc <ir_tim_interrupt+0x94>
		break;
 80006da:	bf00      	nop
	}

}
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	200000a8 	.word	0x200000a8
 80006ec:	20000088 	.word	0x20000088

080006f0 <ir_init>:

void ir_init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

	 HAL_TIM_Base_Start(&htim2);
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <ir_init+0x18>)
 80006f6:	f003 f9bf 	bl	8003a78 <HAL_TIM_Base_Start>
	 HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <ir_init+0x18>)
 80006fe:	f003 fd07 	bl	8004110 <HAL_TIM_IC_Start_IT>

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000a8 	.word	0x200000a8

0800070c <ir_read>:

int ir_read(void) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

	if(received_bits != 32)
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <ir_read+0x30>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b20      	cmp	r3, #32
 8000718:	d002      	beq.n	8000720 <ir_read+0x14>
		return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e007      	b.n	8000730 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <ir_read+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	0c1b      	lsrs	r3, r3, #16
 8000726:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <ir_read+0x30>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	return value;
 800072e:	79fb      	ldrb	r3, [r7, #7]

}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	2000008c 	.word	0x2000008c
 8000740:	20000088 	.word	0x20000088

08000744 <set_led_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static short set_led_mode(short led_mode) {
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]

	led_mode++;
 800074e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000752:	b29b      	uxth	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	80fb      	strh	r3, [r7, #6]

	if(led_mode == LAST_MODE)
 800075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d101      	bne.n	8000766 <set_led_mode+0x22>
	  led_mode = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	80fb      	strh	r3, [r7, #6]

	return led_mode;
 8000766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <led_on>:

static void led_on(short led, short mode, short brightness) {
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	80fb      	strh	r3, [r7, #6]
 8000780:	460b      	mov	r3, r1
 8000782:	80bb      	strh	r3, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	807b      	strh	r3, [r7, #2]

	if(mode == 1) {
 8000788:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10a      	bne.n	80007a6 <led_on+0x30>

		ws2812b_set_color(led, brightness, 0, 0);
 8000790:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	b2d9      	uxtb	r1, r3
 8000798:	2300      	movs	r3, #0
 800079a:	2200      	movs	r2, #0
 800079c:	f001 f84c 	bl	8001838 <ws2812b_set_color>
		ws2812b_update();
 80007a0:	f001 f836 	bl	8001810 <ws2812b_update>
		ws2812b_set_color(led, 0, 0, 0);
		ws2812b_update();

	}

}
 80007a4:	e026      	b.n	80007f4 <led_on+0x7e>
	else if(mode == 2) {
 80007a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d10a      	bne.n	80007c4 <led_on+0x4e>
		ws2812b_set_color(led, 0, brightness, 0);
 80007ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007b2:	887b      	ldrh	r3, [r7, #2]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	f001 f83d 	bl	8001838 <ws2812b_set_color>
		ws2812b_update();
 80007be:	f001 f827 	bl	8001810 <ws2812b_update>
}
 80007c2:	e017      	b.n	80007f4 <led_on+0x7e>
	else if(mode == 3) {
 80007c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d10a      	bne.n	80007e2 <led_on+0x6c>
		ws2812b_set_color(led, 0, 0, brightness);
 80007cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	f001 f82e 	bl	8001838 <ws2812b_set_color>
		ws2812b_update();
 80007dc:	f001 f818 	bl	8001810 <ws2812b_update>
}
 80007e0:	e008      	b.n	80007f4 <led_on+0x7e>
		ws2812b_set_color(led, 0, 0, 0);
 80007e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007e6:	2300      	movs	r3, #0
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	f001 f824 	bl	8001838 <ws2812b_set_color>
		ws2812b_update();
 80007f0:	f001 f80e 	bl	8001810 <ws2812b_update>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <__io_putchar>:

int __io_putchar(int ch) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  if (ch == '\n') {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b0a      	cmp	r3, #10
 8000808:	d102      	bne.n	8000810 <__io_putchar+0x14>

    __io_putchar('\r');
 800080a:	200d      	movs	r0, #13
 800080c:	f7ff fff6 	bl	80007fc <__io_putchar>

  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	2201      	movs	r2, #1
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <__io_putchar+0x2c>)
 800081a:	f005 f9cd 	bl	8005bb8 <HAL_UART_Transmit>

  return 1;
 800081e:	2301      	movs	r3, #1

}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000188 	.word	0x20000188

0800082c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  if (htim == &htim2) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d109      	bne.n	8000850 <HAL_TIM_IC_CaptureCallback+0x24>

    switch (HAL_TIM_GetActiveChannel(&htim2)) {
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800083e:	f004 f9f5 	bl	8004c2c <HAL_TIM_GetActiveChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d102      	bne.n	800084e <HAL_TIM_IC_CaptureCallback+0x22>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  ir_tim_interrupt();
 8000848:	f7ff fefe 	bl	8000648 <ir_tim_interrupt>
        break;
 800084c:	e000      	b.n	8000850 <HAL_TIM_IC_CaptureCallback+0x24>
      default:
        break;
 800084e:	bf00      	nop
    }

  }

}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000a8 	.word	0x200000a8

0800085c <control_ws2812b>:

void control_ws2812b(int button_code) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	  switch (button_code) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b07      	subs	r3, #7
 8000868:	2b57      	cmp	r3, #87	@ 0x57
 800086a:	f200 8241 	bhi.w	8000cf0 <control_ws2812b+0x494>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <control_ws2812b+0x18>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000cbd 	.word	0x08000cbd
 8000878:	08000a53 	.word	0x08000a53
 800087c:	08000c97 	.word	0x08000c97
 8000880:	08000cf1 	.word	0x08000cf1
 8000884:	08000cf1 	.word	0x08000cf1
 8000888:	080009d5 	.word	0x080009d5
 800088c:	08000cf1 	.word	0x08000cf1
 8000890:	08000cf1 	.word	0x08000cf1
 8000894:	08000cf1 	.word	0x08000cf1
 8000898:	08000cf1 	.word	0x08000cf1
 800089c:	08000cf1 	.word	0x08000cf1
 80008a0:	08000cf1 	.word	0x08000cf1
 80008a4:	08000cf1 	.word	0x08000cf1
 80008a8:	08000cf1 	.word	0x08000cf1
 80008ac:	08000afb 	.word	0x08000afb
 80008b0:	08000cf1 	.word	0x08000cf1
 80008b4:	08000cf1 	.word	0x08000cf1
 80008b8:	080009ff 	.word	0x080009ff
 80008bc:	08000be9 	.word	0x08000be9
 80008c0:	08000cf1 	.word	0x08000cf1
 80008c4:	08000cf1 	.word	0x08000cf1
 80008c8:	08000a7d 	.word	0x08000a7d
 80008cc:	08000cf1 	.word	0x08000cf1
 80008d0:	08000cf1 	.word	0x08000cf1
 80008d4:	08000cf1 	.word	0x08000cf1
 80008d8:	08000cf1 	.word	0x08000cf1
 80008dc:	08000cf1 	.word	0x08000cf1
 80008e0:	08000cf1 	.word	0x08000cf1
 80008e4:	08000cf1 	.word	0x08000cf1
 80008e8:	08000cf1 	.word	0x08000cf1
 80008ec:	08000cf1 	.word	0x08000cf1
 80008f0:	08000cf1 	.word	0x08000cf1
 80008f4:	08000cf1 	.word	0x08000cf1
 80008f8:	08000cf1 	.word	0x08000cf1
 80008fc:	08000cf1 	.word	0x08000cf1
 8000900:	08000cf1 	.word	0x08000cf1
 8000904:	08000cf1 	.word	0x08000cf1
 8000908:	08000cf1 	.word	0x08000cf1
 800090c:	08000cf1 	.word	0x08000cf1
 8000910:	08000cf1 	.word	0x08000cf1
 8000914:	08000cf1 	.word	0x08000cf1
 8000918:	08000cf1 	.word	0x08000cf1
 800091c:	08000cf1 	.word	0x08000cf1
 8000920:	08000cf1 	.word	0x08000cf1
 8000924:	08000cf1 	.word	0x08000cf1
 8000928:	08000cf1 	.word	0x08000cf1
 800092c:	08000cf1 	.word	0x08000cf1
 8000930:	08000cf1 	.word	0x08000cf1
 8000934:	08000cf1 	.word	0x08000cf1
 8000938:	08000cf1 	.word	0x08000cf1
 800093c:	08000cf1 	.word	0x08000cf1
 8000940:	08000cf1 	.word	0x08000cf1
 8000944:	08000cf1 	.word	0x08000cf1
 8000948:	08000cf1 	.word	0x08000cf1
 800094c:	08000cf1 	.word	0x08000cf1
 8000950:	08000cf1 	.word	0x08000cf1
 8000954:	08000cf1 	.word	0x08000cf1
 8000958:	08000b43 	.word	0x08000b43
 800095c:	08000cf1 	.word	0x08000cf1
 8000960:	08000ad1 	.word	0x08000ad1
 8000964:	08000cf1 	.word	0x08000cf1
 8000968:	08000cf1 	.word	0x08000cf1
 800096c:	08000b19 	.word	0x08000b19
 8000970:	08000cf1 	.word	0x08000cf1
 8000974:	08000cf1 	.word	0x08000cf1
 8000978:	08000cf1 	.word	0x08000cf1
 800097c:	08000cf1 	.word	0x08000cf1
 8000980:	08000cf1 	.word	0x08000cf1
 8000984:	08000cf1 	.word	0x08000cf1
 8000988:	08000cf1 	.word	0x08000cf1
 800098c:	08000cf1 	.word	0x08000cf1
 8000990:	08000cf1 	.word	0x08000cf1
 8000994:	08000cf1 	.word	0x08000cf1
 8000998:	08000cf1 	.word	0x08000cf1
 800099c:	08000cf1 	.word	0x08000cf1
 80009a0:	08000cf1 	.word	0x08000cf1
 80009a4:	08000cf1 	.word	0x08000cf1
 80009a8:	08000cf1 	.word	0x08000cf1
 80009ac:	08000cf1 	.word	0x08000cf1
 80009b0:	08000cf1 	.word	0x08000cf1
 80009b4:	08000cf1 	.word	0x08000cf1
 80009b8:	08000cf1 	.word	0x08000cf1
 80009bc:	08000cf1 	.word	0x08000cf1
 80009c0:	08000aa7 	.word	0x08000aa7
 80009c4:	08000cf1 	.word	0x08000cf1
 80009c8:	08000cf1 	.word	0x08000cf1
 80009cc:	08000cf1 	.word	0x08000cf1
 80009d0:	08000a29 	.word	0x08000a29
	  case IR_CODE_1:
		led_modes[LED_1] = set_led_mode(led_modes[LED_1]);
 80009d4:	4ba2      	ldr	r3, [pc, #648]	@ (8000c60 <control_ws2812b+0x404>)
 80009d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff feb2 	bl	8000744 <set_led_mode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b9e      	ldr	r3, [pc, #632]	@ (8000c60 <control_ws2812b+0x404>)
 80009e6:	801a      	strh	r2, [r3, #0]
		led_on(LED_1, led_modes[LED_1], brightness);
 80009e8:	4b9d      	ldr	r3, [pc, #628]	@ (8000c60 <control_ws2812b+0x404>)
 80009ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ee:	4a9d      	ldr	r2, [pc, #628]	@ (8000c64 <control_ws2812b+0x408>)
 80009f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff febd 	bl	8000776 <led_on>
		break;
 80009fc:	e178      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_2:
		led_modes[LED_2] = set_led_mode(led_modes[LED_2]);
 80009fe:	4b98      	ldr	r3, [pc, #608]	@ (8000c60 <control_ws2812b+0x404>)
 8000a00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe9d 	bl	8000744 <set_led_mode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b94      	ldr	r3, [pc, #592]	@ (8000c60 <control_ws2812b+0x404>)
 8000a10:	805a      	strh	r2, [r3, #2]
		led_on(LED_2, led_modes[LED_2], brightness);
 8000a12:	4b93      	ldr	r3, [pc, #588]	@ (8000c60 <control_ws2812b+0x404>)
 8000a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a18:	4a92      	ldr	r2, [pc, #584]	@ (8000c64 <control_ws2812b+0x408>)
 8000a1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fea8 	bl	8000776 <led_on>
		break;
 8000a26:	e163      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_3:
		led_modes[LED_3] = set_led_mode(led_modes[LED_3]);
 8000a28:	4b8d      	ldr	r3, [pc, #564]	@ (8000c60 <control_ws2812b+0x404>)
 8000a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe88 	bl	8000744 <set_led_mode>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b89      	ldr	r3, [pc, #548]	@ (8000c60 <control_ws2812b+0x404>)
 8000a3a:	809a      	strh	r2, [r3, #4]
		led_on(LED_3, led_modes[LED_3], brightness);
 8000a3c:	4b88      	ldr	r3, [pc, #544]	@ (8000c60 <control_ws2812b+0x404>)
 8000a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a42:	4a88      	ldr	r2, [pc, #544]	@ (8000c64 <control_ws2812b+0x408>)
 8000a44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f7ff fe93 	bl	8000776 <led_on>
	    break;
 8000a50:	e14e      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_4:
		led_modes[LED_4] = set_led_mode(led_modes[LED_4]);
 8000a52:	4b83      	ldr	r3, [pc, #524]	@ (8000c60 <control_ws2812b+0x404>)
 8000a54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe73 	bl	8000744 <set_led_mode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b7f      	ldr	r3, [pc, #508]	@ (8000c60 <control_ws2812b+0x404>)
 8000a64:	80da      	strh	r2, [r3, #6]
		led_on(LED_4, led_modes[LED_4], brightness);
 8000a66:	4b7e      	ldr	r3, [pc, #504]	@ (8000c60 <control_ws2812b+0x404>)
 8000a68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a6c:	4a7d      	ldr	r2, [pc, #500]	@ (8000c64 <control_ws2812b+0x408>)
 8000a6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a72:	4619      	mov	r1, r3
 8000a74:	2003      	movs	r0, #3
 8000a76:	f7ff fe7e 	bl	8000776 <led_on>
	    break;
 8000a7a:	e139      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_5:
		led_modes[LED_5] = set_led_mode(led_modes[LED_5]);
 8000a7c:	4b78      	ldr	r3, [pc, #480]	@ (8000c60 <control_ws2812b+0x404>)
 8000a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe5e 	bl	8000744 <set_led_mode>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b74      	ldr	r3, [pc, #464]	@ (8000c60 <control_ws2812b+0x404>)
 8000a8e:	811a      	strh	r2, [r3, #8]
		led_on(LED_5, led_modes[LED_5], brightness);
 8000a90:	4b73      	ldr	r3, [pc, #460]	@ (8000c60 <control_ws2812b+0x404>)
 8000a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a96:	4a73      	ldr	r2, [pc, #460]	@ (8000c64 <control_ws2812b+0x408>)
 8000a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	2004      	movs	r0, #4
 8000aa0:	f7ff fe69 	bl	8000776 <led_on>
	    break;
 8000aa4:	e124      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_6:
		led_modes[LED_6] = set_led_mode(led_modes[LED_6]);
 8000aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8000c60 <control_ws2812b+0x404>)
 8000aa8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe49 	bl	8000744 <set_led_mode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c60 <control_ws2812b+0x404>)
 8000ab8:	815a      	strh	r2, [r3, #10]
		led_on(LED_6, led_modes[LED_6], brightness);
 8000aba:	4b69      	ldr	r3, [pc, #420]	@ (8000c60 <control_ws2812b+0x404>)
 8000abc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ac0:	4a68      	ldr	r2, [pc, #416]	@ (8000c64 <control_ws2812b+0x408>)
 8000ac2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2005      	movs	r0, #5
 8000aca:	f7ff fe54 	bl	8000776 <led_on>
	    break;
 8000ace:	e10f      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_7:
		led_modes[LED_7] = set_led_mode(led_modes[LED_7]);
 8000ad0:	4b63      	ldr	r3, [pc, #396]	@ (8000c60 <control_ws2812b+0x404>)
 8000ad2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fe34 	bl	8000744 <set_led_mode>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c60 <control_ws2812b+0x404>)
 8000ae2:	819a      	strh	r2, [r3, #12]
		led_on(LED_7, led_modes[LED_7], brightness);
 8000ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c60 <control_ws2812b+0x404>)
 8000ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000aea:	4a5e      	ldr	r2, [pc, #376]	@ (8000c64 <control_ws2812b+0x408>)
 8000aec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2006      	movs	r0, #6
 8000af4:	f7ff fe3f 	bl	8000776 <led_on>
	    break;
 8000af8:	e0fa      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_PLAY:
		if(!is_button_play_pressed)
 8000afa:	4b5b      	ldr	r3, [pc, #364]	@ (8000c68 <control_ws2812b+0x40c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <control_ws2812b+0x2b4>
		  is_button_play_pressed = true;
 8000b08:	4b57      	ldr	r3, [pc, #348]	@ (8000c68 <control_ws2812b+0x40c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		else
		  is_button_play_pressed = false;
		break;
 8000b0e:	e0ef      	b.n	8000cf0 <control_ws2812b+0x494>
		  is_button_play_pressed = false;
 8000b10:	4b55      	ldr	r3, [pc, #340]	@ (8000c68 <control_ws2812b+0x40c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		break;
 8000b16:	e0eb      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_ONOFF:
		is_button_play_pressed = false;
 8000b18:	4b53      	ldr	r3, [pc, #332]	@ (8000c68 <control_ws2812b+0x40c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		for(int led = 0; led < 7; led++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e00a      	b.n	8000b3a <control_ws2812b+0x2de>
		  ws2812b_set_color(led, 0, 0, 0);
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f000 fe84 	bl	8001838 <ws2812b_set_color>
		  ws2812b_update();
 8000b30:	f000 fe6e 	bl	8001810 <ws2812b_update>
		for(int led = 0; led < 7; led++) {
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b06      	cmp	r3, #6
 8000b3e:	ddf1      	ble.n	8000b24 <control_ws2812b+0x2c8>
		}
		break;
 8000b40:	e0d6      	b.n	8000cf0 <control_ws2812b+0x494>
	  case IR_CODE_PLUS:
		if(brightness >= 0 && brightness < 1)
 8000b42:	4b48      	ldr	r3, [pc, #288]	@ (8000c64 <control_ws2812b+0x408>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0e      	blt.n	8000b6a <control_ws2812b+0x30e>
 8000b4c:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <control_ws2812b+0x408>)
 8000b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dc09      	bgt.n	8000b6a <control_ws2812b+0x30e>
			brightness += 1;
 8000b56:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <control_ws2812b+0x408>)
 8000b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <control_ws2812b+0x408>)
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	e03d      	b.n	8000be6 <control_ws2812b+0x38a>
		else if(brightness >= 1 && brightness < 10)
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <control_ws2812b+0x408>)
 8000b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dd0e      	ble.n	8000b92 <control_ws2812b+0x336>
 8000b74:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <control_ws2812b+0x408>)
 8000b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7a:	2b09      	cmp	r3, #9
 8000b7c:	dc09      	bgt.n	8000b92 <control_ws2812b+0x336>
		  brightness += 9;
 8000b7e:	4b39      	ldr	r3, [pc, #228]	@ (8000c64 <control_ws2812b+0x408>)
 8000b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3309      	adds	r3, #9
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <control_ws2812b+0x408>)
 8000b8e:	801a      	strh	r2, [r3, #0]
 8000b90:	e029      	b.n	8000be6 <control_ws2812b+0x38a>
		else if(brightness >= 10 && brightness < 90)
 8000b92:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <control_ws2812b+0x408>)
 8000b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	dd0e      	ble.n	8000bba <control_ws2812b+0x35e>
 8000b9c:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <control_ws2812b+0x408>)
 8000b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba2:	2b59      	cmp	r3, #89	@ 0x59
 8000ba4:	dc09      	bgt.n	8000bba <control_ws2812b+0x35e>
		  brightness += 80;
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c64 <control_ws2812b+0x408>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3350      	adds	r3, #80	@ 0x50
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c64 <control_ws2812b+0x408>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	e015      	b.n	8000be6 <control_ws2812b+0x38a>
		else if(brightness >= 90 && brightness < 250)
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <control_ws2812b+0x408>)
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	2b59      	cmp	r3, #89	@ 0x59
 8000bc2:	f340 808e 	ble.w	8000ce2 <control_ws2812b+0x486>
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <control_ws2812b+0x408>)
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	2bf9      	cmp	r3, #249	@ 0xf9
 8000bce:	f300 8088 	bgt.w	8000ce2 <control_ws2812b+0x486>
		  brightness += 160;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <control_ws2812b+0x408>)
 8000bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	33a0      	adds	r3, #160	@ 0xa0
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <control_ws2812b+0x408>)
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e07d      	b.n	8000ce2 <control_ws2812b+0x486>
 8000be6:	e07c      	b.n	8000ce2 <control_ws2812b+0x486>
	  case IR_CODE_MINUS:
		if(brightness > 0 && brightness <= 1)
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <control_ws2812b+0x408>)
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd0e      	ble.n	8000c10 <control_ws2812b+0x3b4>
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <control_ws2812b+0x408>)
 8000bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	dc09      	bgt.n	8000c10 <control_ws2812b+0x3b4>
		  brightness -= 1;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <control_ws2812b+0x408>)
 8000bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <control_ws2812b+0x408>)
 8000c0c:	801a      	strh	r2, [r3, #0]
 8000c0e:	e041      	b.n	8000c94 <control_ws2812b+0x438>
		else if(brightness > 1 && brightness <= 10)
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <control_ws2812b+0x408>)
 8000c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	dd0e      	ble.n	8000c38 <control_ws2812b+0x3dc>
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <control_ws2812b+0x408>)
 8000c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c20:	2b0a      	cmp	r3, #10
 8000c22:	dc09      	bgt.n	8000c38 <control_ws2812b+0x3dc>
		  brightness -= 9;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <control_ws2812b+0x408>)
 8000c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b09      	subs	r3, #9
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <control_ws2812b+0x408>)
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	e02d      	b.n	8000c94 <control_ws2812b+0x438>
		else if(brightness > 10 && brightness <= 90)
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <control_ws2812b+0x408>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	dd14      	ble.n	8000c6c <control_ws2812b+0x410>
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <control_ws2812b+0x408>)
 8000c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c48:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c4a:	dc0f      	bgt.n	8000c6c <control_ws2812b+0x410>
		  brightness -= 80;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <control_ws2812b+0x408>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3b50      	subs	r3, #80	@ 0x50
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b02      	ldr	r3, [pc, #8]	@ (8000c64 <control_ws2812b+0x408>)
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	e019      	b.n	8000c94 <control_ws2812b+0x438>
 8000c60:	20000094 	.word	0x20000094
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000090 	.word	0x20000090
		else if(brightness > 110 && brightness <= 250)
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <control_ws2812b+0x49c>)
 8000c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c72:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c74:	dd37      	ble.n	8000ce6 <control_ws2812b+0x48a>
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <control_ws2812b+0x49c>)
 8000c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7c:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c7e:	dc32      	bgt.n	8000ce6 <control_ws2812b+0x48a>
		  brightness -= 160;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <control_ws2812b+0x49c>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3ba0      	subs	r3, #160	@ 0xa0
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <control_ws2812b+0x49c>)
 8000c90:	801a      	strh	r2, [r3, #0]
		break;
 8000c92:	e028      	b.n	8000ce6 <control_ws2812b+0x48a>
 8000c94:	e027      	b.n	8000ce6 <control_ws2812b+0x48a>
	  case IR_CODE_FORWARD:
		if(is_button_play_pressed)
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <control_ws2812b+0x4a0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d025      	beq.n	8000cea <control_ws2812b+0x48e>
		  if(led_animation_mode < 2)
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	dc20      	bgt.n	8000cea <control_ws2812b+0x48e>
			led_animation_mode += 1;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000cb8:	801a      	strh	r2, [r3, #0]
		break;
 8000cba:	e016      	b.n	8000cea <control_ws2812b+0x48e>
	  case IR_CODE_REWIND:
		if(is_button_play_pressed)
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <control_ws2812b+0x4a0>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d014      	beq.n	8000cee <control_ws2812b+0x492>
		  if(led_animation_mode > 0)
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	dd0f      	ble.n	8000cee <control_ws2812b+0x492>
			led_animation_mode -= 1;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <control_ws2812b+0x4a4>)
 8000cde:	801a      	strh	r2, [r3, #0]
		break;
 8000ce0:	e005      	b.n	8000cee <control_ws2812b+0x492>
		break;
 8000ce2:	bf00      	nop
 8000ce4:	e004      	b.n	8000cf0 <control_ws2812b+0x494>
		break;
 8000ce6:	bf00      	nop
 8000ce8:	e002      	b.n	8000cf0 <control_ws2812b+0x494>
		break;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <control_ws2812b+0x494>
		break;
 8000cee:	bf00      	nop
	  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	200000a2 	.word	0x200000a2

08000d04 <led_animation>:

void led_animation() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

	if(is_button_play_pressed) {
 8000d0a:	4b82      	ldr	r3, [pc, #520]	@ (8000f14 <led_animation+0x210>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80fb 	beq.w	8000f0a <led_animation+0x206>

		uint32_t delay_time;

		if(led_animation_mode == 0) {
 8000d14:	4b80      	ldr	r3, [pc, #512]	@ (8000f18 <led_animation+0x214>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d13d      	bne.n	8000d9a <led_animation+0x96>


			uint8_t r = gamma8[rand() % 256];
 8000d1e:	f005 fca9 	bl	8006674 <rand>
 8000d22:	4603      	mov	r3, r0
 8000d24:	425a      	negs	r2, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	bf58      	it	pl
 8000d2c:	4253      	negpl	r3, r2
 8000d2e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f1c <led_animation+0x218>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	70bb      	strb	r3, [r7, #2]
			uint8_t g = gamma8[rand() % 256];
 8000d34:	f005 fc9e 	bl	8006674 <rand>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	425a      	negs	r2, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	bf58      	it	pl
 8000d42:	4253      	negpl	r3, r2
 8000d44:	4a75      	ldr	r2, [pc, #468]	@ (8000f1c <led_animation+0x218>)
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	707b      	strb	r3, [r7, #1]
			uint8_t b = gamma8[rand() % 256];
 8000d4a:	f005 fc93 	bl	8006674 <rand>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	425a      	negs	r2, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	bf58      	it	pl
 8000d58:	4253      	negpl	r3, r2
 8000d5a:	4a70      	ldr	r2, [pc, #448]	@ (8000f1c <led_animation+0x218>)
 8000d5c:	5cd3      	ldrb	r3, [r2, r3]
 8000d5e:	703b      	strb	r3, [r7, #0]

			for(int led = 0; led < 7; led++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	e015      	b.n	8000d92 <led_animation+0x8e>

				delay_time = HAL_GetTick();
 8000d66:	f000 fe2f 	bl	80019c8 <HAL_GetTick>
 8000d6a:	60f8      	str	r0, [r7, #12]
				ws2812b_set_color(led, r, g, b);
 8000d6c:	69f8      	ldr	r0, [r7, #28]
 8000d6e:	783b      	ldrb	r3, [r7, #0]
 8000d70:	787a      	ldrb	r2, [r7, #1]
 8000d72:	78b9      	ldrb	r1, [r7, #2]
 8000d74:	f000 fd60 	bl	8001838 <ws2812b_set_color>
				ws2812b_update();
 8000d78:	f000 fd4a 	bl	8001810 <ws2812b_update>
				//HAL_Delay(100);
				while(HAL_GetTick() - delay_time <= 100){}
 8000d7c:	bf00      	nop
 8000d7e:	f000 fe23 	bl	80019c8 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	@ 0x64
 8000d8a:	d9f8      	bls.n	8000d7e <led_animation+0x7a>
			for(int led = 0; led < 7; led++) {
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	dde6      	ble.n	8000d66 <led_animation+0x62>
		}

	}


}
 8000d98:	e0b7      	b.n	8000f0a <led_animation+0x206>
		else if(led_animation_mode == 1) {
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <led_animation+0x214>)
 8000d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d13d      	bne.n	8000e20 <led_animation+0x11c>
			for(int led = 0; led < 7; led++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	e036      	b.n	8000e18 <led_animation+0x114>
				delay_time = HAL_GetTick();
 8000daa:	f000 fe0d 	bl	80019c8 <HAL_GetTick>
 8000dae:	60f8      	str	r0, [r7, #12]
				uint8_t r = gamma8[rand() % 256];
 8000db0:	f005 fc60 	bl	8006674 <rand>
 8000db4:	4603      	mov	r3, r0
 8000db6:	425a      	negs	r2, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	bf58      	it	pl
 8000dbe:	4253      	negpl	r3, r2
 8000dc0:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <led_animation+0x218>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	717b      	strb	r3, [r7, #5]
				uint8_t g = gamma8[rand() % 256];
 8000dc6:	f005 fc55 	bl	8006674 <rand>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	425a      	negs	r2, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	bf58      	it	pl
 8000dd4:	4253      	negpl	r3, r2
 8000dd6:	4a51      	ldr	r2, [pc, #324]	@ (8000f1c <led_animation+0x218>)
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	713b      	strb	r3, [r7, #4]
				uint8_t b = gamma8[rand() % 256];
 8000ddc:	f005 fc4a 	bl	8006674 <rand>
 8000de0:	4603      	mov	r3, r0
 8000de2:	425a      	negs	r2, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	bf58      	it	pl
 8000dea:	4253      	negpl	r3, r2
 8000dec:	4a4b      	ldr	r2, [pc, #300]	@ (8000f1c <led_animation+0x218>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	70fb      	strb	r3, [r7, #3]
				ws2812b_set_color(led, r, g, b);
 8000df2:	69b8      	ldr	r0, [r7, #24]
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	793a      	ldrb	r2, [r7, #4]
 8000df8:	7979      	ldrb	r1, [r7, #5]
 8000dfa:	f000 fd1d 	bl	8001838 <ws2812b_set_color>
				ws2812b_update();
 8000dfe:	f000 fd07 	bl	8001810 <ws2812b_update>
				while(HAL_GetTick() - delay_time < 100){}
 8000e02:	bf00      	nop
 8000e04:	f000 fde0 	bl	80019c8 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b63      	cmp	r3, #99	@ 0x63
 8000e10:	d9f8      	bls.n	8000e04 <led_animation+0x100>
			for(int led = 0; led < 7; led++) {
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	ddc5      	ble.n	8000daa <led_animation+0xa6>
}
 8000e1e:	e074      	b.n	8000f0a <led_animation+0x206>
		else if(led_animation_mode == 2) {
 8000e20:	4b3d      	ldr	r3, [pc, #244]	@ (8000f18 <led_animation+0x214>)
 8000e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d16f      	bne.n	8000f0a <led_animation+0x206>
			uint8_t last_led = 6;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	74fb      	strb	r3, [r7, #19]
			for(int led = 0; led < 7; led++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e067      	b.n	8000f04 <led_animation+0x200>
				delay_time = HAL_GetTick();
 8000e34:	f000 fdc8 	bl	80019c8 <HAL_GetTick>
 8000e38:	60f8      	str	r0, [r7, #12]
				r1 = gamma8[rand() % 256];
 8000e3a:	f005 fc1b 	bl	8006674 <rand>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	425a      	negs	r2, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	bf58      	it	pl
 8000e48:	4253      	negpl	r3, r2
 8000e4a:	4a34      	ldr	r2, [pc, #208]	@ (8000f1c <led_animation+0x218>)
 8000e4c:	5cd3      	ldrb	r3, [r2, r3]
 8000e4e:	72fb      	strb	r3, [r7, #11]
				g1 = gamma8[rand() % 256];
 8000e50:	f005 fc10 	bl	8006674 <rand>
 8000e54:	4603      	mov	r3, r0
 8000e56:	425a      	negs	r2, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	bf58      	it	pl
 8000e5e:	4253      	negpl	r3, r2
 8000e60:	4a2e      	ldr	r2, [pc, #184]	@ (8000f1c <led_animation+0x218>)
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	72bb      	strb	r3, [r7, #10]
				b1 = gamma8[rand() % 256];
 8000e66:	f005 fc05 	bl	8006674 <rand>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	425a      	negs	r2, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	bf58      	it	pl
 8000e74:	4253      	negpl	r3, r2
 8000e76:	4a29      	ldr	r2, [pc, #164]	@ (8000f1c <led_animation+0x218>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	727b      	strb	r3, [r7, #9]
				r2 = gamma8[rand() % 256];
 8000e7c:	f005 fbfa 	bl	8006674 <rand>
 8000e80:	4603      	mov	r3, r0
 8000e82:	425a      	negs	r2, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	bf58      	it	pl
 8000e8a:	4253      	negpl	r3, r2
 8000e8c:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <led_animation+0x218>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	723b      	strb	r3, [r7, #8]
				g2 = gamma8[rand() % 256];
 8000e92:	f005 fbef 	bl	8006674 <rand>
 8000e96:	4603      	mov	r3, r0
 8000e98:	425a      	negs	r2, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	bf58      	it	pl
 8000ea0:	4253      	negpl	r3, r2
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <led_animation+0x218>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	71fb      	strb	r3, [r7, #7]
				b2 = gamma8[rand() % 256];
 8000ea8:	f005 fbe4 	bl	8006674 <rand>
 8000eac:	4603      	mov	r3, r0
 8000eae:	425a      	negs	r2, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	bf58      	it	pl
 8000eb6:	4253      	negpl	r3, r2
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <led_animation+0x218>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	71bb      	strb	r3, [r7, #6]
				ws2812b_set_color(led, r1, g1, b1);
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	7a7b      	ldrb	r3, [r7, #9]
 8000ec2:	7aba      	ldrb	r2, [r7, #10]
 8000ec4:	7af9      	ldrb	r1, [r7, #11]
 8000ec6:	f000 fcb7 	bl	8001838 <ws2812b_set_color>
				ws2812b_update();
 8000eca:	f000 fca1 	bl	8001810 <ws2812b_update>
				while(HAL_GetTick() - delay_time < 150){}
 8000ece:	bf00      	nop
 8000ed0:	f000 fd7a 	bl	80019c8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b95      	cmp	r3, #149	@ 0x95
 8000edc:	d9f8      	bls.n	8000ed0 <led_animation+0x1cc>
				ws2812b_set_color(led, 0, 0, 0);
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f000 fca7 	bl	8001838 <ws2812b_set_color>
				ws2812b_update();
 8000eea:	f000 fc91 	bl	8001810 <ws2812b_update>
				ws2812b_set_color(last_led, r2, g2, b2);
 8000eee:	7cf8      	ldrb	r0, [r7, #19]
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	7a39      	ldrb	r1, [r7, #8]
 8000ef6:	f000 fc9f 	bl	8001838 <ws2812b_set_color>
				ws2812b_update();
 8000efa:	f000 fc89 	bl	8001810 <ws2812b_update>
			for(int led = 0; led < 7; led++) {
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	dd94      	ble.n	8000e34 <led_animation+0x130>
}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000090 	.word	0x20000090
 8000f18:	200000a2 	.word	0x200000a2
 8000f1c:	08007648 	.word	0x08007648

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fce6 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f819 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f7ff fb35 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f32:	f7ff fb15 	bl	8000560 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f36:	f000 f9bb 	bl	80012b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 fb81 	bl	8001640 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f3e:	f000 fa43 	bl	80013c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ir_init();
 8000f42:	f7ff fbd5 	bl	80006f0 <ir_init>
  ws2812b_init();
 8000f46:	f000 fc33 	bl	80017b0 <ws2812b_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int value = ir_read();
 8000f4a:	f7ff fbdf 	bl	800070c <ir_read>
 8000f4e:	6078      	str	r0, [r7, #4]
	  control_ws2812b(value);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fc83 	bl	800085c <control_ws2812b>
	  led_animation();
 8000f56:	f7ff fed5 	bl	8000d04 <led_animation>
  {
 8000f5a:	bf00      	nop
 8000f5c:	e7f5      	b.n	8000f4a <main+0x2a>
	...

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	@ 0x58
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2244      	movs	r2, #68	@ 0x44
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 fcc3 	bl	80068fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f86:	f001 f9fd 	bl	8002384 <HAL_PWREx_ControlVoltageScaling>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f90:	f000 f848 	bl	8001024 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f94:	f001 f9d8 	bl	8002348 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <SystemClock_Config+0xc0>)
 8000f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f9e:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <SystemClock_Config+0xc0>)
 8000fa0:	f023 0318 	bic.w	r3, r3, #24
 8000fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fa8:	2314      	movs	r3, #20
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fb8:	2360      	movs	r3, #96	@ 0x60
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fc8:	2328      	movs	r3, #40	@ 0x28
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fa27 	bl	8002430 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fe8:	f000 f81c 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2104      	movs	r1, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fdef 	bl	8002be8 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001010:	f000 f808 	bl	8001024 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001014:	f002 faf6 	bl	8003604 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001018:	bf00      	nop
 800101a:	3758      	adds	r7, #88	@ 0x58
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	@ 0x60
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_MspInit+0x44>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	@ 0x58
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_MspInit+0x44>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <NMI_Handler+0x4>

08001080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <MemManage_Handler+0x4>

08001090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <UsageFault_Handler+0x4>

080010a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 fc67 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA1_Channel6_IRQHandler+0x10>)
 80010de:	f000 fea9 	bl	8001e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000140 	.word	0x20000140

080010ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM2_IRQHandler+0x10>)
 80010f2:	f003 f957 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000a8 	.word	0x200000a8

08001100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_kill>:

int _kill(int pid, int sig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800111a:	f005 fc3d 	bl	8006998 <__errno>
 800111e:	4603      	mov	r3, r0
 8001120:	2216      	movs	r2, #22
 8001122:	601a      	str	r2, [r3, #0]
  return -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_exit>:

void _exit (int status)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffe7 	bl	8001110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001142:	bf00      	nop
 8001144:	e7fd      	b.n	8001142 <_exit+0x12>

08001146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e00a      	b.n	800116e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001158:	f3af 8000 	nop.w
 800115c:	4601      	mov	r1, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	60ba      	str	r2, [r7, #8]
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf0      	blt.n	8001158 <_read+0x12>
  }

  return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e009      	b.n	80011a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fb2e 	bl	80007fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf1      	blt.n	8001192 <_write+0x12>
  }
  return len;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_close>:

int _close(int file)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e0:	605a      	str	r2, [r3, #4]
  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_isatty>:

int _isatty(int file)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f005 fba2 	bl	8006998 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20018000 	.word	0x20018000
 8001280:	00000400 	.word	0x00000400
 8001284:	200000a4 	.word	0x200000a4
 8001288:	20000438 	.word	0x20000438

0800128c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b090      	sub	sp, #64	@ 0x40
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <MX_TIM2_Init+0x114>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80012f4:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <MX_TIM2_Init+0x114>)
 80012f6:	224f      	movs	r2, #79	@ 0x4f
 80012f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <MX_TIM2_Init+0x114>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <MX_TIM2_Init+0x114>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001314:	482b      	ldr	r0, [pc, #172]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001316:	f002 fb57 	bl	80039c8 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001320:	f7ff fe80 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800132e:	4619      	mov	r1, r3
 8001330:	4824      	ldr	r0, [pc, #144]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001332:	f003 faef 	bl	8004914 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800133c:	f7ff fe72 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001340:	4820      	ldr	r0, [pc, #128]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001342:	f002 fe83 	bl	800404c <HAL_TIM_IC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800134c:	f7ff fe6a 	bl	8001024 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001350:	2304      	movs	r3, #4
 8001352:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001354:	2340      	movs	r3, #64	@ 0x40
 8001356:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001368:	f003 fb9d 	bl	8004aa6 <HAL_TIM_SlaveConfigSynchro>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001372:	f7ff fe57 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <MX_TIM2_Init+0x114>)
 8001386:	f004 fb23 	bl	80059d0 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001390:	f7ff fe48 	bl	8001024 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001394:	2302      	movs	r3, #2
 8001396:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <MX_TIM2_Init+0x114>)
 80013ac:	f003 f901 	bl	80045b2 <HAL_TIM_IC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80013b6:	f7ff fe35 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3740      	adds	r7, #64	@ 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000a8 	.word	0x200000a8

080013c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	@ 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <MX_TIM3_Init+0xe4>)
 80013fc:	4a2c      	ldr	r2, [pc, #176]	@ (80014b0 <MX_TIM3_Init+0xe8>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_TIM3_Init+0xe4>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <MX_TIM3_Init+0xe4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <MX_TIM3_Init+0xe4>)
 800140e:	2263      	movs	r2, #99	@ 0x63
 8001410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <MX_TIM3_Init+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <MX_TIM3_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	4823      	ldr	r0, [pc, #140]	@ (80014ac <MX_TIM3_Init+0xe4>)
 8001420:	f002 fad2 	bl	80039c8 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800142a:	f7ff fdfb 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001438:	4619      	mov	r1, r3
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <MX_TIM3_Init+0xe4>)
 800143c:	f003 fa6a 	bl	8004914 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001446:	f7ff fded 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800144a:	4818      	ldr	r0, [pc, #96]	@ (80014ac <MX_TIM3_Init+0xe4>)
 800144c:	f002 fb7c 	bl	8003b48 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001456:	f7ff fde5 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <MX_TIM3_Init+0xe4>)
 800146a:	f004 fab1 	bl	80059d0 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001474:	f7ff fdd6 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	@ 0x60
 800147a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM3_Init+0xe4>)
 8001490:	f003 f92c 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800149a:	f7ff fdc3 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM3_Init+0xe4>)
 80014a0:	f000 f898 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	@ 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200000f4 	.word	0x200000f4
 80014b0:	40000400 	.word	0x40000400

080014b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d4:	d131      	bne.n	800153a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	4a3a      	ldr	r2, [pc, #232]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e2:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001516:	2301      	movs	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001524:	f000 fd66 	bl	8001ff4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2108      	movs	r1, #8
 800152c:	201c      	movs	r0, #28
 800152e:	f000 fb32 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001532:	201c      	movs	r0, #28
 8001534:	f000 fb4b 	bl	8001bce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001538:	e040      	b.n	80015bc <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM3)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <HAL_TIM_Base_MspInit+0x114>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d13b      	bne.n	80015bc <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_TIM_Base_MspInit+0x11c>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001564:	2205      	movs	r2, #5
 8001566:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 800156a:	2210      	movs	r2, #16
 800156c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 800157c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001580:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001594:	480d      	ldr	r0, [pc, #52]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 8001596:	f000 fb35 	bl	8001c04 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_TIM_Base_MspInit+0xf0>
      Error_Handler();
 80015a0:	f7ff fd40 	bl	8001024 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 80015b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <HAL_TIM_Base_MspInit+0x118>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40000400 	.word	0x40000400
 80015cc:	20000140 	.word	0x20000140
 80015d0:	4002006c 	.word	0x4002006c

080015d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <HAL_TIM_MspPostInit+0x64>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11c      	bne.n	8001630 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_TIM_MspPostInit+0x68>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <HAL_TIM_MspPostInit+0x68>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HAL_TIM_MspPostInit+0x68>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160e:	2340      	movs	r3, #64	@ 0x40
 8001610:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f000 fce2 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40000400 	.word	0x40000400
 800163c:	40021000 	.word	0x40021000

08001640 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001646:	4a15      	ldr	r2, [pc, #84]	@ (800169c <MX_USART2_UART_Init+0x5c>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001684:	f004 fa4a 	bl	8005b1c <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800168e:	f7ff fcc9 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000188 	.word	0x20000188
 800169c:	40004400 	.word	0x40004400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ac      	sub	sp, #176	@ 0xb0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2288      	movs	r2, #136	@ 0x88
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 f91a 	bl	80068fa <memset>
  if(uartHandle->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_UART_MspInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13b      	bne.n	8001748 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fca7 	bl	8003030 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e8:	f7ff fc9c 	bl	8001024 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800171c:	230c      	movs	r3, #12
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001734:	2307      	movs	r3, #7
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001744:	f000 fc56 	bl	8001ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001748:	bf00      	nop
 800174a:	37b0      	adds	r7, #176	@ 0xb0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40004400 	.word	0x40004400
 8001754:	40021000 	.word	0x40021000

08001758 <set_byte>:
#define LED_N			7

static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

//Funkcja pomocnicza kodujaca 8-bitowa liczbe w postaci 8 bajtow aby bylo odpowiednie sterowanie
static void set_byte(uint32_t pos, uint8_t value) {
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]

	int i;
	for(i = 0; i < 8; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e016      	b.n	8001798 <set_byte+0x40>

		if(value & 0x80) {
 800176a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da06      	bge.n	8001780 <set_byte+0x28>

			led_buffer[pos + i] = BIT_1_TIME;
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <set_byte+0x54>)
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	54d1      	strb	r1, [r2, r3]
 800177e:	e005      	b.n	800178c <set_byte+0x34>

		}
		else {

			led_buffer[pos + i] = BIT_0_TIME;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <set_byte+0x54>)
 8001788:	2120      	movs	r1, #32
 800178a:	54d1      	strb	r1, [r2, r3]

		}
		value <<= 1;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 8; i++) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b07      	cmp	r3, #7
 800179c:	dde5      	ble.n	800176a <set_byte+0x12>
	}

}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000210 	.word	0x20000210

080017b0 <ws2812b_init>:

//Funkcja inicjalizujaca dane do wyslania przy uzyciu licznika TIM3:
void ws2812b_init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

	for(int i = 0; i < RESET_LEN; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	e007      	b.n	80017cc <ws2812b_init+0x1c>

		led_buffer[i] = 0;
 80017bc:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <ws2812b_init+0x58>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RESET_LEN; i++) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b27      	cmp	r3, #39	@ 0x27
 80017d0:	ddf4      	ble.n	80017bc <ws2812b_init+0xc>

	}

	for(int i = 0; i < 24 * LED_N; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	e007      	b.n	80017e8 <ws2812b_init+0x38>

		led_buffer[RESET_LEN + i] = BIT_0_TIME;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3328      	adds	r3, #40	@ 0x28
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <ws2812b_init+0x58>)
 80017de:	2120      	movs	r1, #32
 80017e0:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 24 * LED_N; i++) {
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80017ec:	ddf4      	ble.n	80017d8 <ws2812b_init+0x28>

	}

	led_buffer[RESET_LEN + 24 * LED_N] = 0;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <ws2812b_init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

	HAL_TIM_Base_Start(&htim3);
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <ws2812b_init+0x5c>)
 80017f8:	f002 f93e 	bl	8003a78 <HAL_TIM_Base_Start>

	ws2812b_update();
 80017fc:	f000 f808 	bl	8001810 <ws2812b_update>

}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000210 	.word	0x20000210
 800180c:	200000f4 	.word	0x200000f4

08001810 <ws2812b_update>:

//Funkcja wysylajaca dane przez PWM za pomoca DMA do modulu WS2812B:
void ws2812b_update(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef x;
	x = HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8001816:	23d1      	movs	r3, #209	@ 0xd1
 8001818:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <ws2812b_update+0x20>)
 800181a:	2100      	movs	r1, #0
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <ws2812b_update+0x24>)
 800181e:	f002 f9f5 	bl	8003c0c <HAL_TIM_PWM_Start_DMA>
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	//x = HAL_TIM_DMABurst_MultiWriteStart(&htim3, TIM_DMABASE_CCR1, TIM_DMA_UPDATE, (uint32_t*)led_buffer, TIM_DMABURSTLENGTH_1TRANSFER, sizeof(led_buffer));

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000210 	.word	0x20000210
 8001834:	200000f4 	.word	0x200000f4

08001838 <ws2812b_set_color>:
	}

}

//Funkcja ustawiajaca kolor diod:
void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	70fb      	strb	r3, [r7, #3]
 800184a:	460b      	mov	r3, r1
 800184c:	70bb      	strb	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]


	if(led < LED_N) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b06      	cmp	r3, #6
 8001856:	d820      	bhi.n	800189a <ws2812b_set_color+0x62>

		set_byte(RESET_LEN + 24 * led, green);
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	3328      	adds	r3, #40	@ 0x28
 8001864:	78ba      	ldrb	r2, [r7, #2]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff75 	bl	8001758 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	3330      	adds	r3, #48	@ 0x30
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff6a 	bl	8001758 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	3338      	adds	r3, #56	@ 0x38
 8001890:	787a      	ldrb	r2, [r7, #1]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <set_byte>

	}

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a8:	f7ff fcf0 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <LoopForever+0xe>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	@ (80018f0 <LoopForever+0x16>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f005 f867 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d6:	f7ff fb23 	bl	8000f20 <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018e8:	08007880 	.word	0x08007880
  ldr r2, =_sbss
 80018ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80018f0:	20000434 	.word	0x20000434

080018f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>

080018f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f93d 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	200f      	movs	r0, #15
 8001908:	f000 f80e 	bl	8001928 <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	e001      	b.n	800191c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001918:	f7ff fb8a 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800191c:	79fb      	ldrb	r3, [r7, #7]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_InitTick+0x6c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_InitTick+0x70>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_InitTick+0x6c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f949 	bl	8001bea <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d809      	bhi.n	8001978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f913 	bl	8001b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_InitTick+0x74>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e007      	b.n	8001988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e004      	b.n	8001988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e001      	b.n	8001988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c
 8001998:	20000004 	.word	0x20000004
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200002e4 	.word	0x200002e4

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200002e4 	.word	0x200002e4

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	@ (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	@ (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e098      	b.n	8001d48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <HAL_DMA_Init+0x150>)
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d80f      	bhi.n	8001c42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b4b      	ldr	r3, [pc, #300]	@ (8001d58 <HAL_DMA_Init+0x154>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d5c <HAL_DMA_Init+0x158>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	009a      	lsls	r2, r3, #2
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	@ (8001d60 <HAL_DMA_Init+0x15c>)
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c40:	e00e      	b.n	8001c60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <HAL_DMA_Init+0x160>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a43      	ldr	r2, [pc, #268]	@ (8001d5c <HAL_DMA_Init+0x158>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	009a      	lsls	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a42      	ldr	r2, [pc, #264]	@ (8001d68 <HAL_DMA_Init+0x164>)
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cba:	d039      	beq.n	8001d30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <HAL_DMA_Init+0x15c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11a      	bne.n	8001cfc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cc6:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <HAL_DMA_Init+0x168>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f003 031c 	and.w	r3, r3, #28
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4924      	ldr	r1, [pc, #144]	@ (8001d6c <HAL_DMA_Init+0x168>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_DMA_Init+0x168>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	f003 031c 	and.w	r3, r3, #28
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	491d      	ldr	r1, [pc, #116]	@ (8001d6c <HAL_DMA_Init+0x168>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
 8001cfa:	e019      	b.n	8001d30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_DMA_Init+0x16c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	f003 031c 	and.w	r3, r3, #28
 8001d08:	210f      	movs	r1, #15
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4917      	ldr	r1, [pc, #92]	@ (8001d70 <HAL_DMA_Init+0x16c>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <HAL_DMA_Init+0x16c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f003 031c 	and.w	r3, r3, #28
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	4911      	ldr	r1, [pc, #68]	@ (8001d70 <HAL_DMA_Init+0x16c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40020407 	.word	0x40020407
 8001d58:	bffdfff8 	.word	0xbffdfff8
 8001d5c:	cccccccd 	.word	0xcccccccd
 8001d60:	40020000 	.word	0x40020000
 8001d64:	bffdfbf8 	.word	0xbffdfbf8
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	400200a8 	.word	0x400200a8
 8001d70:	400204a8 	.word	0x400204a8

08001d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_DMA_Start_IT+0x20>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e04b      	b.n	8001e2c <HAL_DMA_Start_IT+0xb8>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d13a      	bne.n	8001e1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8e0 	bl	8001f92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 020e 	orr.w	r2, r2, #14
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e00f      	b.n	8001e0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0204 	bic.w	r2, r2, #4
 8001dfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 020a 	orr.w	r2, r2, #10
 8001e0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e005      	b.n	8001e2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	f003 031c 	and.w	r3, r3, #28
 8001e54:	2204      	movs	r2, #4
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d026      	beq.n	8001eae <HAL_DMA_IRQHandler+0x7a>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d021      	beq.n	8001eae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	f003 021c 	and.w	r2, r3, #28
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2104      	movs	r1, #4
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d071      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001eac:	e06c      	b.n	8001f88 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f003 031c 	and.w	r3, r3, #28
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02e      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xec>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d029      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020a 	bic.w	r2, r2, #10
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f003 021c 	and.w	r2, r3, #28
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2102      	movs	r1, #2
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d038      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f1e:	e033      	b.n	8001f88 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	f003 031c 	and.w	r3, r3, #28
 8001f28:	2208      	movs	r2, #8
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d02a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x156>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d025      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020e 	bic.w	r2, r2, #14
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 021c 	and.w	r2, r3, #28
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
}
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	f003 021c 	and.w	r2, r3, #28
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d108      	bne.n	8001fd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fd4:	e007      	b.n	8001fe6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	e17f      	b.n	8002304 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8171 	beq.w	80022fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d005      	beq.n	8002034 <HAL_GPIO_Init+0x40>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d130      	bne.n	8002096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206a:	2201      	movs	r2, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 0201 	and.w	r2, r3, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d118      	bne.n	80020d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	6939      	ldr	r1, [r7, #16]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80ac 	beq.w	80022fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002324 <HAL_GPIO_Init+0x330>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002324 <HAL_GPIO_Init+0x330>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002324 <HAL_GPIO_Init+0x330>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021be:	4a5a      	ldr	r2, [pc, #360]	@ (8002328 <HAL_GPIO_Init+0x334>)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x242>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	@ (800232c <HAL_GPIO_Init+0x338>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x23e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002330 <HAL_GPIO_Init+0x33c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x23a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x340>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x236>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x344>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x232>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <HAL_GPIO_Init+0x348>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x22e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4a      	ldr	r2, [pc, #296]	@ (8002340 <HAL_GPIO_Init+0x34c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x22a>
 800221a:	2306      	movs	r3, #6
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x244>
 800221e:	2307      	movs	r3, #7
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x244>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x244>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x244>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x244>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x244>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x244>
 8002236:	2300      	movs	r3, #0
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002248:	4937      	ldr	r1, [pc, #220]	@ (8002328 <HAL_GPIO_Init+0x334>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002256:	4b3b      	ldr	r3, [pc, #236]	@ (8002344 <HAL_GPIO_Init+0x350>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800227a:	4a32      	ldr	r2, [pc, #200]	@ (8002344 <HAL_GPIO_Init+0x350>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002280:	4b30      	ldr	r3, [pc, #192]	@ (8002344 <HAL_GPIO_Init+0x350>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022a4:	4a27      	ldr	r2, [pc, #156]	@ (8002344 <HAL_GPIO_Init+0x350>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_GPIO_Init+0x350>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_GPIO_Init+0x350>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_GPIO_Init+0x350>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f8:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <HAL_GPIO_Init+0x350>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f ae78 	bne.w	8002004 <HAL_GPIO_Init+0x10>
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000
 800232c:	48000400 	.word	0x48000400
 8002330:	48000800 	.word	0x48000800
 8002334:	48000c00 	.word	0x48000c00
 8002338:	48001000 	.word	0x48001000
 800233c:	48001400 	.word	0x48001400
 8002340:	48001800 	.word	0x48001800
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_PWREx_GetVoltageRange+0x18>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002392:	d130      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002394:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800239c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a0:	d038      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2232      	movs	r2, #50	@ 0x32
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c8:	e002      	b.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023dc:	d102      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f2      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f0:	d110      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e00f      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002402:	d007      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800240c:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002412:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000
 8002428:	20000004 	.word	0x20000004
 800242c:	431bde83 	.word	0x431bde83

08002430 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e3ca      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4b97      	ldr	r3, [pc, #604]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4b94      	ldr	r3, [pc, #592]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80e4 	beq.w	800262c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_RCC_OscConfig+0x4a>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	f040 808b 	bne.w	8002588 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8087 	bne.w	8002588 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800247a:	4b89      	ldr	r3, [pc, #548]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e3a2      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	4b82      	ldr	r3, [pc, #520]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_RCC_OscConfig+0x7c>
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_OscConfig+0x88>
 80024ac:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d223      	bcs.n	8002504 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fd55 	bl	8002f70 <RCC_SetFlashLatencyFromMSIRange>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e383      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4b73      	ldr	r3, [pc, #460]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a72      	ldr	r2, [pc, #456]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b70      	ldr	r3, [pc, #448]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	496d      	ldr	r1, [pc, #436]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b6c      	ldr	r3, [pc, #432]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4968      	ldr	r1, [pc, #416]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
 8002502:	e025      	b.n	8002550 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4960      	ldr	r1, [pc, #384]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b5f      	ldr	r3, [pc, #380]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	495b      	ldr	r1, [pc, #364]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fd15 	bl	8002f70 <RCC_SetFlashLatencyFromMSIRange>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e343      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002550:	f000 fc4a 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b52      	ldr	r3, [pc, #328]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	4950      	ldr	r1, [pc, #320]	@ (80026a4 <HAL_RCC_OscConfig+0x274>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	4a4e      	ldr	r2, [pc, #312]	@ (80026a8 <HAL_RCC_OscConfig+0x278>)
 800256e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002570:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f9d7 	bl	8001928 <HAL_InitTick>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d052      	beq.n	800262a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	e327      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d032      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002590:	4b43      	ldr	r3, [pc, #268]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a42      	ldr	r2, [pc, #264]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800259c:	f7ff fa14 	bl	80019c8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a4:	f7ff fa10 	bl	80019c8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e310      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b6:	4b3a      	ldr	r3, [pc, #232]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a36      	ldr	r2, [pc, #216]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4931      	ldr	r1, [pc, #196]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e0:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	492c      	ldr	r1, [pc, #176]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e01a      	b.n	800262c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002602:	f7ff f9e1 	bl	80019c8 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260a:	f7ff f9dd 	bl	80019c8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e2dd      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261c:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x1da>
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800262a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d074      	beq.n	8002722 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x21a>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d10e      	bne.n	8002662 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d064      	beq.n	8002720 <HAL_RCC_OscConfig+0x2f0>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d160      	bne.n	8002720 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e2ba      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x24a>
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e026      	b.n	80026c8 <HAL_RCC_OscConfig+0x298>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002682:	d115      	bne.n	80026b0 <HAL_RCC_OscConfig+0x280>
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a02      	ldr	r2, [pc, #8]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e014      	b.n	80026c8 <HAL_RCC_OscConfig+0x298>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08007748 	.word	0x08007748
 80026a8:	20000004 	.word	0x20000004
 80026ac:	20000008 	.word	0x20000008
 80026b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a9f      	ldr	r2, [pc, #636]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b9d      	ldr	r3, [pc, #628]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9c      	ldr	r2, [pc, #624]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7ff f97a 	bl	80019c8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f976 	bl	80019c8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e276      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	4b92      	ldr	r3, [pc, #584]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2a8>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff f966 	bl	80019c8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f962 	bl	80019c8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e262      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002712:	4b88      	ldr	r3, [pc, #544]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x2d0>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d060      	beq.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x310>
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d119      	bne.n	800276e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	4b7c      	ldr	r3, [pc, #496]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x328>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e23f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b76      	ldr	r3, [pc, #472]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4973      	ldr	r1, [pc, #460]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	e040      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d023      	beq.n	80027be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002776:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f921 	bl	80019c8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f91d 	bl	80019c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e21d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	4b65      	ldr	r3, [pc, #404]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b62      	ldr	r3, [pc, #392]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	495f      	ldr	r1, [pc, #380]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e018      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b5d      	ldr	r3, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f8fd 	bl	80019c8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d2:	f7ff f8f9 	bl	80019c8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1f9      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e4:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d03c      	beq.n	8002876 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002804:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280a:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7ff f8d8 	bl	80019c8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281c:	f7ff f8d4 	bl	80019c8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ef      	beq.n	800281c <HAL_RCC_OscConfig+0x3ec>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b3d      	ldr	r3, [pc, #244]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002844:	4a3b      	ldr	r2, [pc, #236]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7ff f8bb 	bl	80019c8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002856:	f7ff f8b7 	bl	80019c8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1b7      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ef      	bne.n	8002856 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80a6 	beq.w	80029d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002888:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a26      	ldr	r2, [pc, #152]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a0:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <HAL_RCC_OscConfig+0x508>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d118      	bne.n	80028ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <HAL_RCC_OscConfig+0x508>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002938 <HAL_RCC_OscConfig+0x508>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c8:	f7ff f87e 	bl	80019c8 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7ff f87a 	bl	80019c8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e17a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_RCC_OscConfig+0x508>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_OscConfig+0x4d8>
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002906:	e029      	b.n	800295c <HAL_RCC_OscConfig+0x52c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d115      	bne.n	800293c <HAL_RCC_OscConfig+0x50c>
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a03      	ldr	r2, [pc, #12]	@ (8002934 <HAL_RCC_OscConfig+0x504>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x52c>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	4b9c      	ldr	r3, [pc, #624]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	4a9b      	ldr	r2, [pc, #620]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800294c:	4b98      	ldr	r3, [pc, #608]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	4a97      	ldr	r2, [pc, #604]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7ff f830 	bl	80019c8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7ff f82c 	bl	80019c8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e12a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ed      	beq.n	800296c <HAL_RCC_OscConfig+0x53c>
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7ff f819 	bl	80019c8 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7ff f815 	bl	80019c8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e113      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b0:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ed      	bne.n	800299a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	4a79      	ldr	r2, [pc, #484]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80fe 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	2b02      	cmp	r3, #2
 80029e0:	f040 80d0 	bne.w	8002b84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029e4:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d130      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	3b01      	subs	r3, #1
 8002a04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d127      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d11f      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a24:	2a07      	cmp	r2, #7
 8002a26:	bf14      	ite	ne
 8002a28:	2201      	movne	r2, #1
 8002a2a:	2200      	moveq	r2, #0
 8002a2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d113      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d06e      	beq.n	8002b38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d069      	beq.n	8002b34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ad      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a88:	f7fe ff9e 	bl	80019c8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe ff9a 	bl	80019c8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e09a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa2:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b40      	ldr	r3, [pc, #256]	@ (8002bb4 <HAL_RCC_OscConfig+0x784>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ac8:	0212      	lsls	r2, r2, #8
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0552      	lsls	r2, r2, #21
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002adc:	0852      	lsrs	r2, r2, #1
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0652      	lsls	r2, r2, #25
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ae8:	0912      	lsrs	r2, r2, #4
 8002aea:	0452      	lsls	r2, r2, #17
 8002aec:	430a      	orrs	r2, r1
 8002aee:	4930      	ldr	r1, [pc, #192]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002af4:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b00:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b0c:	f7fe ff5c 	bl	80019c8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe ff58 	bl	80019c8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e058      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b32:	e050      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d148      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b5c:	f7fe ff34 	bl	80019c8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe ff30 	bl	80019c8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e030      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x734>
 8002b82:	e028      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d023      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe ff17 	bl	80019c8 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	e00c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe ff13 	bl	80019c8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d905      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ec      	bne.n	8002b9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4905      	ldr	r1, [pc, #20]	@ (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_OscConfig+0x7b4>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	feeefffc 	.word	0xfeeefffc

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e7      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b75      	ldr	r3, [pc, #468]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b72      	ldr	r3, [pc, #456]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0207 	bic.w	r2, r3, #7
 8002c12:	4970      	ldr	r1, [pc, #448]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cf      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b66      	ldr	r3, [pc, #408]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4960      	ldr	r1, [pc, #384]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04c      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0a6      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4b54      	ldr	r3, [pc, #336]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d115      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e09a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08e      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cae:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e086      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b46      	ldr	r3, [pc, #280]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4943      	ldr	r1, [pc, #268]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fe7a 	bl	80019c8 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe fe76 	bl	80019c8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e06e      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d208      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	492b      	ldr	r1, [pc, #172]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4b29      	ldr	r3, [pc, #164]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d210      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 0207 	bic.w	r2, r3, #7
 8002d44:	4923      	ldr	r1, [pc, #140]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e036      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4918      	ldr	r1, [pc, #96]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4910      	ldr	r1, [pc, #64]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9c:	f000 f824 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	490b      	ldr	r1, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1fc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe fdb1 	bl	8001928 <HAL_InitTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08007748 	.word	0x08007748
 8002de0:	20000004 	.word	0x20000004
 8002de4:	20000008 	.word	0x20000008

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	@ 0x24
 8002dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x34>
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d11e      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e005      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e004      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d134      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d003      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0xac>
 8002e8c:	e005      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e90:	617b      	str	r3, [r7, #20]
      break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e96:	617b      	str	r3, [r7, #20]
      break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	0e5b      	lsrs	r3, r3, #25
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08007760 	.word	0x08007760
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	007a1200 	.word	0x007a1200

08002f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4904      	ldr	r1, [pc, #16]	@ (8002f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08007758 	.word	0x08007758

08002f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f48:	f7ff ffda 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0adb      	lsrs	r3, r3, #11
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4904      	ldr	r1, [pc, #16]	@ (8002f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08007758 	.word	0x08007758

08002f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f88:	f7ff f9ee 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8002f8c:	6178      	str	r0, [r7, #20]
 8002f8e:	e014      	b.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	4a24      	ldr	r2, [pc, #144]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fa8:	f7ff f9de 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8002fac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc0:	d10b      	bne.n	8002fda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b80      	cmp	r3, #128	@ 0x80
 8002fc6:	d919      	bls.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fcc:	d902      	bls.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fce:	2302      	movs	r3, #2
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e013      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	e010      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b80      	cmp	r3, #128	@ 0x80
 8002fde:	d902      	bls.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e00a      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b80      	cmp	r3, #128	@ 0x80
 8002fea:	d102      	bne.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fec:	2302      	movs	r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e004      	b.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b70      	cmp	r3, #112	@ 0x70
 8002ff6:	d101      	bne.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 0207 	bic.w	r2, r3, #7
 8003004:	4909      	ldr	r1, [pc, #36]	@ (800302c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800300c:	4b07      	ldr	r3, [pc, #28]	@ (800302c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	40022000 	.word	0x40022000

08003030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003038:	2300      	movs	r3, #0
 800303a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800303c:	2300      	movs	r3, #0
 800303e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003048:	2b00      	cmp	r3, #0
 800304a:	d041      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003050:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003054:	d02a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003056:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800305a:	d824      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800305c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003066:	d81e      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800306c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003070:	d010      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003072:	e018      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003074:	4b86      	ldr	r3, [pc, #536]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a85      	ldr	r2, [pc, #532]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003080:	e015      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 facb 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3320      	adds	r3, #32
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fbb6 	bl	800380c <RCCEx_PLLSAI2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	74fb      	strb	r3, [r7, #19]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b4:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c2:	4973      	ldr	r1, [pc, #460]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ca:	e001      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d041      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030e4:	d02a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ea:	d824      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f6:	d81e      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003100:	d010      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003102:	e018      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003104:	4b62      	ldr	r3, [pc, #392]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a61      	ldr	r2, [pc, #388]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003110:	e015      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fa83 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003122:	e00c      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3320      	adds	r3, #32
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fb6e 	bl	800380c <RCCEx_PLLSAI2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003134:	e003      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	74fb      	strb	r3, [r7, #19]
      break;
 800313a:	e000      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800313c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003144:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003152:	494f      	ldr	r1, [pc, #316]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800315a:	e001      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a0 	beq.w	80032ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	4a40      	ldr	r2, [pc, #256]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	@ 0x58
 8003194:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b0:	f7fe fc0a 	bl	80019c8 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b6:	e009      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fe fc06 	bl	80019c8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ca:	e005      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031cc:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d15c      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031de:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01f      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d019      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031fc:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003208:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a20      	ldr	r2, [pc, #128]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	4a1c      	ldr	r2, [pc, #112]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003228:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fbc5 	bl	80019c8 <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003240:	e00b      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fbc1 	bl	80019c8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d902      	bls.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	74fb      	strb	r3, [r7, #19]
            break;
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ec      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326e:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800327e:	4904      	ldr	r1, [pc, #16]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003286:	e009      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
 800328c:	e006      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329c:	7c7b      	ldrb	r3, [r7, #17]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b9e      	ldr	r3, [pc, #632]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	4a9d      	ldr	r2, [pc, #628]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ba:	4b98      	ldr	r3, [pc, #608]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f023 0203 	bic.w	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	4994      	ldr	r1, [pc, #592]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032dc:	4b8f      	ldr	r3, [pc, #572]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f023 020c 	bic.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	498c      	ldr	r1, [pc, #560]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fe:	4b87      	ldr	r3, [pc, #540]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003304:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	4983      	ldr	r1, [pc, #524]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003320:	4b7e      	ldr	r3, [pc, #504]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	497b      	ldr	r1, [pc, #492]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003342:	4b76      	ldr	r3, [pc, #472]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	4972      	ldr	r1, [pc, #456]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003364:	4b6d      	ldr	r3, [pc, #436]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	496a      	ldr	r1, [pc, #424]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003386:	4b65      	ldr	r3, [pc, #404]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	4961      	ldr	r1, [pc, #388]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a8:	4b5c      	ldr	r3, [pc, #368]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	4959      	ldr	r1, [pc, #356]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d8:	4950      	ldr	r1, [pc, #320]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ec:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	4948      	ldr	r1, [pc, #288]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340e:	4b43      	ldr	r3, [pc, #268]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003414:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	493f      	ldr	r1, [pc, #252]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d028      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003430:	4b3a      	ldr	r3, [pc, #232]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343e:	4937      	ldr	r1, [pc, #220]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800344e:	d106      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003450:	4b32      	ldr	r3, [pc, #200]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a31      	ldr	r2, [pc, #196]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345a:	60d3      	str	r3, [r2, #12]
 800345c:	e011      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003466:	d10c      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f8d8 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d028      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800348e:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	491f      	ldr	r1, [pc, #124]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ac:	d106      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ae:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b8:	60d3      	str	r3, [r2, #12]
 80034ba:	e011      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f8a9 	bl	8003624 <RCCEx_PLLSAI1_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02b      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	4908      	ldr	r1, [pc, #32]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800350a:	d109      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a02      	ldr	r2, [pc, #8]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003516:	60d3      	str	r3, [r2, #12]
 8003518:	e014      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003524:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f877 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02f      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003550:	4b2b      	ldr	r3, [pc, #172]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355e:	4928      	ldr	r1, [pc, #160]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800356e:	d10d      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f854 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d014      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	74bb      	strb	r3, [r7, #18]
 800358a:	e011      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3320      	adds	r3, #32
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f935 	bl	800380c <RCCEx_PLLSAI2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035bc:	4b10      	ldr	r3, [pc, #64]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ca:	490d      	ldr	r1, [pc, #52]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ee:	4904      	ldr	r1, [pc, #16]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a04      	ldr	r2, [pc, #16]	@ (8003620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000

08003624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003632:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
       ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003656:	4b6c      	ldr	r3, [pc, #432]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
       ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d047      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e044      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d018      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x86>
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d002      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0x62>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d009      	beq.n	8003698 <RCCEx_PLLSAI1_Config+0x74>
 8003684:	e020      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003686:	4b60      	ldr	r3, [pc, #384]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e01a      	b.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003698:	4b5b      	ldr	r3, [pc, #364]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e013      	b.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b57      	ldr	r3, [pc, #348]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b6:	4b54      	ldr	r3, [pc, #336]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c6:	e006      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e004      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036de:	4b4a      	ldr	r3, [pc, #296]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4944      	ldr	r1, [pc, #272]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d17d      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a40      	ldr	r2, [pc, #256]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe f95c 	bl	80019c8 <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003714:	f7fe f958 	bl	80019c8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
        break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003728:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d160      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003740:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	0912      	lsrs	r2, r2, #4
 8003758:	0452      	lsls	r2, r2, #17
 800375a:	430a      	orrs	r2, r1
 800375c:	492a      	ldr	r1, [pc, #168]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	610b      	str	r3, [r1, #16]
 8003762:	e027      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376a:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003772:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	0211      	lsls	r1, r2, #8
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6912      	ldr	r2, [r2, #16]
 8003780:	0852      	lsrs	r2, r2, #1
 8003782:	3a01      	subs	r2, #1
 8003784:	0552      	lsls	r2, r2, #21
 8003786:	430a      	orrs	r2, r1
 8003788:	491f      	ldr	r1, [pc, #124]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e011      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6952      	ldr	r2, [r2, #20]
 80037a6:	0852      	lsrs	r2, r2, #1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0652      	lsls	r2, r2, #25
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4916      	ldr	r1, [pc, #88]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe f902 	bl	80019c8 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fe f8fe 	bl	80019c8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
          break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	4904      	ldr	r1, [pc, #16]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000

0800380c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800381a:	4b6a      	ldr	r3, [pc, #424]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d018      	beq.n	8003858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0203 	and.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
       ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800383e:	4b61      	ldr	r3, [pc, #388]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
       ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d047      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e044      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d018      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x86>
 8003860:	2b03      	cmp	r3, #3
 8003862:	d825      	bhi.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003864:	2b01      	cmp	r3, #1
 8003866:	d002      	beq.n	800386e <RCCEx_PLLSAI2_Config+0x62>
 8003868:	2b02      	cmp	r3, #2
 800386a:	d009      	beq.n	8003880 <RCCEx_PLLSAI2_Config+0x74>
 800386c:	e020      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800386e:	4b55      	ldr	r3, [pc, #340]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11d      	bne.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387e:	e01a      	b.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003880:	4b50      	ldr	r3, [pc, #320]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e013      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003892:	4b4c      	ldr	r3, [pc, #304]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800389e:	4b49      	ldr	r3, [pc, #292]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ae:	e006      	b.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e004      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038be:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038c6:	4b3f      	ldr	r3, [pc, #252]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	430b      	orrs	r3, r1
 80038dc:	4939      	ldr	r1, [pc, #228]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d167      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e8:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fe f868 	bl	80019c8 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038fa:	e009      	b.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038fc:	f7fe f864 	bl	80019c8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	73fb      	strb	r3, [r7, #15]
        break;
 800390e:	e005      	b.n	800391c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003910:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ef      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14a      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003928:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	0912      	lsrs	r2, r2, #4
 8003940:	0452      	lsls	r2, r2, #17
 8003942:	430a      	orrs	r2, r1
 8003944:	491f      	ldr	r1, [pc, #124]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	614b      	str	r3, [r1, #20]
 800394a:	e011      	b.n	8003970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6912      	ldr	r2, [r2, #16]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	430a      	orrs	r2, r1
 800396a:	4916      	ldr	r1, [pc, #88]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe f824 	bl	80019c8 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003984:	f7fe f820 	bl	80019c8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
          break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4904      	ldr	r1, [pc, #16]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e049      	b.n	8003a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fd60 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f001 f9ee 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e047      	b.n	8003b20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	@ (8003b2c <HAL_TIM_Base_Start+0xb4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01d      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aaa:	d018      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b30 <HAL_TIM_Base_Start+0xb8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_TIM_Base_Start+0xbc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <HAL_TIM_Base_Start+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <HAL_TIM_Base_Start+0xc4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_TIM_Base_Start+0x66>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <HAL_TIM_Base_Start+0xc8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d115      	bne.n	8003b0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <HAL_TIM_Base_Start+0xcc>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d015      	beq.n	8003b1c <HAL_TIM_Base_Start+0xa4>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d011      	beq.n	8003b1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b08:	e008      	b.n	8003b1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e000      	b.n	8003b1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	00010007 	.word	0x00010007

08003b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e049      	b.n	8003bee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f841 	bl	8003bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f001 f92e 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e03c      	b.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d109      	bne.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x46>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e02f      	b.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start_DMA+0x60>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e022      	b.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d109      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e015      	b.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e008      	b.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e1ab      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e03c      	b.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x142>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d109      	bne.n	8003cee <HAL_TIM_PWM_Start_DMA+0xe2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e02f      	b.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x142>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e022      	b.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x142>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d109      	bne.n	8003d22 <HAL_TIM_PWM_Start_DMA+0x116>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e015      	b.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x142>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d109      	bne.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x130>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e008      	b.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x142>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d034      	beq.n	8003dbc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_TIM_PWM_Start_DMA+0x152>
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e157      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x166>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	e026      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x176>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d80:	e01e      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start_DMA+0x186>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d90:	e016      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start_DMA+0x196>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003da0:	e00e      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db0:	e006      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dba:	e001      	b.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e128      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	f200 80ae 	bhi.w	8003f24 <HAL_TIM_PWM_Start_DMA+0x318>
 8003dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003f25 	.word	0x08003f25
 8003dd8:	08003f25 	.word	0x08003f25
 8003ddc:	08003f25 	.word	0x08003f25
 8003de0:	08003e4d 	.word	0x08003e4d
 8003de4:	08003f25 	.word	0x08003f25
 8003de8:	08003f25 	.word	0x08003f25
 8003dec:	08003f25 	.word	0x08003f25
 8003df0:	08003e95 	.word	0x08003e95
 8003df4:	08003f25 	.word	0x08003f25
 8003df8:	08003f25 	.word	0x08003f25
 8003dfc:	08003f25 	.word	0x08003f25
 8003e00:	08003edd 	.word	0x08003edd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	4a84      	ldr	r2, [pc, #528]	@ (800401c <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	4a83      	ldr	r2, [pc, #524]	@ (8004020 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	4a82      	ldr	r2, [pc, #520]	@ (8004024 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3334      	adds	r3, #52	@ 0x34
 8003e28:	461a      	mov	r2, r3
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	f7fd ffa2 	bl	8001d74 <HAL_DMA_Start_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0eb      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e48:	60da      	str	r2, [r3, #12]
      break;
 8003e4a:	e06e      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	4a72      	ldr	r2, [pc, #456]	@ (800401c <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e52:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	4a71      	ldr	r2, [pc, #452]	@ (8004020 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	4a70      	ldr	r2, [pc, #448]	@ (8004024 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3338      	adds	r3, #56	@ 0x38
 8003e70:	461a      	mov	r2, r3
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	f7fd ff7e 	bl	8001d74 <HAL_DMA_Start_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0c7      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e90:	60da      	str	r2, [r3, #12]
      break;
 8003e92:	e04a      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	4a60      	ldr	r2, [pc, #384]	@ (800401c <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	4a5f      	ldr	r2, [pc, #380]	@ (8004020 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4a5e      	ldr	r2, [pc, #376]	@ (8004024 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	333c      	adds	r3, #60	@ 0x3c
 8003eb8:	461a      	mov	r2, r3
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	f7fd ff5a 	bl	8001d74 <HAL_DMA_Start_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0a3      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed8:	60da      	str	r2, [r3, #12]
      break;
 8003eda:	e026      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800401c <HAL_TIM_PWM_Start_DMA+0x410>)
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8004020 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3340      	adds	r3, #64	@ 0x40
 8003f00:	461a      	mov	r2, r3
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	f7fd ff36 	bl	8001d74 <HAL_DMA_Start_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f20:	60da      	str	r2, [r3, #12]
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
      break;
 8003f28:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d16f      	bne.n	8004010 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fd23 	bl	8005984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a39      	ldr	r2, [pc, #228]	@ (8004028 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d013      	beq.n	8003f70 <HAL_TIM_PWM_Start_DMA+0x364>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a37      	ldr	r2, [pc, #220]	@ (800402c <HAL_TIM_PWM_Start_DMA+0x420>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00e      	beq.n	8003f70 <HAL_TIM_PWM_Start_DMA+0x364>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a36      	ldr	r2, [pc, #216]	@ (8004030 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_TIM_PWM_Start_DMA+0x364>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a34      	ldr	r2, [pc, #208]	@ (8004034 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <HAL_TIM_PWM_Start_DMA+0x364>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a33      	ldr	r2, [pc, #204]	@ (8004038 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_PWM_Start_DMA+0x368>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a26      	ldr	r2, [pc, #152]	@ (8004028 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_TIM_PWM_Start_DMA+0x430>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <HAL_TIM_PWM_Start_DMA+0x434>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <HAL_TIM_PWM_Start_DMA+0x420>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a19      	ldr	r2, [pc, #100]	@ (8004030 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d115      	bne.n	8003ffc <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d015      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x402>
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe8:	d011      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e008      	b.n	800400e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e000      	b.n	8004010 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	08004cd7 	.word	0x08004cd7
 8004020:	08004d7f 	.word	0x08004d7f
 8004024:	08004c45 	.word	0x08004c45
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40013400 	.word	0x40013400
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	00010007 	.word	0x00010007

0800404c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e049      	b.n	80040f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f841 	bl	80040fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 feac 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_TIM_IC_Start_IT+0x1e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e023      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x66>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d104      	bne.n	800413e <HAL_TIM_IC_Start_IT+0x2e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e01b      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x66>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d104      	bne.n	800414e <HAL_TIM_IC_Start_IT+0x3e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e013      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x66>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d104      	bne.n	800415e <HAL_TIM_IC_Start_IT+0x4e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e00b      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x66>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b10      	cmp	r3, #16
 8004162:	d104      	bne.n	800416e <HAL_TIM_IC_Start_IT+0x5e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e003      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x66>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004174:	b2db      	uxtb	r3, r3
 8004176:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <HAL_TIM_IC_Start_IT+0x78>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e013      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0xa0>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d104      	bne.n	8004198 <HAL_TIM_IC_Start_IT+0x88>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e00b      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0xa0>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d104      	bne.n	80041a8 <HAL_TIM_IC_Start_IT+0x98>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e003      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0xa0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b8:	7b7b      	ldrb	r3, [r7, #13]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0dd      	b.n	800437e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_IC_Start_IT+0xc2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d0:	e023      	b.n	800421a <HAL_TIM_IC_Start_IT+0x10a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_IC_Start_IT+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e0:	e01b      	b.n	800421a <HAL_TIM_IC_Start_IT+0x10a>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_IC_Start_IT+0xe2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f0:	e013      	b.n	800421a <HAL_TIM_IC_Start_IT+0x10a>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_IC_Start_IT+0xf2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004200:	e00b      	b.n	800421a <HAL_TIM_IC_Start_IT+0x10a>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d104      	bne.n	8004212 <HAL_TIM_IC_Start_IT+0x102>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	e003      	b.n	800421a <HAL_TIM_IC_Start_IT+0x10a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0x11a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004228:	e013      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x142>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0x12a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004238:	e00b      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x142>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0x13a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004248:	e003      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x142>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d841      	bhi.n	80042dc <HAL_TIM_IC_Start_IT+0x1cc>
 8004258:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <HAL_TIM_IC_Start_IT+0x150>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004295 	.word	0x08004295
 8004264:	080042dd 	.word	0x080042dd
 8004268:	080042dd 	.word	0x080042dd
 800426c:	080042dd 	.word	0x080042dd
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042dd 	.word	0x080042dd
 8004278:	080042dd 	.word	0x080042dd
 800427c:	080042dd 	.word	0x080042dd
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042dd 	.word	0x080042dd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042cb 	.word	0x080042cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0202 	orr.w	r2, r2, #2
 80042a2:	60da      	str	r2, [r3, #12]
      break;
 80042a4:	e01d      	b.n	80042e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0204 	orr.w	r2, r2, #4
 80042b4:	60da      	str	r2, [r3, #12]
      break;
 80042b6:	e014      	b.n	80042e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	60da      	str	r2, [r3, #12]
      break;
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0210 	orr.w	r2, r2, #16
 80042d8:	60da      	str	r2, [r3, #12]
      break;
 80042da:	e002      	b.n	80042e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d149      	bne.n	800437c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	6839      	ldr	r1, [r7, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fb47 	bl	8005984 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a23      	ldr	r2, [pc, #140]	@ (8004388 <HAL_TIM_IC_Start_IT+0x278>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01d      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004308:	d018      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <HAL_TIM_IC_Start_IT+0x27c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <HAL_TIM_IC_Start_IT+0x280>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1c      	ldr	r2, [pc, #112]	@ (8004394 <HAL_TIM_IC_Start_IT+0x284>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <HAL_TIM_IC_Start_IT+0x288>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x22c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a19      	ldr	r2, [pc, #100]	@ (800439c <HAL_TIM_IC_Start_IT+0x28c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d115      	bne.n	8004368 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <HAL_TIM_IC_Start_IT+0x290>)
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b06      	cmp	r3, #6
 800434c:	d015      	beq.n	800437a <HAL_TIM_IC_Start_IT+0x26a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004354:	d011      	beq.n	800437a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	e008      	b.n	800437a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e000      	b.n	800437c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	00010007 	.word	0x00010007

080043a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d020      	beq.n	8004408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fa1c 	bl	800082c <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fbe6 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fbed 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0204 	mvn.w	r2, #4
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc f9f6 	bl	800082c <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fbc0 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fbc7 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0208 	mvn.w	r2, #8
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc f9d0 	bl	800082c <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fb9a 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fba1 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0210 	mvn.w	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2208      	movs	r2, #8
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc f9aa 	bl	800082c <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fb74 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb7b 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0201 	mvn.w	r2, #1
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fb52 	bl	8004bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00c      	beq.n	800453e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 fadb 	bl	8005af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 fad3 	bl	8005b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fb3f 	bl	8004c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0220 	mvn.w	r2, #32
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fa9b 	bl	8005ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e088      	b.n	80046e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11b      	bne.n	8004616 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045ee:	f001 f80b 	bl	8005608 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020c 	bic.w	r2, r2, #12
 8004600:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6999      	ldr	r1, [r3, #24]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	e060      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d11c      	bne.n	8004656 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800462c:	f001 f889 	bl	8005742 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800463e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
 8004654:	e040      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d11b      	bne.n	8004694 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800466c:	f001 f8d6 	bl	800581c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020c 	bic.w	r2, r2, #12
 800467e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69d9      	ldr	r1, [r3, #28]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	e021      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d11c      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80046aa:	f001 f8f3 	bl	8005894 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e001      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004706:	2302      	movs	r3, #2
 8004708:	e0ff      	b.n	800490a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b14      	cmp	r3, #20
 8004716:	f200 80f0 	bhi.w	80048fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004775 	.word	0x08004775
 8004724:	080048fb 	.word	0x080048fb
 8004728:	080048fb 	.word	0x080048fb
 800472c:	080048fb 	.word	0x080048fb
 8004730:	080047b5 	.word	0x080047b5
 8004734:	080048fb 	.word	0x080048fb
 8004738:	080048fb 	.word	0x080048fb
 800473c:	080048fb 	.word	0x080048fb
 8004740:	080047f7 	.word	0x080047f7
 8004744:	080048fb 	.word	0x080048fb
 8004748:	080048fb 	.word	0x080048fb
 800474c:	080048fb 	.word	0x080048fb
 8004750:	08004837 	.word	0x08004837
 8004754:	080048fb 	.word	0x080048fb
 8004758:	080048fb 	.word	0x080048fb
 800475c:	080048fb 	.word	0x080048fb
 8004760:	08004879 	.word	0x08004879
 8004764:	080048fb 	.word	0x080048fb
 8004768:	080048fb 	.word	0x080048fb
 800476c:	080048fb 	.word	0x080048fb
 8004770:	080048b9 	.word	0x080048b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fbda 	bl	8004f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0208 	orr.w	r2, r2, #8
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	619a      	str	r2, [r3, #24]
      break;
 80047b2:	e0a5      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fc4a 	bl	8005054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	021a      	lsls	r2, r3, #8
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	619a      	str	r2, [r3, #24]
      break;
 80047f4:	e084      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fcb3 	bl	8005168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0208 	orr.w	r2, r2, #8
 8004810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0204 	bic.w	r2, r2, #4
 8004820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	61da      	str	r2, [r3, #28]
      break;
 8004834:	e064      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fd1b 	bl	8005278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	021a      	lsls	r2, r3, #8
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	61da      	str	r2, [r3, #28]
      break;
 8004876:	e043      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fd64 	bl	800534c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0208 	orr.w	r2, r2, #8
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048b6:	e023      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fda8 	bl	8005414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048f8:	e002      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	75fb      	strb	r3, [r7, #23]
      break;
 80048fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop

08004914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIM_ConfigClockSource+0x1c>
 800492c:	2302      	movs	r3, #2
 800492e:	e0b6      	b.n	8004a9e <HAL_TIM_ConfigClockSource+0x18a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800495a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800496c:	d03e      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0xd8>
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004972:	f200 8087 	bhi.w	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497a:	f000 8086 	beq.w	8004a8a <HAL_TIM_ConfigClockSource+0x176>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004982:	d87f      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 8004984:	2b70      	cmp	r3, #112	@ 0x70
 8004986:	d01a      	beq.n	80049be <HAL_TIM_ConfigClockSource+0xaa>
 8004988:	2b70      	cmp	r3, #112	@ 0x70
 800498a:	d87b      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 800498c:	2b60      	cmp	r3, #96	@ 0x60
 800498e:	d050      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x11e>
 8004990:	2b60      	cmp	r3, #96	@ 0x60
 8004992:	d877      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 8004994:	2b50      	cmp	r3, #80	@ 0x50
 8004996:	d03c      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0xfe>
 8004998:	2b50      	cmp	r3, #80	@ 0x50
 800499a:	d873      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	d058      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x13e>
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d86f      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 80049a4:	2b30      	cmp	r3, #48	@ 0x30
 80049a6:	d064      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x15e>
 80049a8:	2b30      	cmp	r3, #48	@ 0x30
 80049aa:	d86b      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d060      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x15e>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d867      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d05c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x15e>
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d05a      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x15e>
 80049bc:	e062      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ce:	f000 ffb9 	bl	8005944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	609a      	str	r2, [r3, #8]
      break;
 80049ea:	e04f      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049fc:	f000 ffa2 	bl	8005944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a0e:	609a      	str	r2, [r3, #8]
      break;
 8004a10:	e03c      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 fe60 	bl	80056e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2150      	movs	r1, #80	@ 0x50
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 ff6f 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 8004a30:	e02c      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 febc 	bl	80057bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2160      	movs	r1, #96	@ 0x60
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 ff5f 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 8004a50:	e01c      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f000 fe40 	bl	80056e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2140      	movs	r1, #64	@ 0x40
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 ff4f 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 8004a70:	e00c      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f000 ff46 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 8004a82:	e003      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	e000      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_SlaveConfigSynchro+0x18>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e031      	b.n	8004b22 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fd05 	bl	80054e0 <TIM_SlaveTimer_SetConfig>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e018      	b.n	8004b22 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004afe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b0e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d831      	bhi.n	8004ba4 <HAL_TIM_ReadCapturedValue+0x78>
 8004b40:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004ba5 	.word	0x08004ba5
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004ba5 	.word	0x08004ba5
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ba5 	.word	0x08004ba5
 8004b78:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	60fb      	str	r3, [r7, #12]

      break;
 8004b84:	e00f      	b.n	8004ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	60fb      	str	r3, [r7, #12]

      break;
 8004b8e:	e00a      	b.n	8004ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b96:	60fb      	str	r3, [r7, #12]

      break;
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	60fb      	str	r3, [r7, #12]

      break;
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004ba4:	bf00      	nop
  }

  return tmpreg;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7f1b      	ldrb	r3, [r3, #28]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c6a:	e02a      	b.n	8004cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d107      	bne.n	8004c86 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c84:	e01d      	b.n	8004cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d107      	bne.n	8004ca0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2204      	movs	r2, #4
 8004c94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c9e:	e010      	b.n	8004cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d107      	bne.n	8004cba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2208      	movs	r2, #8
 8004cae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cb8:	e003      	b.n	8004cc2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff ffa8 	bl	8004c18 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	771a      	strb	r2, [r3, #28]
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d10b      	bne.n	8004d06 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d136      	bne.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d04:	e031      	b.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d10b      	bne.n	8004d28 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2202      	movs	r2, #2
 8004d14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d125      	bne.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d26:	e020      	b.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d10b      	bne.n	8004d4a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d114      	bne.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d48:	e00f      	b.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d10a      	bne.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2208      	movs	r2, #8
 8004d58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff ff36 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	771a      	strb	r2, [r3, #28]
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d103      	bne.n	8004d9e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	771a      	strb	r2, [r3, #28]
 8004d9c:	e019      	b.n	8004dd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d103      	bne.n	8004db0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2202      	movs	r2, #2
 8004dac:	771a      	strb	r2, [r3, #28]
 8004dae:	e010      	b.n	8004dd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d103      	bne.n	8004dc2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	771a      	strb	r2, [r3, #28]
 8004dc0:	e007      	b.n	8004dd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d102      	bne.n	8004dd2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2208      	movs	r2, #8
 8004dd0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ff0c 	bl	8004bf0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	771a      	strb	r2, [r3, #28]
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a46      	ldr	r2, [pc, #280]	@ (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a43      	ldr	r2, [pc, #268]	@ (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a42      	ldr	r2, [pc, #264]	@ (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a41      	ldr	r2, [pc, #260]	@ (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a40      	ldr	r2, [pc, #256]	@ (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a35      	ldr	r2, [pc, #212]	@ (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a32      	ldr	r2, [pc, #200]	@ (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a31      	ldr	r2, [pc, #196]	@ (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	@ (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <TIM_Base_SetConfig+0x140>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <TIM_Base_SetConfig+0x144>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0x9a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f30 <TIM_Base_SetConfig+0x148>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a18      	ldr	r2, [pc, #96]	@ (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a17      	ldr	r2, [pc, #92]	@ (8004f28 <TIM_Base_SetConfig+0x140>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a16      	ldr	r2, [pc, #88]	@ (8004f2c <TIM_Base_SetConfig+0x144>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a15      	ldr	r2, [pc, #84]	@ (8004f30 <TIM_Base_SetConfig+0x148>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]
  }
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 0201 	bic.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0302 	bic.w	r3, r3, #2
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <TIM_OC1_SetConfig+0x10c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00f      	beq.n	8004fb4 <TIM_OC1_SetConfig+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <TIM_OC1_SetConfig+0x110>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_OC1_SetConfig+0x80>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <TIM_OC1_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_OC1_SetConfig+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a29      	ldr	r2, [pc, #164]	@ (800504c <TIM_OC1_SetConfig+0x118>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_OC1_SetConfig+0x80>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a28      	ldr	r2, [pc, #160]	@ (8005050 <TIM_OC1_SetConfig+0x11c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10c      	bne.n	8004fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0308 	bic.w	r3, r3, #8
 8004fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005040 <TIM_OC1_SetConfig+0x10c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xc2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8005044 <TIM_OC1_SetConfig+0x110>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xc2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	@ (8005048 <TIM_OC1_SetConfig+0x114>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xc2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <TIM_OC1_SetConfig+0x118>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xc2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a17      	ldr	r2, [pc, #92]	@ (8005050 <TIM_OC1_SetConfig+0x11c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f023 0210 	bic.w	r2, r3, #16
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0320 	bic.w	r3, r3, #32
 80050a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a28      	ldr	r2, [pc, #160]	@ (8005154 <TIM_OC2_SetConfig+0x100>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC2_SetConfig+0x6c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a27      	ldr	r2, [pc, #156]	@ (8005158 <TIM_OC2_SetConfig+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10d      	bne.n	80050dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <TIM_OC2_SetConfig+0x100>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_OC2_SetConfig+0xb0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <TIM_OC2_SetConfig+0x104>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_OC2_SetConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <TIM_OC2_SetConfig+0x108>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_OC2_SetConfig+0xb0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <TIM_OC2_SetConfig+0x10c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC2_SetConfig+0xb0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <TIM_OC2_SetConfig+0x110>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800510a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800

08005168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <TIM_OC3_SetConfig+0xfc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0x6a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a26      	ldr	r2, [pc, #152]	@ (8005268 <TIM_OC3_SetConfig+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10d      	bne.n	80051ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <TIM_OC3_SetConfig+0xfc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00f      	beq.n	8005216 <TIM_OC3_SetConfig+0xae>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <TIM_OC3_SetConfig+0x100>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_OC3_SetConfig+0xae>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1a      	ldr	r2, [pc, #104]	@ (800526c <TIM_OC3_SetConfig+0x104>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <TIM_OC3_SetConfig+0xae>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <TIM_OC3_SetConfig+0x108>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_OC3_SetConfig+0xae>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a18      	ldr	r2, [pc, #96]	@ (8005274 <TIM_OC3_SetConfig+0x10c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d113      	bne.n	800523e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800521c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <TIM_OC4_SetConfig+0xc0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_OC4_SetConfig+0x84>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a17      	ldr	r2, [pc, #92]	@ (800533c <TIM_OC4_SetConfig+0xc4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_OC4_SetConfig+0x84>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a16      	ldr	r2, [pc, #88]	@ (8005340 <TIM_OC4_SetConfig+0xc8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_OC4_SetConfig+0x84>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	@ (8005344 <TIM_OC4_SetConfig+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC4_SetConfig+0x84>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <TIM_OC4_SetConfig+0xd0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800

0800534c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <TIM_OC5_SetConfig+0xb4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_OC5_SetConfig+0x7a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <TIM_OC5_SetConfig+0xb8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_OC5_SetConfig+0x7a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a15      	ldr	r2, [pc, #84]	@ (8005408 <TIM_OC5_SetConfig+0xbc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_OC5_SetConfig+0x7a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <TIM_OC5_SetConfig+0xc0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC5_SetConfig+0x7a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <TIM_OC5_SetConfig+0xc4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d109      	bne.n	80053da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	051b      	lsls	r3, r3, #20
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <TIM_OC6_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00f      	beq.n	8005490 <TIM_OC6_SetConfig+0x7c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <TIM_OC6_SetConfig+0xbc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00b      	beq.n	8005490 <TIM_OC6_SetConfig+0x7c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <TIM_OC6_SetConfig+0xc0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d007      	beq.n	8005490 <TIM_OC6_SetConfig+0x7c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a15      	ldr	r2, [pc, #84]	@ (80054d8 <TIM_OC6_SetConfig+0xc4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC6_SetConfig+0x7c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a14      	ldr	r2, [pc, #80]	@ (80054dc <TIM_OC6_SetConfig+0xc8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d109      	bne.n	80054a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	029b      	lsls	r3, r3, #10
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40013400 	.word	0x40013400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800

080054e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550e:	f023 0307 	bic.w	r3, r3, #7
 8005512:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b70      	cmp	r3, #112	@ 0x70
 800552c:	d01a      	beq.n	8005564 <TIM_SlaveTimer_SetConfig+0x84>
 800552e:	2b70      	cmp	r3, #112	@ 0x70
 8005530:	d860      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 8005532:	2b60      	cmp	r3, #96	@ 0x60
 8005534:	d054      	beq.n	80055e0 <TIM_SlaveTimer_SetConfig+0x100>
 8005536:	2b60      	cmp	r3, #96	@ 0x60
 8005538:	d85c      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 800553a:	2b50      	cmp	r3, #80	@ 0x50
 800553c:	d046      	beq.n	80055cc <TIM_SlaveTimer_SetConfig+0xec>
 800553e:	2b50      	cmp	r3, #80	@ 0x50
 8005540:	d858      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 8005542:	2b40      	cmp	r3, #64	@ 0x40
 8005544:	d019      	beq.n	800557a <TIM_SlaveTimer_SetConfig+0x9a>
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	d854      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 800554a:	2b30      	cmp	r3, #48	@ 0x30
 800554c:	d055      	beq.n	80055fa <TIM_SlaveTimer_SetConfig+0x11a>
 800554e:	2b30      	cmp	r3, #48	@ 0x30
 8005550:	d850      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 8005552:	2b20      	cmp	r3, #32
 8005554:	d051      	beq.n	80055fa <TIM_SlaveTimer_SetConfig+0x11a>
 8005556:	2b20      	cmp	r3, #32
 8005558:	d84c      	bhi.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04d      	beq.n	80055fa <TIM_SlaveTimer_SetConfig+0x11a>
 800555e:	2b10      	cmp	r3, #16
 8005560:	d04b      	beq.n	80055fa <TIM_SlaveTimer_SetConfig+0x11a>
 8005562:	e047      	b.n	80055f4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005574:	f000 f9e6 	bl	8005944 <TIM_ETR_SetConfig>
      break;
 8005578:	e040      	b.n	80055fc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d101      	bne.n	8005586 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e03b      	b.n	80055fe <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
      break;
 80055ca:	e017      	b.n	80055fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d8:	461a      	mov	r2, r3
 80055da:	f000 f883 	bl	80056e4 <TIM_TI1_ConfigInputStage>
      break;
 80055de:	e00d      	b.n	80055fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ec:	461a      	mov	r2, r3
 80055ee:	f000 f8e5 	bl	80057bc <TIM_TI2_ConfigInputStage>
      break;
 80055f2:	e003      	b.n	80055fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
      break;
 80055f8:	e000      	b.n	80055fc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80055fa:	bf00      	nop
  }

  return status;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f023 0201 	bic.w	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a26      	ldr	r2, [pc, #152]	@ (80056cc <TIM_TI1_SetConfig+0xc4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d017      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563c:	d013      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a23      	ldr	r2, [pc, #140]	@ (80056d0 <TIM_TI1_SetConfig+0xc8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a22      	ldr	r2, [pc, #136]	@ (80056d4 <TIM_TI1_SetConfig+0xcc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a21      	ldr	r2, [pc, #132]	@ (80056d8 <TIM_TI1_SetConfig+0xd0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <TIM_TI1_SetConfig+0xd4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_TI1_SetConfig+0x5e>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a1f      	ldr	r2, [pc, #124]	@ (80056e0 <TIM_TI1_SetConfig+0xd8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <TIM_TI1_SetConfig+0x62>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <TIM_TI1_SetConfig+0x64>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0303 	bic.w	r3, r3, #3
 8005676:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e003      	b.n	800568a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	b2db      	uxtb	r3, r3
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f023 030a 	bic.w	r3, r3, #10
 80056a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f003 030a 	and.w	r3, r3, #10
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000

080056e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800570e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 030a 	bic.w	r3, r3, #10
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005742:	b480      	push	{r7}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0210 	bic.w	r2, r3, #16
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	b29b      	uxth	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0210 	bic.w	r2, r3, #16
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	031b      	lsls	r3, r3, #12
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	b2db      	uxtb	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800586c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	031b      	lsls	r3, r3, #12
 80058d8:	b29b      	uxth	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	031b      	lsls	r3, r3, #12
 80058ec:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	f043 0307 	orr.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800595e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	431a      	orrs	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	609a      	str	r2, [r3, #8]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2201      	movs	r2, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1a      	ldr	r2, [r3, #32]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1a      	ldr	r2, [r3, #32]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e068      	b.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2d      	ldr	r2, [pc, #180]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d108      	bne.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01d      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d018      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00e      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d009      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d004      	beq.n	8005a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a14      	ldr	r2, [pc, #80]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40014000 	.word	0x40014000

08005ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e040      	b.n	8005bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fb fdae 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	@ 0x24
 8005b48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb6a 	bl	800623c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8af 	bl	8005ccc <UART_SetConfig>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e01b      	b.n	8005bb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fbe9 	bl	8006380 <UART_CheckIdleState>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	@ 0x28
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d177      	bne.n	8005cc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_UART_Transmit+0x24>
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e070      	b.n	8005cc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2221      	movs	r2, #33	@ 0x21
 8005bec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bee:	f7fb feeb 	bl	80019c8 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0c:	d108      	bne.n	8005c20 <HAL_UART_Transmit+0x68>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	e003      	b.n	8005c28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c28:	e02f      	b.n	8005c8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	@ 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fc4b 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e03b      	b.n	8005cc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	881a      	ldrh	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3302      	adds	r3, #2
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e007      	b.n	8005c78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1c9      	bne.n	8005c2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2140      	movs	r1, #64	@ 0x40
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fc15 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e005      	b.n	8005cc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd0:	b08a      	sub	sp, #40	@ 0x28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	@ (8005f8c <UART_SetConfig+0x2c0>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a99      	ldr	r2, [pc, #612]	@ (8005f90 <UART_SetConfig+0x2c4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	4313      	orrs	r3, r2
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <UART_SetConfig+0x2c8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d126      	bne.n	8005da4 <UART_SetConfig+0xd8>
 8005d56:	4b90      	ldr	r3, [pc, #576]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d81b      	bhi.n	8005d9c <UART_SetConfig+0xd0>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0xa0>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e116      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e112      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e10e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e10a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e106      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7c      	ldr	r2, [pc, #496]	@ (8005f9c <UART_SetConfig+0x2d0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d138      	bne.n	8005e20 <UART_SetConfig+0x154>
 8005dae:	4b7a      	ldr	r3, [pc, #488]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d82d      	bhi.n	8005e18 <UART_SetConfig+0x14c>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0xf8>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e0d8      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e0d4      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e0d0      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e0cc      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1e:	e0c8      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa0 <UART_SetConfig+0x2d4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d125      	bne.n	8005e76 <UART_SetConfig+0x1aa>
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d016      	beq.n	8005e66 <UART_SetConfig+0x19a>
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d818      	bhi.n	8005e6e <UART_SetConfig+0x1a2>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d00a      	beq.n	8005e56 <UART_SetConfig+0x18a>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d814      	bhi.n	8005e6e <UART_SetConfig+0x1a2>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <UART_SetConfig+0x182>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d008      	beq.n	8005e5e <UART_SetConfig+0x192>
 8005e4c:	e00f      	b.n	8005e6e <UART_SetConfig+0x1a2>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e54:	e0ad      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e56:	2302      	movs	r3, #2
 8005e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5c:	e0a9      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e64:	e0a5      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e66:	2308      	movs	r3, #8
 8005e68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6c:	e0a1      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e74:	e09d      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <UART_SetConfig+0x2d8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d125      	bne.n	8005ecc <UART_SetConfig+0x200>
 8005e80:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e8c:	d016      	beq.n	8005ebc <UART_SetConfig+0x1f0>
 8005e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e90:	d818      	bhi.n	8005ec4 <UART_SetConfig+0x1f8>
 8005e92:	2b80      	cmp	r3, #128	@ 0x80
 8005e94:	d00a      	beq.n	8005eac <UART_SetConfig+0x1e0>
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d814      	bhi.n	8005ec4 <UART_SetConfig+0x1f8>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1d8>
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x1e8>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x1f8>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e082      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e07e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eba:	e07a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e076      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e072      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <UART_SetConfig+0x2dc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d12a      	bne.n	8005f2c <UART_SetConfig+0x260>
 8005ed6:	4b30      	ldr	r3, [pc, #192]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee4:	d01a      	beq.n	8005f1c <UART_SetConfig+0x250>
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eea:	d81b      	bhi.n	8005f24 <UART_SetConfig+0x258>
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef0:	d00c      	beq.n	8005f0c <UART_SetConfig+0x240>
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef6:	d815      	bhi.n	8005f24 <UART_SetConfig+0x258>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <UART_SetConfig+0x238>
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f00:	d008      	beq.n	8005f14 <UART_SetConfig+0x248>
 8005f02:	e00f      	b.n	8005f24 <UART_SetConfig+0x258>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e052      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e04e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1a:	e04a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f22:	e046      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2a:	e042      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <UART_SetConfig+0x2c4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d13a      	bne.n	8005fac <UART_SetConfig+0x2e0>
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f44:	d01a      	beq.n	8005f7c <UART_SetConfig+0x2b0>
 8005f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4a:	d81b      	bhi.n	8005f84 <UART_SetConfig+0x2b8>
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d00c      	beq.n	8005f6c <UART_SetConfig+0x2a0>
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f56:	d815      	bhi.n	8005f84 <UART_SetConfig+0x2b8>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <UART_SetConfig+0x298>
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d008      	beq.n	8005f74 <UART_SetConfig+0x2a8>
 8005f62:	e00f      	b.n	8005f84 <UART_SetConfig+0x2b8>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6a:	e022      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f72:	e01e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f7a:	e01a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f82:	e016      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8a:	e012      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f8c:	efff69f3 	.word	0xefff69f3
 8005f90:	40008000 	.word	0x40008000
 8005f94:	40013800 	.word	0x40013800
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40004400 	.word	0x40004400
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a9f      	ldr	r2, [pc, #636]	@ (8006234 <UART_SetConfig+0x568>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d17a      	bne.n	80060b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d824      	bhi.n	800600e <UART_SetConfig+0x342>
 8005fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x300>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	08005fff 	.word	0x08005fff
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	0800600f 	.word	0x0800600f
 8005fec:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fc ff92 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	61f8      	str	r0, [r7, #28]
        break;
 8005ff6:	e010      	b.n	800601a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8006238 <UART_SetConfig+0x56c>)
 8005ffa:	61fb      	str	r3, [r7, #28]
        break;
 8005ffc:	e00d      	b.n	800601a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fc fef3 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8006002:	61f8      	str	r0, [r7, #28]
        break;
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800600a:	61fb      	str	r3, [r7, #28]
        break;
 800600c:	e005      	b.n	800601a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80fb 	beq.w	8006218 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	429a      	cmp	r2, r3
 8006030:	d305      	bcc.n	800603e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006044:	e0e8      	b.n	8006218 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2200      	movs	r2, #0
 800604a:	461c      	mov	r4, r3
 800604c:	4615      	mov	r5, r2
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	022b      	lsls	r3, r5, #8
 8006058:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800605c:	0222      	lsls	r2, r4, #8
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	6849      	ldr	r1, [r1, #4]
 8006062:	0849      	lsrs	r1, r1, #1
 8006064:	2000      	movs	r0, #0
 8006066:	4688      	mov	r8, r1
 8006068:	4681      	mov	r9, r0
 800606a:	eb12 0a08 	adds.w	sl, r2, r8
 800606e:	eb43 0b09 	adc.w	fp, r3, r9
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006080:	4650      	mov	r0, sl
 8006082:	4659      	mov	r1, fp
 8006084:	f7fa f8f4 	bl	8000270 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006096:	d308      	bcc.n	80060aa <UART_SetConfig+0x3de>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800609e:	d204      	bcs.n	80060aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e0b6      	b.n	8006218 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060b0:	e0b2      	b.n	8006218 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d15e      	bne.n	800617a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d828      	bhi.n	8006116 <UART_SetConfig+0x44a>
 80060c4:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <UART_SetConfig+0x400>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	08006101 	.word	0x08006101
 80060d8:	08006117 	.word	0x08006117
 80060dc:	08006107 	.word	0x08006107
 80060e0:	08006117 	.word	0x08006117
 80060e4:	08006117 	.word	0x08006117
 80060e8:	08006117 	.word	0x08006117
 80060ec:	0800610f 	.word	0x0800610f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f0:	f7fc ff12 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80060f4:	61f8      	str	r0, [r7, #28]
        break;
 80060f6:	e014      	b.n	8006122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f8:	f7fc ff24 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 80060fc:	61f8      	str	r0, [r7, #28]
        break;
 80060fe:	e010      	b.n	8006122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006100:	4b4d      	ldr	r3, [pc, #308]	@ (8006238 <UART_SetConfig+0x56c>)
 8006102:	61fb      	str	r3, [r7, #28]
        break;
 8006104:	e00d      	b.n	8006122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006106:	f7fc fe6f 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 800610a:	61f8      	str	r0, [r7, #28]
        break;
 800610c:	e009      	b.n	8006122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006112:	61fb      	str	r3, [r7, #28]
        break;
 8006114:	e005      	b.n	8006122 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d077      	beq.n	8006218 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	005a      	lsls	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	441a      	add	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d916      	bls.n	8006172 <UART_SetConfig+0x4a6>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614a:	d212      	bcs.n	8006172 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f023 030f 	bic.w	r3, r3, #15
 8006154:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	b29b      	uxth	r3, r3
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	b29a      	uxth	r2, r3
 8006162:	8afb      	ldrh	r3, [r7, #22]
 8006164:	4313      	orrs	r3, r2
 8006166:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	8afa      	ldrh	r2, [r7, #22]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e052      	b.n	8006218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006178:	e04e      	b.n	8006218 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800617a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800617e:	2b08      	cmp	r3, #8
 8006180:	d827      	bhi.n	80061d2 <UART_SetConfig+0x506>
 8006182:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0x4bc>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061b5 	.word	0x080061b5
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061d3 	.word	0x080061d3
 8006198:	080061c3 	.word	0x080061c3
 800619c:	080061d3 	.word	0x080061d3
 80061a0:	080061d3 	.word	0x080061d3
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061cb 	.word	0x080061cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fc feb4 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80061b0:	61f8      	str	r0, [r7, #28]
        break;
 80061b2:	e014      	b.n	80061de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7fc fec6 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 80061b8:	61f8      	str	r0, [r7, #28]
        break;
 80061ba:	e010      	b.n	80061de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006238 <UART_SetConfig+0x56c>)
 80061be:	61fb      	str	r3, [r7, #28]
        break;
 80061c0:	e00d      	b.n	80061de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c2:	f7fc fe11 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 80061c6:	61f8      	str	r0, [r7, #28]
        break;
 80061c8:	e009      	b.n	80061de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ce:	61fb      	str	r3, [r7, #28]
        break;
 80061d0:	e005      	b.n	80061de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061dc:	bf00      	nop
    }

    if (pclk != 0U)
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	085a      	lsrs	r2, r3, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b0f      	cmp	r3, #15
 80061fc:	d909      	bls.n	8006212 <UART_SetConfig+0x546>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d205      	bcs.n	8006212 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60da      	str	r2, [r3, #12]
 8006210:	e002      	b.n	8006218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006224:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006228:	4618      	mov	r0, r3
 800622a:	3728      	adds	r7, #40	@ 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006232:	bf00      	nop
 8006234:	40008000 	.word	0x40008000
 8006238:	00f42400 	.word	0x00f42400

0800623c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633a:	d10a      	bne.n	8006352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b098      	sub	sp, #96	@ 0x60
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006390:	f7fb fb1a 	bl	80019c8 <HAL_GetTick>
 8006394:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d12e      	bne.n	8006402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f88c 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d021      	beq.n	8006402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e062      	b.n	80064c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d149      	bne.n	80064a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f856 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d03c      	beq.n	80064a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	623b      	str	r3, [r7, #32]
   return(result);
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
 800644a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60fb      	str	r3, [r7, #12]
   return(result);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647c:	61fa      	str	r2, [r7, #28]
 800647e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	617b      	str	r3, [r7, #20]
   return(result);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e011      	b.n	80064c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3758      	adds	r7, #88	@ 0x58
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	e04f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d04b      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fb fa6d 	bl	80019c8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e04e      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d037      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b80      	cmp	r3, #128	@ 0x80
 8006516:	d034      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d031      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d110      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2208      	movs	r2, #8
 8006532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f838 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2208      	movs	r2, #8
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e029      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655c:	d111      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f81e 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e00f      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0a0      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b095      	sub	sp, #84	@ 0x54
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800660a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661c:	2b01      	cmp	r3, #1
 800661e:	d118      	bne.n	8006652 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	60bb      	str	r3, [r7, #8]
   return(result);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0310 	bic.w	r3, r3, #16
 8006634:	647b      	str	r3, [r7, #68]	@ 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	613b      	str	r3, [r7, #16]
   return(result);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006666:	bf00      	nop
 8006668:	3754      	adds	r7, #84	@ 0x54
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <rand>:
 8006674:	4b16      	ldr	r3, [pc, #88]	@ (80066d0 <rand+0x5c>)
 8006676:	b510      	push	{r4, lr}
 8006678:	681c      	ldr	r4, [r3, #0]
 800667a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800667c:	b9b3      	cbnz	r3, 80066ac <rand+0x38>
 800667e:	2018      	movs	r0, #24
 8006680:	f000 fa20 	bl	8006ac4 <malloc>
 8006684:	4602      	mov	r2, r0
 8006686:	6320      	str	r0, [r4, #48]	@ 0x30
 8006688:	b920      	cbnz	r0, 8006694 <rand+0x20>
 800668a:	4b12      	ldr	r3, [pc, #72]	@ (80066d4 <rand+0x60>)
 800668c:	4812      	ldr	r0, [pc, #72]	@ (80066d8 <rand+0x64>)
 800668e:	2152      	movs	r1, #82	@ 0x52
 8006690:	f000 f9b0 	bl	80069f4 <__assert_func>
 8006694:	4911      	ldr	r1, [pc, #68]	@ (80066dc <rand+0x68>)
 8006696:	4b12      	ldr	r3, [pc, #72]	@ (80066e0 <rand+0x6c>)
 8006698:	e9c0 1300 	strd	r1, r3, [r0]
 800669c:	4b11      	ldr	r3, [pc, #68]	@ (80066e4 <rand+0x70>)
 800669e:	6083      	str	r3, [r0, #8]
 80066a0:	230b      	movs	r3, #11
 80066a2:	8183      	strh	r3, [r0, #12]
 80066a4:	2100      	movs	r1, #0
 80066a6:	2001      	movs	r0, #1
 80066a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80066ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066ae:	480e      	ldr	r0, [pc, #56]	@ (80066e8 <rand+0x74>)
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	694c      	ldr	r4, [r1, #20]
 80066b4:	4a0d      	ldr	r2, [pc, #52]	@ (80066ec <rand+0x78>)
 80066b6:	4358      	muls	r0, r3
 80066b8:	fb02 0004 	mla	r0, r2, r4, r0
 80066bc:	fba3 3202 	umull	r3, r2, r3, r2
 80066c0:	3301      	adds	r3, #1
 80066c2:	eb40 0002 	adc.w	r0, r0, r2
 80066c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80066ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80066ce:	bd10      	pop	{r4, pc}
 80066d0:	2000001c 	.word	0x2000001c
 80066d4:	08007790 	.word	0x08007790
 80066d8:	080077a7 	.word	0x080077a7
 80066dc:	abcd330e 	.word	0xabcd330e
 80066e0:	e66d1234 	.word	0xe66d1234
 80066e4:	0005deec 	.word	0x0005deec
 80066e8:	5851f42d 	.word	0x5851f42d
 80066ec:	4c957f2d 	.word	0x4c957f2d

080066f0 <std>:
 80066f0:	2300      	movs	r3, #0
 80066f2:	b510      	push	{r4, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	e9c0 3300 	strd	r3, r3, [r0]
 80066fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066fe:	6083      	str	r3, [r0, #8]
 8006700:	8181      	strh	r1, [r0, #12]
 8006702:	6643      	str	r3, [r0, #100]	@ 0x64
 8006704:	81c2      	strh	r2, [r0, #14]
 8006706:	6183      	str	r3, [r0, #24]
 8006708:	4619      	mov	r1, r3
 800670a:	2208      	movs	r2, #8
 800670c:	305c      	adds	r0, #92	@ 0x5c
 800670e:	f000 f8f4 	bl	80068fa <memset>
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <std+0x58>)
 8006714:	6263      	str	r3, [r4, #36]	@ 0x24
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x5c>)
 8006718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x60>)
 800671c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x64>)
 8006720:	6323      	str	r3, [r4, #48]	@ 0x30
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x68>)
 8006724:	6224      	str	r4, [r4, #32]
 8006726:	429c      	cmp	r4, r3
 8006728:	d006      	beq.n	8006738 <std+0x48>
 800672a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800672e:	4294      	cmp	r4, r2
 8006730:	d002      	beq.n	8006738 <std+0x48>
 8006732:	33d0      	adds	r3, #208	@ 0xd0
 8006734:	429c      	cmp	r4, r3
 8006736:	d105      	bne.n	8006744 <std+0x54>
 8006738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006740:	f000 b954 	b.w	80069ec <__retarget_lock_init_recursive>
 8006744:	bd10      	pop	{r4, pc}
 8006746:	bf00      	nop
 8006748:	08006875 	.word	0x08006875
 800674c:	08006897 	.word	0x08006897
 8006750:	080068cf 	.word	0x080068cf
 8006754:	080068f3 	.word	0x080068f3
 8006758:	200002e8 	.word	0x200002e8

0800675c <stdio_exit_handler>:
 800675c:	4a02      	ldr	r2, [pc, #8]	@ (8006768 <stdio_exit_handler+0xc>)
 800675e:	4903      	ldr	r1, [pc, #12]	@ (800676c <stdio_exit_handler+0x10>)
 8006760:	4803      	ldr	r0, [pc, #12]	@ (8006770 <stdio_exit_handler+0x14>)
 8006762:	f000 b869 	b.w	8006838 <_fwalk_sglue>
 8006766:	bf00      	nop
 8006768:	20000010 	.word	0x20000010
 800676c:	08006d39 	.word	0x08006d39
 8006770:	20000020 	.word	0x20000020

08006774 <cleanup_stdio>:
 8006774:	6841      	ldr	r1, [r0, #4]
 8006776:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <cleanup_stdio+0x34>)
 8006778:	4299      	cmp	r1, r3
 800677a:	b510      	push	{r4, lr}
 800677c:	4604      	mov	r4, r0
 800677e:	d001      	beq.n	8006784 <cleanup_stdio+0x10>
 8006780:	f000 fada 	bl	8006d38 <_fflush_r>
 8006784:	68a1      	ldr	r1, [r4, #8]
 8006786:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <cleanup_stdio+0x38>)
 8006788:	4299      	cmp	r1, r3
 800678a:	d002      	beq.n	8006792 <cleanup_stdio+0x1e>
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fad3 	bl	8006d38 <_fflush_r>
 8006792:	68e1      	ldr	r1, [r4, #12]
 8006794:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <cleanup_stdio+0x3c>)
 8006796:	4299      	cmp	r1, r3
 8006798:	d004      	beq.n	80067a4 <cleanup_stdio+0x30>
 800679a:	4620      	mov	r0, r4
 800679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a0:	f000 baca 	b.w	8006d38 <_fflush_r>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	bf00      	nop
 80067a8:	200002e8 	.word	0x200002e8
 80067ac:	20000350 	.word	0x20000350
 80067b0:	200003b8 	.word	0x200003b8

080067b4 <global_stdio_init.part.0>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <global_stdio_init.part.0+0x30>)
 80067b8:	4c0b      	ldr	r4, [pc, #44]	@ (80067e8 <global_stdio_init.part.0+0x34>)
 80067ba:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <global_stdio_init.part.0+0x38>)
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	4620      	mov	r0, r4
 80067c0:	2200      	movs	r2, #0
 80067c2:	2104      	movs	r1, #4
 80067c4:	f7ff ff94 	bl	80066f0 <std>
 80067c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067cc:	2201      	movs	r2, #1
 80067ce:	2109      	movs	r1, #9
 80067d0:	f7ff ff8e 	bl	80066f0 <std>
 80067d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067d8:	2202      	movs	r2, #2
 80067da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067de:	2112      	movs	r1, #18
 80067e0:	f7ff bf86 	b.w	80066f0 <std>
 80067e4:	20000420 	.word	0x20000420
 80067e8:	200002e8 	.word	0x200002e8
 80067ec:	0800675d 	.word	0x0800675d

080067f0 <__sfp_lock_acquire>:
 80067f0:	4801      	ldr	r0, [pc, #4]	@ (80067f8 <__sfp_lock_acquire+0x8>)
 80067f2:	f000 b8fc 	b.w	80069ee <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000429 	.word	0x20000429

080067fc <__sfp_lock_release>:
 80067fc:	4801      	ldr	r0, [pc, #4]	@ (8006804 <__sfp_lock_release+0x8>)
 80067fe:	f000 b8f7 	b.w	80069f0 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20000429 	.word	0x20000429

08006808 <__sinit>:
 8006808:	b510      	push	{r4, lr}
 800680a:	4604      	mov	r4, r0
 800680c:	f7ff fff0 	bl	80067f0 <__sfp_lock_acquire>
 8006810:	6a23      	ldr	r3, [r4, #32]
 8006812:	b11b      	cbz	r3, 800681c <__sinit+0x14>
 8006814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006818:	f7ff bff0 	b.w	80067fc <__sfp_lock_release>
 800681c:	4b04      	ldr	r3, [pc, #16]	@ (8006830 <__sinit+0x28>)
 800681e:	6223      	str	r3, [r4, #32]
 8006820:	4b04      	ldr	r3, [pc, #16]	@ (8006834 <__sinit+0x2c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f5      	bne.n	8006814 <__sinit+0xc>
 8006828:	f7ff ffc4 	bl	80067b4 <global_stdio_init.part.0>
 800682c:	e7f2      	b.n	8006814 <__sinit+0xc>
 800682e:	bf00      	nop
 8006830:	08006775 	.word	0x08006775
 8006834:	20000420 	.word	0x20000420

08006838 <_fwalk_sglue>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	4607      	mov	r7, r0
 800683e:	4688      	mov	r8, r1
 8006840:	4614      	mov	r4, r2
 8006842:	2600      	movs	r6, #0
 8006844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006848:	f1b9 0901 	subs.w	r9, r9, #1
 800684c:	d505      	bpl.n	800685a <_fwalk_sglue+0x22>
 800684e:	6824      	ldr	r4, [r4, #0]
 8006850:	2c00      	cmp	r4, #0
 8006852:	d1f7      	bne.n	8006844 <_fwalk_sglue+0xc>
 8006854:	4630      	mov	r0, r6
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d907      	bls.n	8006870 <_fwalk_sglue+0x38>
 8006860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006864:	3301      	adds	r3, #1
 8006866:	d003      	beq.n	8006870 <_fwalk_sglue+0x38>
 8006868:	4629      	mov	r1, r5
 800686a:	4638      	mov	r0, r7
 800686c:	47c0      	blx	r8
 800686e:	4306      	orrs	r6, r0
 8006870:	3568      	adds	r5, #104	@ 0x68
 8006872:	e7e9      	b.n	8006848 <_fwalk_sglue+0x10>

08006874 <__sread>:
 8006874:	b510      	push	{r4, lr}
 8006876:	460c      	mov	r4, r1
 8006878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687c:	f000 f868 	bl	8006950 <_read_r>
 8006880:	2800      	cmp	r0, #0
 8006882:	bfab      	itete	ge
 8006884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006886:	89a3      	ldrhlt	r3, [r4, #12]
 8006888:	181b      	addge	r3, r3, r0
 800688a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800688e:	bfac      	ite	ge
 8006890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006892:	81a3      	strhlt	r3, [r4, #12]
 8006894:	bd10      	pop	{r4, pc}

08006896 <__swrite>:
 8006896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689a:	461f      	mov	r7, r3
 800689c:	898b      	ldrh	r3, [r1, #12]
 800689e:	05db      	lsls	r3, r3, #23
 80068a0:	4605      	mov	r5, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	4616      	mov	r6, r2
 80068a6:	d505      	bpl.n	80068b4 <__swrite+0x1e>
 80068a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ac:	2302      	movs	r3, #2
 80068ae:	2200      	movs	r2, #0
 80068b0:	f000 f83c 	bl	800692c <_lseek_r>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	4632      	mov	r2, r6
 80068c2:	463b      	mov	r3, r7
 80068c4:	4628      	mov	r0, r5
 80068c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ca:	f000 b853 	b.w	8006974 <_write_r>

080068ce <__sseek>:
 80068ce:	b510      	push	{r4, lr}
 80068d0:	460c      	mov	r4, r1
 80068d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d6:	f000 f829 	bl	800692c <_lseek_r>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	bf15      	itete	ne
 80068e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068ea:	81a3      	strheq	r3, [r4, #12]
 80068ec:	bf18      	it	ne
 80068ee:	81a3      	strhne	r3, [r4, #12]
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <__sclose>:
 80068f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f6:	f000 b809 	b.w	800690c <_close_r>

080068fa <memset>:
 80068fa:	4402      	add	r2, r0
 80068fc:	4603      	mov	r3, r0
 80068fe:	4293      	cmp	r3, r2
 8006900:	d100      	bne.n	8006904 <memset+0xa>
 8006902:	4770      	bx	lr
 8006904:	f803 1b01 	strb.w	r1, [r3], #1
 8006908:	e7f9      	b.n	80068fe <memset+0x4>
	...

0800690c <_close_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d06      	ldr	r5, [pc, #24]	@ (8006928 <_close_r+0x1c>)
 8006910:	2300      	movs	r3, #0
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	f7fa fc4e 	bl	80011b8 <_close>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_close_r+0x1a>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_close_r+0x1a>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000424 	.word	0x20000424

0800692c <_lseek_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	@ (800694c <_lseek_r+0x20>)
 8006930:	4604      	mov	r4, r0
 8006932:	4608      	mov	r0, r1
 8006934:	4611      	mov	r1, r2
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fa fc63 	bl	8001206 <_lseek>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_lseek_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_lseek_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000424 	.word	0x20000424

08006950 <_read_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	@ (8006970 <_read_r+0x20>)
 8006954:	4604      	mov	r4, r0
 8006956:	4608      	mov	r0, r1
 8006958:	4611      	mov	r1, r2
 800695a:	2200      	movs	r2, #0
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f7fa fbf1 	bl	8001146 <_read>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_read_r+0x1e>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_read_r+0x1e>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000424 	.word	0x20000424

08006974 <_write_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d07      	ldr	r5, [pc, #28]	@ (8006994 <_write_r+0x20>)
 8006978:	4604      	mov	r4, r0
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	2200      	movs	r2, #0
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fa fbfc 	bl	8001180 <_write>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_write_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_write_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000424 	.word	0x20000424

08006998 <__errno>:
 8006998:	4b01      	ldr	r3, [pc, #4]	@ (80069a0 <__errno+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	2000001c 	.word	0x2000001c

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	@ (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	@ (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	@ (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	@ (80069e8 <__libc_init_array+0x44>)
 80069b8:	f000 fe3a 	bl	8007630 <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08007878 	.word	0x08007878
 80069e0:	08007878 	.word	0x08007878
 80069e4:	08007878 	.word	0x08007878
 80069e8:	0800787c 	.word	0x0800787c

080069ec <__retarget_lock_init_recursive>:
 80069ec:	4770      	bx	lr

080069ee <__retarget_lock_acquire_recursive>:
 80069ee:	4770      	bx	lr

080069f0 <__retarget_lock_release_recursive>:
 80069f0:	4770      	bx	lr
	...

080069f4 <__assert_func>:
 80069f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069f6:	4614      	mov	r4, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <__assert_func+0x2c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4605      	mov	r5, r0
 8006a00:	68d8      	ldr	r0, [r3, #12]
 8006a02:	b954      	cbnz	r4, 8006a1a <__assert_func+0x26>
 8006a04:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <__assert_func+0x30>)
 8006a06:	461c      	mov	r4, r3
 8006a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a0c:	9100      	str	r1, [sp, #0]
 8006a0e:	462b      	mov	r3, r5
 8006a10:	4905      	ldr	r1, [pc, #20]	@ (8006a28 <__assert_func+0x34>)
 8006a12:	f000 f9b9 	bl	8006d88 <fiprintf>
 8006a16:	f000 f9d9 	bl	8006dcc <abort>
 8006a1a:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <__assert_func+0x38>)
 8006a1c:	e7f4      	b.n	8006a08 <__assert_func+0x14>
 8006a1e:	bf00      	nop
 8006a20:	2000001c 	.word	0x2000001c
 8006a24:	0800783a 	.word	0x0800783a
 8006a28:	0800780c 	.word	0x0800780c
 8006a2c:	080077ff 	.word	0x080077ff

08006a30 <_free_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4605      	mov	r5, r0
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d041      	beq.n	8006abc <_free_r+0x8c>
 8006a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3c:	1f0c      	subs	r4, r1, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bfb8      	it	lt
 8006a42:	18e4      	addlt	r4, r4, r3
 8006a44:	f000 f8e8 	bl	8006c18 <__malloc_lock>
 8006a48:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac0 <_free_r+0x90>)
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	b933      	cbnz	r3, 8006a5c <_free_r+0x2c>
 8006a4e:	6063      	str	r3, [r4, #4]
 8006a50:	6014      	str	r4, [r2, #0]
 8006a52:	4628      	mov	r0, r5
 8006a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a58:	f000 b8e4 	b.w	8006c24 <__malloc_unlock>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d908      	bls.n	8006a72 <_free_r+0x42>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	1821      	adds	r1, r4, r0
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf01      	itttt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	1809      	addeq	r1, r1, r0
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	e7ed      	b.n	8006a4e <_free_r+0x1e>
 8006a72:	461a      	mov	r2, r3
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b10b      	cbz	r3, 8006a7c <_free_r+0x4c>
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d9fa      	bls.n	8006a72 <_free_r+0x42>
 8006a7c:	6811      	ldr	r1, [r2, #0]
 8006a7e:	1850      	adds	r0, r2, r1
 8006a80:	42a0      	cmp	r0, r4
 8006a82:	d10b      	bne.n	8006a9c <_free_r+0x6c>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	4401      	add	r1, r0
 8006a88:	1850      	adds	r0, r2, r1
 8006a8a:	4283      	cmp	r3, r0
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	d1e0      	bne.n	8006a52 <_free_r+0x22>
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	6053      	str	r3, [r2, #4]
 8006a96:	4408      	add	r0, r1
 8006a98:	6010      	str	r0, [r2, #0]
 8006a9a:	e7da      	b.n	8006a52 <_free_r+0x22>
 8006a9c:	d902      	bls.n	8006aa4 <_free_r+0x74>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	e7d6      	b.n	8006a52 <_free_r+0x22>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	1821      	adds	r1, r4, r0
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf04      	itt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	bf04      	itt	eq
 8006ab4:	1809      	addeq	r1, r1, r0
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	6054      	str	r4, [r2, #4]
 8006aba:	e7ca      	b.n	8006a52 <_free_r+0x22>
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000430 	.word	0x20000430

08006ac4 <malloc>:
 8006ac4:	4b02      	ldr	r3, [pc, #8]	@ (8006ad0 <malloc+0xc>)
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	f000 b825 	b.w	8006b18 <_malloc_r>
 8006ace:	bf00      	nop
 8006ad0:	2000001c 	.word	0x2000001c

08006ad4 <sbrk_aligned>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b14 <sbrk_aligned+0x40>)
 8006ad8:	460c      	mov	r4, r1
 8006ada:	6831      	ldr	r1, [r6, #0]
 8006adc:	4605      	mov	r5, r0
 8006ade:	b911      	cbnz	r1, 8006ae6 <sbrk_aligned+0x12>
 8006ae0:	f000 f964 	bl	8006dac <_sbrk_r>
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f95f 	bl	8006dac <_sbrk_r>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d103      	bne.n	8006afa <sbrk_aligned+0x26>
 8006af2:	f04f 34ff 	mov.w	r4, #4294967295
 8006af6:	4620      	mov	r0, r4
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d0f8      	beq.n	8006af6 <sbrk_aligned+0x22>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 f950 	bl	8006dac <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d1f2      	bne.n	8006af6 <sbrk_aligned+0x22>
 8006b10:	e7ef      	b.n	8006af2 <sbrk_aligned+0x1e>
 8006b12:	bf00      	nop
 8006b14:	2000042c 	.word	0x2000042c

08006b18 <_malloc_r>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	1ccd      	adds	r5, r1, #3
 8006b1e:	f025 0503 	bic.w	r5, r5, #3
 8006b22:	3508      	adds	r5, #8
 8006b24:	2d0c      	cmp	r5, #12
 8006b26:	bf38      	it	cc
 8006b28:	250c      	movcc	r5, #12
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	db01      	blt.n	8006b34 <_malloc_r+0x1c>
 8006b30:	42a9      	cmp	r1, r5
 8006b32:	d904      	bls.n	8006b3e <_malloc_r+0x26>
 8006b34:	230c      	movs	r3, #12
 8006b36:	6033      	str	r3, [r6, #0]
 8006b38:	2000      	movs	r0, #0
 8006b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c14 <_malloc_r+0xfc>
 8006b42:	f000 f869 	bl	8006c18 <__malloc_lock>
 8006b46:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	bb44      	cbnz	r4, 8006ba0 <_malloc_r+0x88>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffbf 	bl	8006ad4 <sbrk_aligned>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	4604      	mov	r4, r0
 8006b5a:	d158      	bne.n	8006c0e <_malloc_r+0xf6>
 8006b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b60:	4627      	mov	r7, r4
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	d143      	bne.n	8006bee <_malloc_r+0xd6>
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	d04b      	beq.n	8006c02 <_malloc_r+0xea>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4630      	mov	r0, r6
 8006b70:	eb04 0903 	add.w	r9, r4, r3
 8006b74:	f000 f91a 	bl	8006dac <_sbrk_r>
 8006b78:	4581      	cmp	r9, r0
 8006b7a:	d142      	bne.n	8006c02 <_malloc_r+0xea>
 8006b7c:	6821      	ldr	r1, [r4, #0]
 8006b7e:	1a6d      	subs	r5, r5, r1
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ffa6 	bl	8006ad4 <sbrk_aligned>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d03a      	beq.n	8006c02 <_malloc_r+0xea>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	442b      	add	r3, r5
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	f8d8 3000 	ldr.w	r3, [r8]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	bb62      	cbnz	r2, 8006bf4 <_malloc_r+0xdc>
 8006b9a:	f8c8 7000 	str.w	r7, [r8]
 8006b9e:	e00f      	b.n	8006bc0 <_malloc_r+0xa8>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	1b52      	subs	r2, r2, r5
 8006ba4:	d420      	bmi.n	8006be8 <_malloc_r+0xd0>
 8006ba6:	2a0b      	cmp	r2, #11
 8006ba8:	d917      	bls.n	8006bda <_malloc_r+0xc2>
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	bf18      	it	ne
 8006bb2:	6059      	strne	r1, [r3, #4]
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	bf08      	it	eq
 8006bb8:	f8c8 1000 	streq.w	r1, [r8]
 8006bbc:	5162      	str	r2, [r4, r5]
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f82f 	bl	8006c24 <__malloc_unlock>
 8006bc6:	f104 000b 	add.w	r0, r4, #11
 8006bca:	1d23      	adds	r3, r4, #4
 8006bcc:	f020 0007 	bic.w	r0, r0, #7
 8006bd0:	1ac2      	subs	r2, r0, r3
 8006bd2:	bf1c      	itt	ne
 8006bd4:	1a1b      	subne	r3, r3, r0
 8006bd6:	50a3      	strne	r3, [r4, r2]
 8006bd8:	e7af      	b.n	8006b3a <_malloc_r+0x22>
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	bf0c      	ite	eq
 8006be0:	f8c8 2000 	streq.w	r2, [r8]
 8006be4:	605a      	strne	r2, [r3, #4]
 8006be6:	e7eb      	b.n	8006bc0 <_malloc_r+0xa8>
 8006be8:	4623      	mov	r3, r4
 8006bea:	6864      	ldr	r4, [r4, #4]
 8006bec:	e7ae      	b.n	8006b4c <_malloc_r+0x34>
 8006bee:	463c      	mov	r4, r7
 8006bf0:	687f      	ldr	r7, [r7, #4]
 8006bf2:	e7b6      	b.n	8006b62 <_malloc_r+0x4a>
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d1fb      	bne.n	8006bf4 <_malloc_r+0xdc>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	e7de      	b.n	8006bc0 <_malloc_r+0xa8>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 f80c 	bl	8006c24 <__malloc_unlock>
 8006c0c:	e794      	b.n	8006b38 <_malloc_r+0x20>
 8006c0e:	6005      	str	r5, [r0, #0]
 8006c10:	e7d6      	b.n	8006bc0 <_malloc_r+0xa8>
 8006c12:	bf00      	nop
 8006c14:	20000430 	.word	0x20000430

08006c18 <__malloc_lock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__malloc_lock+0x8>)
 8006c1a:	f7ff bee8 	b.w	80069ee <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000428 	.word	0x20000428

08006c24 <__malloc_unlock>:
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <__malloc_unlock+0x8>)
 8006c26:	f7ff bee3 	b.w	80069f0 <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20000428 	.word	0x20000428

08006c30 <__sflush_r>:
 8006c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	0716      	lsls	r6, r2, #28
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	d454      	bmi.n	8006cea <__sflush_r+0xba>
 8006c40:	684b      	ldr	r3, [r1, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dc02      	bgt.n	8006c4c <__sflush_r+0x1c>
 8006c46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dd48      	ble.n	8006cde <__sflush_r+0xae>
 8006c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d045      	beq.n	8006cde <__sflush_r+0xae>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c58:	682f      	ldr	r7, [r5, #0]
 8006c5a:	6a21      	ldr	r1, [r4, #32]
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	d030      	beq.n	8006cc2 <__sflush_r+0x92>
 8006c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	0759      	lsls	r1, r3, #29
 8006c66:	d505      	bpl.n	8006c74 <__sflush_r+0x44>
 8006c68:	6863      	ldr	r3, [r4, #4]
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c6e:	b10b      	cbz	r3, 8006c74 <__sflush_r+0x44>
 8006c70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c72:	1ad2      	subs	r2, r2, r3
 8006c74:	2300      	movs	r3, #0
 8006c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c78:	6a21      	ldr	r1, [r4, #32]
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b0      	blx	r6
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	d106      	bne.n	8006c92 <__sflush_r+0x62>
 8006c84:	6829      	ldr	r1, [r5, #0]
 8006c86:	291d      	cmp	r1, #29
 8006c88:	d82b      	bhi.n	8006ce2 <__sflush_r+0xb2>
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006d34 <__sflush_r+0x104>)
 8006c8c:	410a      	asrs	r2, r1
 8006c8e:	07d6      	lsls	r6, r2, #31
 8006c90:	d427      	bmi.n	8006ce2 <__sflush_r+0xb2>
 8006c92:	2200      	movs	r2, #0
 8006c94:	6062      	str	r2, [r4, #4]
 8006c96:	04d9      	lsls	r1, r3, #19
 8006c98:	6922      	ldr	r2, [r4, #16]
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	d504      	bpl.n	8006ca8 <__sflush_r+0x78>
 8006c9e:	1c42      	adds	r2, r0, #1
 8006ca0:	d101      	bne.n	8006ca6 <__sflush_r+0x76>
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	b903      	cbnz	r3, 8006ca8 <__sflush_r+0x78>
 8006ca6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006caa:	602f      	str	r7, [r5, #0]
 8006cac:	b1b9      	cbz	r1, 8006cde <__sflush_r+0xae>
 8006cae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	d002      	beq.n	8006cbc <__sflush_r+0x8c>
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f7ff feba 	bl	8006a30 <_free_r>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cc0:	e00d      	b.n	8006cde <__sflush_r+0xae>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	47b0      	blx	r6
 8006cc8:	4602      	mov	r2, r0
 8006cca:	1c50      	adds	r0, r2, #1
 8006ccc:	d1c9      	bne.n	8006c62 <__sflush_r+0x32>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0c6      	beq.n	8006c62 <__sflush_r+0x32>
 8006cd4:	2b1d      	cmp	r3, #29
 8006cd6:	d001      	beq.n	8006cdc <__sflush_r+0xac>
 8006cd8:	2b16      	cmp	r3, #22
 8006cda:	d11e      	bne.n	8006d1a <__sflush_r+0xea>
 8006cdc:	602f      	str	r7, [r5, #0]
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e022      	b.n	8006d28 <__sflush_r+0xf8>
 8006ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	e01b      	b.n	8006d22 <__sflush_r+0xf2>
 8006cea:	690f      	ldr	r7, [r1, #16]
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	d0f6      	beq.n	8006cde <__sflush_r+0xae>
 8006cf0:	0793      	lsls	r3, r2, #30
 8006cf2:	680e      	ldr	r6, [r1, #0]
 8006cf4:	bf08      	it	eq
 8006cf6:	694b      	ldreq	r3, [r1, #20]
 8006cf8:	600f      	str	r7, [r1, #0]
 8006cfa:	bf18      	it	ne
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	eba6 0807 	sub.w	r8, r6, r7
 8006d02:	608b      	str	r3, [r1, #8]
 8006d04:	f1b8 0f00 	cmp.w	r8, #0
 8006d08:	dde9      	ble.n	8006cde <__sflush_r+0xae>
 8006d0a:	6a21      	ldr	r1, [r4, #32]
 8006d0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d0e:	4643      	mov	r3, r8
 8006d10:	463a      	mov	r2, r7
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b0      	blx	r6
 8006d16:	2800      	cmp	r0, #0
 8006d18:	dc08      	bgt.n	8006d2c <__sflush_r+0xfc>
 8006d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d22:	81a3      	strh	r3, [r4, #12]
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2c:	4407      	add	r7, r0
 8006d2e:	eba8 0800 	sub.w	r8, r8, r0
 8006d32:	e7e7      	b.n	8006d04 <__sflush_r+0xd4>
 8006d34:	dfbffffe 	.word	0xdfbffffe

08006d38 <_fflush_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	b913      	cbnz	r3, 8006d48 <_fflush_r+0x10>
 8006d42:	2500      	movs	r5, #0
 8006d44:	4628      	mov	r0, r5
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	b118      	cbz	r0, 8006d52 <_fflush_r+0x1a>
 8006d4a:	6a03      	ldr	r3, [r0, #32]
 8006d4c:	b90b      	cbnz	r3, 8006d52 <_fflush_r+0x1a>
 8006d4e:	f7ff fd5b 	bl	8006808 <__sinit>
 8006d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f3      	beq.n	8006d42 <_fflush_r+0xa>
 8006d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d5c:	07d0      	lsls	r0, r2, #31
 8006d5e:	d404      	bmi.n	8006d6a <_fflush_r+0x32>
 8006d60:	0599      	lsls	r1, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_fflush_r+0x32>
 8006d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d66:	f7ff fe42 	bl	80069ee <__retarget_lock_acquire_recursive>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	f7ff ff5f 	bl	8006c30 <__sflush_r>
 8006d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d74:	07da      	lsls	r2, r3, #31
 8006d76:	4605      	mov	r5, r0
 8006d78:	d4e4      	bmi.n	8006d44 <_fflush_r+0xc>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	059b      	lsls	r3, r3, #22
 8006d7e:	d4e1      	bmi.n	8006d44 <_fflush_r+0xc>
 8006d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d82:	f7ff fe35 	bl	80069f0 <__retarget_lock_release_recursive>
 8006d86:	e7dd      	b.n	8006d44 <_fflush_r+0xc>

08006d88 <fiprintf>:
 8006d88:	b40e      	push	{r1, r2, r3}
 8006d8a:	b503      	push	{r0, r1, lr}
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	4805      	ldr	r0, [pc, #20]	@ (8006da8 <fiprintf+0x20>)
 8006d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	f000 f847 	bl	8006e2c <_vfiprintf_r>
 8006d9e:	b002      	add	sp, #8
 8006da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da4:	b003      	add	sp, #12
 8006da6:	4770      	bx	lr
 8006da8:	2000001c 	.word	0x2000001c

08006dac <_sbrk_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	@ (8006dc8 <_sbrk_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa fa32 	bl	8001220 <_sbrk>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_sbrk_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_sbrk_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	20000424 	.word	0x20000424

08006dcc <abort>:
 8006dcc:	b508      	push	{r3, lr}
 8006dce:	2006      	movs	r0, #6
 8006dd0:	f000 fb8e 	bl	80074f0 <raise>
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7fa f9ab 	bl	8001130 <_exit>

08006dda <__sfputc_r>:
 8006dda:	6893      	ldr	r3, [r2, #8]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	b410      	push	{r4}
 8006de2:	6093      	str	r3, [r2, #8]
 8006de4:	da08      	bge.n	8006df8 <__sfputc_r+0x1e>
 8006de6:	6994      	ldr	r4, [r2, #24]
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	db01      	blt.n	8006df0 <__sfputc_r+0x16>
 8006dec:	290a      	cmp	r1, #10
 8006dee:	d103      	bne.n	8006df8 <__sfputc_r+0x1e>
 8006df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006df4:	f000 bac0 	b.w	8007378 <__swbuf_r>
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	1c58      	adds	r0, r3, #1
 8006dfc:	6010      	str	r0, [r2, #0]
 8006dfe:	7019      	strb	r1, [r3, #0]
 8006e00:	4608      	mov	r0, r1
 8006e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <__sfputs_r>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	4614      	mov	r4, r2
 8006e10:	18d5      	adds	r5, r2, r3
 8006e12:	42ac      	cmp	r4, r5
 8006e14:	d101      	bne.n	8006e1a <__sfputs_r+0x12>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e007      	b.n	8006e2a <__sfputs_r+0x22>
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	463a      	mov	r2, r7
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffda 	bl	8006dda <__sfputc_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d1f3      	bne.n	8006e12 <__sfputs_r+0xa>
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e2c <_vfiprintf_r>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	460d      	mov	r5, r1
 8006e32:	b09d      	sub	sp, #116	@ 0x74
 8006e34:	4614      	mov	r4, r2
 8006e36:	4698      	mov	r8, r3
 8006e38:	4606      	mov	r6, r0
 8006e3a:	b118      	cbz	r0, 8006e44 <_vfiprintf_r+0x18>
 8006e3c:	6a03      	ldr	r3, [r0, #32]
 8006e3e:	b90b      	cbnz	r3, 8006e44 <_vfiprintf_r+0x18>
 8006e40:	f7ff fce2 	bl	8006808 <__sinit>
 8006e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e46:	07d9      	lsls	r1, r3, #31
 8006e48:	d405      	bmi.n	8006e56 <_vfiprintf_r+0x2a>
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	059a      	lsls	r2, r3, #22
 8006e4e:	d402      	bmi.n	8006e56 <_vfiprintf_r+0x2a>
 8006e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e52:	f7ff fdcc 	bl	80069ee <__retarget_lock_acquire_recursive>
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	071b      	lsls	r3, r3, #28
 8006e5a:	d501      	bpl.n	8006e60 <_vfiprintf_r+0x34>
 8006e5c:	692b      	ldr	r3, [r5, #16]
 8006e5e:	b99b      	cbnz	r3, 8006e88 <_vfiprintf_r+0x5c>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4630      	mov	r0, r6
 8006e64:	f000 fac6 	bl	80073f4 <__swsetup_r>
 8006e68:	b170      	cbz	r0, 8006e88 <_vfiprintf_r+0x5c>
 8006e6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e6c:	07dc      	lsls	r4, r3, #31
 8006e6e:	d504      	bpl.n	8006e7a <_vfiprintf_r+0x4e>
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	b01d      	add	sp, #116	@ 0x74
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	89ab      	ldrh	r3, [r5, #12]
 8006e7c:	0598      	lsls	r0, r3, #22
 8006e7e:	d4f7      	bmi.n	8006e70 <_vfiprintf_r+0x44>
 8006e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e82:	f7ff fdb5 	bl	80069f0 <__retarget_lock_release_recursive>
 8006e86:	e7f3      	b.n	8006e70 <_vfiprintf_r+0x44>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e96:	2330      	movs	r3, #48	@ 0x30
 8006e98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007048 <_vfiprintf_r+0x21c>
 8006e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ea0:	f04f 0901 	mov.w	r9, #1
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	469a      	mov	sl, r3
 8006ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eac:	b10a      	cbz	r2, 8006eb2 <_vfiprintf_r+0x86>
 8006eae:	2a25      	cmp	r2, #37	@ 0x25
 8006eb0:	d1f9      	bne.n	8006ea6 <_vfiprintf_r+0x7a>
 8006eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb6:	d00b      	beq.n	8006ed0 <_vfiprintf_r+0xa4>
 8006eb8:	465b      	mov	r3, fp
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7ff ffa2 	bl	8006e08 <__sfputs_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f000 80a7 	beq.w	8007018 <_vfiprintf_r+0x1ec>
 8006eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ecc:	445a      	add	r2, fp
 8006ece:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 809f 	beq.w	8007018 <_vfiprintf_r+0x1ec>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ee4:	f10a 0a01 	add.w	sl, sl, #1
 8006ee8:	9304      	str	r3, [sp, #16]
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ef2:	4654      	mov	r4, sl
 8006ef4:	2205      	movs	r2, #5
 8006ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006efa:	4853      	ldr	r0, [pc, #332]	@ (8007048 <_vfiprintf_r+0x21c>)
 8006efc:	f7f9 f968 	bl	80001d0 <memchr>
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	b9d8      	cbnz	r0, 8006f3c <_vfiprintf_r+0x110>
 8006f04:	06d1      	lsls	r1, r2, #27
 8006f06:	bf44      	itt	mi
 8006f08:	2320      	movmi	r3, #32
 8006f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f0e:	0713      	lsls	r3, r2, #28
 8006f10:	bf44      	itt	mi
 8006f12:	232b      	movmi	r3, #43	@ 0x2b
 8006f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f18:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f1e:	d015      	beq.n	8006f4c <_vfiprintf_r+0x120>
 8006f20:	9a07      	ldr	r2, [sp, #28]
 8006f22:	4654      	mov	r4, sl
 8006f24:	2000      	movs	r0, #0
 8006f26:	f04f 0c0a 	mov.w	ip, #10
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f30:	3b30      	subs	r3, #48	@ 0x30
 8006f32:	2b09      	cmp	r3, #9
 8006f34:	d94b      	bls.n	8006fce <_vfiprintf_r+0x1a2>
 8006f36:	b1b0      	cbz	r0, 8006f66 <_vfiprintf_r+0x13a>
 8006f38:	9207      	str	r2, [sp, #28]
 8006f3a:	e014      	b.n	8006f66 <_vfiprintf_r+0x13a>
 8006f3c:	eba0 0308 	sub.w	r3, r0, r8
 8006f40:	fa09 f303 	lsl.w	r3, r9, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	46a2      	mov	sl, r4
 8006f4a:	e7d2      	b.n	8006ef2 <_vfiprintf_r+0xc6>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	1d19      	adds	r1, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	9103      	str	r1, [sp, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bfbb      	ittet	lt
 8006f58:	425b      	neglt	r3, r3
 8006f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f5e:	9307      	strge	r3, [sp, #28]
 8006f60:	9307      	strlt	r3, [sp, #28]
 8006f62:	bfb8      	it	lt
 8006f64:	9204      	strlt	r2, [sp, #16]
 8006f66:	7823      	ldrb	r3, [r4, #0]
 8006f68:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f6a:	d10a      	bne.n	8006f82 <_vfiprintf_r+0x156>
 8006f6c:	7863      	ldrb	r3, [r4, #1]
 8006f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f70:	d132      	bne.n	8006fd8 <_vfiprintf_r+0x1ac>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	1d1a      	adds	r2, r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	9203      	str	r2, [sp, #12]
 8006f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f7e:	3402      	adds	r4, #2
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007058 <_vfiprintf_r+0x22c>
 8006f86:	7821      	ldrb	r1, [r4, #0]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	4650      	mov	r0, sl
 8006f8c:	f7f9 f920 	bl	80001d0 <memchr>
 8006f90:	b138      	cbz	r0, 8006fa2 <_vfiprintf_r+0x176>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	eba0 000a 	sub.w	r0, r0, sl
 8006f98:	2240      	movs	r2, #64	@ 0x40
 8006f9a:	4082      	lsls	r2, r0
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	3401      	adds	r4, #1
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa6:	4829      	ldr	r0, [pc, #164]	@ (800704c <_vfiprintf_r+0x220>)
 8006fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fac:	2206      	movs	r2, #6
 8006fae:	f7f9 f90f 	bl	80001d0 <memchr>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d03f      	beq.n	8007036 <_vfiprintf_r+0x20a>
 8006fb6:	4b26      	ldr	r3, [pc, #152]	@ (8007050 <_vfiprintf_r+0x224>)
 8006fb8:	bb1b      	cbnz	r3, 8007002 <_vfiprintf_r+0x1d6>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	3307      	adds	r3, #7
 8006fbe:	f023 0307 	bic.w	r3, r3, #7
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc8:	443b      	add	r3, r7
 8006fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fcc:	e76a      	b.n	8006ea4 <_vfiprintf_r+0x78>
 8006fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	e7a8      	b.n	8006f2a <_vfiprintf_r+0xfe>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	3401      	adds	r4, #1
 8006fdc:	9305      	str	r3, [sp, #20]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f04f 0c0a 	mov.w	ip, #10
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fea:	3a30      	subs	r2, #48	@ 0x30
 8006fec:	2a09      	cmp	r2, #9
 8006fee:	d903      	bls.n	8006ff8 <_vfiprintf_r+0x1cc>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0c6      	beq.n	8006f82 <_vfiprintf_r+0x156>
 8006ff4:	9105      	str	r1, [sp, #20]
 8006ff6:	e7c4      	b.n	8006f82 <_vfiprintf_r+0x156>
 8006ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7f0      	b.n	8006fe4 <_vfiprintf_r+0x1b8>
 8007002:	ab03      	add	r3, sp, #12
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	462a      	mov	r2, r5
 8007008:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <_vfiprintf_r+0x228>)
 800700a:	a904      	add	r1, sp, #16
 800700c:	4630      	mov	r0, r6
 800700e:	f3af 8000 	nop.w
 8007012:	4607      	mov	r7, r0
 8007014:	1c78      	adds	r0, r7, #1
 8007016:	d1d6      	bne.n	8006fc6 <_vfiprintf_r+0x19a>
 8007018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800701a:	07d9      	lsls	r1, r3, #31
 800701c:	d405      	bmi.n	800702a <_vfiprintf_r+0x1fe>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d402      	bmi.n	800702a <_vfiprintf_r+0x1fe>
 8007024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007026:	f7ff fce3 	bl	80069f0 <__retarget_lock_release_recursive>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	065b      	lsls	r3, r3, #25
 800702e:	f53f af1f 	bmi.w	8006e70 <_vfiprintf_r+0x44>
 8007032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007034:	e71e      	b.n	8006e74 <_vfiprintf_r+0x48>
 8007036:	ab03      	add	r3, sp, #12
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	462a      	mov	r2, r5
 800703c:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <_vfiprintf_r+0x228>)
 800703e:	a904      	add	r1, sp, #16
 8007040:	4630      	mov	r0, r6
 8007042:	f000 f879 	bl	8007138 <_printf_i>
 8007046:	e7e4      	b.n	8007012 <_vfiprintf_r+0x1e6>
 8007048:	0800783b 	.word	0x0800783b
 800704c:	08007845 	.word	0x08007845
 8007050:	00000000 	.word	0x00000000
 8007054:	08006e09 	.word	0x08006e09
 8007058:	08007841 	.word	0x08007841

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4698      	mov	r8, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800706c:	4293      	cmp	r3, r2
 800706e:	bfb8      	it	lt
 8007070:	4613      	movlt	r3, r2
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007078:	4607      	mov	r7, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc26      	bgt.n	80070f2 <_printf_common+0x96>
 80070a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	3b00      	subs	r3, #0
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d42b      	bmi.n	800710c <_printf_common+0xb0>
 80070b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070b8:	4641      	mov	r1, r8
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d01e      	beq.n	8007100 <_printf_common+0xa4>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	6922      	ldr	r2, [r4, #16]
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	bf02      	ittt	eq
 80070ce:	68e5      	ldreq	r5, [r4, #12]
 80070d0:	6833      	ldreq	r3, [r6, #0]
 80070d2:	1aed      	subeq	r5, r5, r3
 80070d4:	68a3      	ldr	r3, [r4, #8]
 80070d6:	bf0c      	ite	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	2500      	movne	r5, #0
 80070de:	4293      	cmp	r3, r2
 80070e0:	bfc4      	itt	gt
 80070e2:	1a9b      	subgt	r3, r3, r2
 80070e4:	18ed      	addgt	r5, r5, r3
 80070e6:	2600      	movs	r6, #0
 80070e8:	341a      	adds	r4, #26
 80070ea:	42b5      	cmp	r5, r6
 80070ec:	d11a      	bne.n	8007124 <_printf_common+0xc8>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e008      	b.n	8007104 <_printf_common+0xa8>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4641      	mov	r1, r8
 80070f8:	4638      	mov	r0, r7
 80070fa:	47c8      	blx	r9
 80070fc:	3001      	adds	r0, #1
 80070fe:	d103      	bne.n	8007108 <_printf_common+0xac>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	3501      	adds	r5, #1
 800710a:	e7c6      	b.n	800709a <_printf_common+0x3e>
 800710c:	18e1      	adds	r1, r4, r3
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	2030      	movs	r0, #48	@ 0x30
 8007112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007116:	4422      	add	r2, r4
 8007118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800711c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007120:	3302      	adds	r3, #2
 8007122:	e7c7      	b.n	80070b4 <_printf_common+0x58>
 8007124:	2301      	movs	r3, #1
 8007126:	4622      	mov	r2, r4
 8007128:	4641      	mov	r1, r8
 800712a:	4638      	mov	r0, r7
 800712c:	47c8      	blx	r9
 800712e:	3001      	adds	r0, #1
 8007130:	d0e6      	beq.n	8007100 <_printf_common+0xa4>
 8007132:	3601      	adds	r6, #1
 8007134:	e7d9      	b.n	80070ea <_printf_common+0x8e>
	...

08007138 <_printf_i>:
 8007138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	7e0f      	ldrb	r7, [r1, #24]
 800713e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007140:	2f78      	cmp	r7, #120	@ 0x78
 8007142:	4691      	mov	r9, r2
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	469a      	mov	sl, r3
 800714a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800714e:	d807      	bhi.n	8007160 <_printf_i+0x28>
 8007150:	2f62      	cmp	r7, #98	@ 0x62
 8007152:	d80a      	bhi.n	800716a <_printf_i+0x32>
 8007154:	2f00      	cmp	r7, #0
 8007156:	f000 80d2 	beq.w	80072fe <_printf_i+0x1c6>
 800715a:	2f58      	cmp	r7, #88	@ 0x58
 800715c:	f000 80b9 	beq.w	80072d2 <_printf_i+0x19a>
 8007160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007168:	e03a      	b.n	80071e0 <_printf_i+0xa8>
 800716a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800716e:	2b15      	cmp	r3, #21
 8007170:	d8f6      	bhi.n	8007160 <_printf_i+0x28>
 8007172:	a101      	add	r1, pc, #4	@ (adr r1, 8007178 <_printf_i+0x40>)
 8007174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071e5 	.word	0x080071e5
 8007180:	08007161 	.word	0x08007161
 8007184:	08007161 	.word	0x08007161
 8007188:	08007161 	.word	0x08007161
 800718c:	08007161 	.word	0x08007161
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007161 	.word	0x08007161
 8007198:	08007161 	.word	0x08007161
 800719c:	08007161 	.word	0x08007161
 80071a0:	08007161 	.word	0x08007161
 80071a4:	080072e5 	.word	0x080072e5
 80071a8:	0800720f 	.word	0x0800720f
 80071ac:	0800729f 	.word	0x0800729f
 80071b0:	08007161 	.word	0x08007161
 80071b4:	08007161 	.word	0x08007161
 80071b8:	08007307 	.word	0x08007307
 80071bc:	08007161 	.word	0x08007161
 80071c0:	0800720f 	.word	0x0800720f
 80071c4:	08007161 	.word	0x08007161
 80071c8:	08007161 	.word	0x08007161
 80071cc:	080072a7 	.word	0x080072a7
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6032      	str	r2, [r6, #0]
 80071d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e09d      	b.n	8007320 <_printf_i+0x1e8>
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	6820      	ldr	r0, [r4, #0]
 80071e8:	1d19      	adds	r1, r3, #4
 80071ea:	6031      	str	r1, [r6, #0]
 80071ec:	0606      	lsls	r6, r0, #24
 80071ee:	d501      	bpl.n	80071f4 <_printf_i+0xbc>
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	e003      	b.n	80071fc <_printf_i+0xc4>
 80071f4:	0645      	lsls	r5, r0, #25
 80071f6:	d5fb      	bpl.n	80071f0 <_printf_i+0xb8>
 80071f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	da03      	bge.n	8007208 <_printf_i+0xd0>
 8007200:	232d      	movs	r3, #45	@ 0x2d
 8007202:	426d      	negs	r5, r5
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007208:	4859      	ldr	r0, [pc, #356]	@ (8007370 <_printf_i+0x238>)
 800720a:	230a      	movs	r3, #10
 800720c:	e011      	b.n	8007232 <_printf_i+0xfa>
 800720e:	6821      	ldr	r1, [r4, #0]
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	0608      	lsls	r0, r1, #24
 8007214:	f853 5b04 	ldr.w	r5, [r3], #4
 8007218:	d402      	bmi.n	8007220 <_printf_i+0xe8>
 800721a:	0649      	lsls	r1, r1, #25
 800721c:	bf48      	it	mi
 800721e:	b2ad      	uxthmi	r5, r5
 8007220:	2f6f      	cmp	r7, #111	@ 0x6f
 8007222:	4853      	ldr	r0, [pc, #332]	@ (8007370 <_printf_i+0x238>)
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	bf14      	ite	ne
 8007228:	230a      	movne	r3, #10
 800722a:	2308      	moveq	r3, #8
 800722c:	2100      	movs	r1, #0
 800722e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007232:	6866      	ldr	r6, [r4, #4]
 8007234:	60a6      	str	r6, [r4, #8]
 8007236:	2e00      	cmp	r6, #0
 8007238:	bfa2      	ittt	ge
 800723a:	6821      	ldrge	r1, [r4, #0]
 800723c:	f021 0104 	bicge.w	r1, r1, #4
 8007240:	6021      	strge	r1, [r4, #0]
 8007242:	b90d      	cbnz	r5, 8007248 <_printf_i+0x110>
 8007244:	2e00      	cmp	r6, #0
 8007246:	d04b      	beq.n	80072e0 <_printf_i+0x1a8>
 8007248:	4616      	mov	r6, r2
 800724a:	fbb5 f1f3 	udiv	r1, r5, r3
 800724e:	fb03 5711 	mls	r7, r3, r1, r5
 8007252:	5dc7      	ldrb	r7, [r0, r7]
 8007254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007258:	462f      	mov	r7, r5
 800725a:	42bb      	cmp	r3, r7
 800725c:	460d      	mov	r5, r1
 800725e:	d9f4      	bls.n	800724a <_printf_i+0x112>
 8007260:	2b08      	cmp	r3, #8
 8007262:	d10b      	bne.n	800727c <_printf_i+0x144>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07df      	lsls	r7, r3, #31
 8007268:	d508      	bpl.n	800727c <_printf_i+0x144>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	6861      	ldr	r1, [r4, #4]
 800726e:	4299      	cmp	r1, r3
 8007270:	bfde      	ittt	le
 8007272:	2330      	movle	r3, #48	@ 0x30
 8007274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800727c:	1b92      	subs	r2, r2, r6
 800727e:	6122      	str	r2, [r4, #16]
 8007280:	f8cd a000 	str.w	sl, [sp]
 8007284:	464b      	mov	r3, r9
 8007286:	aa03      	add	r2, sp, #12
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fee6 	bl	800705c <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	d14a      	bne.n	800732a <_printf_i+0x1f2>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b004      	add	sp, #16
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f043 0320 	orr.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	4833      	ldr	r0, [pc, #204]	@ (8007374 <_printf_i+0x23c>)
 80072a8:	2778      	movs	r7, #120	@ 0x78
 80072aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	6831      	ldr	r1, [r6, #0]
 80072b2:	061f      	lsls	r7, r3, #24
 80072b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80072b8:	d402      	bmi.n	80072c0 <_printf_i+0x188>
 80072ba:	065f      	lsls	r7, r3, #25
 80072bc:	bf48      	it	mi
 80072be:	b2ad      	uxthmi	r5, r5
 80072c0:	6031      	str	r1, [r6, #0]
 80072c2:	07d9      	lsls	r1, r3, #31
 80072c4:	bf44      	itt	mi
 80072c6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ca:	6023      	strmi	r3, [r4, #0]
 80072cc:	b11d      	cbz	r5, 80072d6 <_printf_i+0x19e>
 80072ce:	2310      	movs	r3, #16
 80072d0:	e7ac      	b.n	800722c <_printf_i+0xf4>
 80072d2:	4827      	ldr	r0, [pc, #156]	@ (8007370 <_printf_i+0x238>)
 80072d4:	e7e9      	b.n	80072aa <_printf_i+0x172>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f023 0320 	bic.w	r3, r3, #32
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	e7f6      	b.n	80072ce <_printf_i+0x196>
 80072e0:	4616      	mov	r6, r2
 80072e2:	e7bd      	b.n	8007260 <_printf_i+0x128>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	6961      	ldr	r1, [r4, #20]
 80072ea:	1d18      	adds	r0, r3, #4
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	062e      	lsls	r6, r5, #24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0x1c0>
 80072f4:	6019      	str	r1, [r3, #0]
 80072f6:	e002      	b.n	80072fe <_printf_i+0x1c6>
 80072f8:	0668      	lsls	r0, r5, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0x1bc>
 80072fc:	8019      	strh	r1, [r3, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	4616      	mov	r6, r2
 8007304:	e7bc      	b.n	8007280 <_printf_i+0x148>
 8007306:	6833      	ldr	r3, [r6, #0]
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	6032      	str	r2, [r6, #0]
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	6862      	ldr	r2, [r4, #4]
 8007310:	2100      	movs	r1, #0
 8007312:	4630      	mov	r0, r6
 8007314:	f7f8 ff5c 	bl	80001d0 <memchr>
 8007318:	b108      	cbz	r0, 800731e <_printf_i+0x1e6>
 800731a:	1b80      	subs	r0, r0, r6
 800731c:	6060      	str	r0, [r4, #4]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	2300      	movs	r3, #0
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007328:	e7aa      	b.n	8007280 <_printf_i+0x148>
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	4632      	mov	r2, r6
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	47d0      	blx	sl
 8007334:	3001      	adds	r0, #1
 8007336:	d0ad      	beq.n	8007294 <_printf_i+0x15c>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	079b      	lsls	r3, r3, #30
 800733c:	d413      	bmi.n	8007366 <_printf_i+0x22e>
 800733e:	68e0      	ldr	r0, [r4, #12]
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	4298      	cmp	r0, r3
 8007344:	bfb8      	it	lt
 8007346:	4618      	movlt	r0, r3
 8007348:	e7a6      	b.n	8007298 <_printf_i+0x160>
 800734a:	2301      	movs	r3, #1
 800734c:	4632      	mov	r2, r6
 800734e:	4649      	mov	r1, r9
 8007350:	4640      	mov	r0, r8
 8007352:	47d0      	blx	sl
 8007354:	3001      	adds	r0, #1
 8007356:	d09d      	beq.n	8007294 <_printf_i+0x15c>
 8007358:	3501      	adds	r5, #1
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	42ab      	cmp	r3, r5
 8007362:	dcf2      	bgt.n	800734a <_printf_i+0x212>
 8007364:	e7eb      	b.n	800733e <_printf_i+0x206>
 8007366:	2500      	movs	r5, #0
 8007368:	f104 0619 	add.w	r6, r4, #25
 800736c:	e7f5      	b.n	800735a <_printf_i+0x222>
 800736e:	bf00      	nop
 8007370:	0800784c 	.word	0x0800784c
 8007374:	0800785d 	.word	0x0800785d

08007378 <__swbuf_r>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	460e      	mov	r6, r1
 800737c:	4614      	mov	r4, r2
 800737e:	4605      	mov	r5, r0
 8007380:	b118      	cbz	r0, 800738a <__swbuf_r+0x12>
 8007382:	6a03      	ldr	r3, [r0, #32]
 8007384:	b90b      	cbnz	r3, 800738a <__swbuf_r+0x12>
 8007386:	f7ff fa3f 	bl	8006808 <__sinit>
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	071a      	lsls	r2, r3, #28
 8007392:	d501      	bpl.n	8007398 <__swbuf_r+0x20>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b943      	cbnz	r3, 80073aa <__swbuf_r+0x32>
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f000 f82a 	bl	80073f4 <__swsetup_r>
 80073a0:	b118      	cbz	r0, 80073aa <__swbuf_r+0x32>
 80073a2:	f04f 37ff 	mov.w	r7, #4294967295
 80073a6:	4638      	mov	r0, r7
 80073a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	1a98      	subs	r0, r3, r2
 80073b0:	6963      	ldr	r3, [r4, #20]
 80073b2:	b2f6      	uxtb	r6, r6
 80073b4:	4283      	cmp	r3, r0
 80073b6:	4637      	mov	r7, r6
 80073b8:	dc05      	bgt.n	80073c6 <__swbuf_r+0x4e>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f7ff fcbb 	bl	8006d38 <_fflush_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d1ed      	bne.n	80073a2 <__swbuf_r+0x2a>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60a3      	str	r3, [r4, #8]
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	701e      	strb	r6, [r3, #0]
 80073d4:	6962      	ldr	r2, [r4, #20]
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	d004      	beq.n	80073e6 <__swbuf_r+0x6e>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d5e1      	bpl.n	80073a6 <__swbuf_r+0x2e>
 80073e2:	2e0a      	cmp	r6, #10
 80073e4:	d1df      	bne.n	80073a6 <__swbuf_r+0x2e>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff fca5 	bl	8006d38 <_fflush_r>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0d9      	beq.n	80073a6 <__swbuf_r+0x2e>
 80073f2:	e7d6      	b.n	80073a2 <__swbuf_r+0x2a>

080073f4 <__swsetup_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4b29      	ldr	r3, [pc, #164]	@ (800749c <__swsetup_r+0xa8>)
 80073f8:	4605      	mov	r5, r0
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	460c      	mov	r4, r1
 80073fe:	b118      	cbz	r0, 8007408 <__swsetup_r+0x14>
 8007400:	6a03      	ldr	r3, [r0, #32]
 8007402:	b90b      	cbnz	r3, 8007408 <__swsetup_r+0x14>
 8007404:	f7ff fa00 	bl	8006808 <__sinit>
 8007408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740c:	0719      	lsls	r1, r3, #28
 800740e:	d422      	bmi.n	8007456 <__swsetup_r+0x62>
 8007410:	06da      	lsls	r2, r3, #27
 8007412:	d407      	bmi.n	8007424 <__swsetup_r+0x30>
 8007414:	2209      	movs	r2, #9
 8007416:	602a      	str	r2, [r5, #0]
 8007418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	e033      	b.n	800748c <__swsetup_r+0x98>
 8007424:	0758      	lsls	r0, r3, #29
 8007426:	d512      	bpl.n	800744e <__swsetup_r+0x5a>
 8007428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800742a:	b141      	cbz	r1, 800743e <__swsetup_r+0x4a>
 800742c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007430:	4299      	cmp	r1, r3
 8007432:	d002      	beq.n	800743a <__swsetup_r+0x46>
 8007434:	4628      	mov	r0, r5
 8007436:	f7ff fafb 	bl	8006a30 <_free_r>
 800743a:	2300      	movs	r3, #0
 800743c:	6363      	str	r3, [r4, #52]	@ 0x34
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	2300      	movs	r3, #0
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f043 0308 	orr.w	r3, r3, #8
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	b94b      	cbnz	r3, 800746e <__swsetup_r+0x7a>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007464:	d003      	beq.n	800746e <__swsetup_r+0x7a>
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f883 	bl	8007574 <__smakebuf_r>
 800746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007472:	f013 0201 	ands.w	r2, r3, #1
 8007476:	d00a      	beq.n	800748e <__swsetup_r+0x9a>
 8007478:	2200      	movs	r2, #0
 800747a:	60a2      	str	r2, [r4, #8]
 800747c:	6962      	ldr	r2, [r4, #20]
 800747e:	4252      	negs	r2, r2
 8007480:	61a2      	str	r2, [r4, #24]
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	b942      	cbnz	r2, 8007498 <__swsetup_r+0xa4>
 8007486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800748a:	d1c5      	bne.n	8007418 <__swsetup_r+0x24>
 800748c:	bd38      	pop	{r3, r4, r5, pc}
 800748e:	0799      	lsls	r1, r3, #30
 8007490:	bf58      	it	pl
 8007492:	6962      	ldrpl	r2, [r4, #20]
 8007494:	60a2      	str	r2, [r4, #8]
 8007496:	e7f4      	b.n	8007482 <__swsetup_r+0x8e>
 8007498:	2000      	movs	r0, #0
 800749a:	e7f7      	b.n	800748c <__swsetup_r+0x98>
 800749c:	2000001c 	.word	0x2000001c

080074a0 <_raise_r>:
 80074a0:	291f      	cmp	r1, #31
 80074a2:	b538      	push	{r3, r4, r5, lr}
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	d904      	bls.n	80074b4 <_raise_r+0x14>
 80074aa:	2316      	movs	r3, #22
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074b6:	b112      	cbz	r2, 80074be <_raise_r+0x1e>
 80074b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074bc:	b94b      	cbnz	r3, 80074d2 <_raise_r+0x32>
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f830 	bl	8007524 <_getpid_r>
 80074c4:	4622      	mov	r2, r4
 80074c6:	4601      	mov	r1, r0
 80074c8:	4628      	mov	r0, r5
 80074ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ce:	f000 b817 	b.w	8007500 <_kill_r>
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d00a      	beq.n	80074ec <_raise_r+0x4c>
 80074d6:	1c59      	adds	r1, r3, #1
 80074d8:	d103      	bne.n	80074e2 <_raise_r+0x42>
 80074da:	2316      	movs	r3, #22
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	2001      	movs	r0, #1
 80074e0:	e7e7      	b.n	80074b2 <_raise_r+0x12>
 80074e2:	2100      	movs	r1, #0
 80074e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074e8:	4620      	mov	r0, r4
 80074ea:	4798      	blx	r3
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7e0      	b.n	80074b2 <_raise_r+0x12>

080074f0 <raise>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <raise+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f7ff bfd3 	b.w	80074a0 <_raise_r>
 80074fa:	bf00      	nop
 80074fc:	2000001c 	.word	0x2000001c

08007500 <_kill_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_kill_r+0x20>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	f7f9 fdff 	bl	8001110 <_kill>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d102      	bne.n	800751c <_kill_r+0x1c>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	b103      	cbz	r3, 800751c <_kill_r+0x1c>
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	bf00      	nop
 8007520:	20000424 	.word	0x20000424

08007524 <_getpid_r>:
 8007524:	f7f9 bdec 	b.w	8001100 <_getpid>

08007528 <__swhatbuf_r>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	2900      	cmp	r1, #0
 8007532:	b096      	sub	sp, #88	@ 0x58
 8007534:	4615      	mov	r5, r2
 8007536:	461e      	mov	r6, r3
 8007538:	da0d      	bge.n	8007556 <__swhatbuf_r+0x2e>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007540:	f04f 0100 	mov.w	r1, #0
 8007544:	bf14      	ite	ne
 8007546:	2340      	movne	r3, #64	@ 0x40
 8007548:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800754c:	2000      	movs	r0, #0
 800754e:	6031      	str	r1, [r6, #0]
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	b016      	add	sp, #88	@ 0x58
 8007554:	bd70      	pop	{r4, r5, r6, pc}
 8007556:	466a      	mov	r2, sp
 8007558:	f000 f848 	bl	80075ec <_fstat_r>
 800755c:	2800      	cmp	r0, #0
 800755e:	dbec      	blt.n	800753a <__swhatbuf_r+0x12>
 8007560:	9901      	ldr	r1, [sp, #4]
 8007562:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007566:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800756a:	4259      	negs	r1, r3
 800756c:	4159      	adcs	r1, r3
 800756e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007572:	e7eb      	b.n	800754c <__swhatbuf_r+0x24>

08007574 <__smakebuf_r>:
 8007574:	898b      	ldrh	r3, [r1, #12]
 8007576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007578:	079d      	lsls	r5, r3, #30
 800757a:	4606      	mov	r6, r0
 800757c:	460c      	mov	r4, r1
 800757e:	d507      	bpl.n	8007590 <__smakebuf_r+0x1c>
 8007580:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	2301      	movs	r3, #1
 800758a:	6163      	str	r3, [r4, #20]
 800758c:	b003      	add	sp, #12
 800758e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007590:	ab01      	add	r3, sp, #4
 8007592:	466a      	mov	r2, sp
 8007594:	f7ff ffc8 	bl	8007528 <__swhatbuf_r>
 8007598:	9f00      	ldr	r7, [sp, #0]
 800759a:	4605      	mov	r5, r0
 800759c:	4639      	mov	r1, r7
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff faba 	bl	8006b18 <_malloc_r>
 80075a4:	b948      	cbnz	r0, 80075ba <__smakebuf_r+0x46>
 80075a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075aa:	059a      	lsls	r2, r3, #22
 80075ac:	d4ee      	bmi.n	800758c <__smakebuf_r+0x18>
 80075ae:	f023 0303 	bic.w	r3, r3, #3
 80075b2:	f043 0302 	orr.w	r3, r3, #2
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	e7e2      	b.n	8007580 <__smakebuf_r+0xc>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	6020      	str	r0, [r4, #0]
 80075be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ca:	b15b      	cbz	r3, 80075e4 <__smakebuf_r+0x70>
 80075cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f81d 	bl	8007610 <_isatty_r>
 80075d6:	b128      	cbz	r0, 80075e4 <__smakebuf_r+0x70>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	431d      	orrs	r5, r3
 80075e8:	81a5      	strh	r5, [r4, #12]
 80075ea:	e7cf      	b.n	800758c <__smakebuf_r+0x18>

080075ec <_fstat_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	@ (800760c <_fstat_r+0x20>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	f7f9 fde9 	bl	80011d0 <_fstat>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d102      	bne.n	8007608 <_fstat_r+0x1c>
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	b103      	cbz	r3, 8007608 <_fstat_r+0x1c>
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	bd38      	pop	{r3, r4, r5, pc}
 800760a:	bf00      	nop
 800760c:	20000424 	.word	0x20000424

08007610 <_isatty_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d06      	ldr	r5, [pc, #24]	@ (800762c <_isatty_r+0x1c>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f7f9 fde8 	bl	80011f0 <_isatty>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_isatty_r+0x1a>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_isatty_r+0x1a>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000424 	.word	0x20000424

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr
