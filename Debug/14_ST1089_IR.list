
14_ST1089_IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080044fc  080044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004544  08004544  00005544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800454c  0800454c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004554  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08004560  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004560  00006144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010885  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232b  00000000  00000000  000168c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00018bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc2  00000000  00000000  00019b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e69  00000000  00000000  0001a6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012517  00000000  00000000  0004153b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2158  00000000  00000000  00053a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb8  00000000  00000000  00145bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00149aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044e4 	.word	0x080044e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044e4 	.word	0x080044e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	4a08      	ldr	r2, [pc, #32]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e2:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_GPIO_Init+0x44>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <calc_pulse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static pulse_t calc_pulse(uint32_t time)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if (time < 250)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2bf9      	cmp	r3, #249	@ 0xf9
 800050c:	d801      	bhi.n	8000512 <calc_pulse+0x12>
		return PULSE_ERROR;
 800050e:	2305      	movs	r3, #5
 8000510:	e021      	b.n	8000556 <calc_pulse+0x56>
	else if (time < 1200)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000518:	d201      	bcs.n	800051e <calc_pulse+0x1e>
		return PULSE_SHORT;
 800051a:	2304      	movs	r3, #4
 800051c:	e01b      	b.n	8000556 <calc_pulse+0x56>
	else if (time < 2000)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000524:	d201      	bcs.n	800052a <calc_pulse+0x2a>
		return PULSE_LONG;
 8000526:	2303      	movs	r3, #3
 8000528:	e015      	b.n	8000556 <calc_pulse+0x56>
	else if (time < 3000)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000530:	4293      	cmp	r3, r2
 8000532:	d801      	bhi.n	8000538 <calc_pulse+0x38>
		return PULSE_2MS;
 8000534:	2302      	movs	r3, #2
 8000536:	e00e      	b.n	8000556 <calc_pulse+0x56>
	else if (time < 6000)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800053e:	4293      	cmp	r3, r2
 8000540:	d801      	bhi.n	8000546 <calc_pulse+0x46>
		return PULSE_4MS;
 8000542:	2301      	movs	r3, #1
 8000544:	e007      	b.n	8000556 <calc_pulse+0x56>
	else if (time < 12000)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800054c:	4293      	cmp	r3, r2
 800054e:	d801      	bhi.n	8000554 <calc_pulse+0x54>
		return PULSE_9MS;
 8000550:	2300      	movs	r3, #0
 8000552:	e000      	b.n	8000556 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000554:	2305      	movs	r3, #5
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <HAL_TIM_IC_CaptureCallback>:

volatile pulse_t values[N_VAL];
int counter;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  pulse_t new_val;

  if (htim == &htim2) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d11f      	bne.n	80005b4 <HAL_TIM_IC_CaptureCallback+0x50>
    switch (HAL_TIM_GetActiveChannel(&htim2)) {
 8000574:	4811      	ldr	r0, [pc, #68]	@ (80005bc <HAL_TIM_IC_CaptureCallback+0x58>)
 8000576:	f002 fe97 	bl	80032a8 <HAL_TIM_GetActiveChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d118      	bne.n	80005b2 <HAL_TIM_IC_CaptureCallback+0x4e>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        new_val = calc_pulse(HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1));
 8000580:	2100      	movs	r1, #0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 fe24 	bl	80031d0 <HAL_TIM_ReadCapturedValue>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffb8 	bl	8000500 <calc_pulse>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
        if (counter < N_VAL)
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b3f      	cmp	r3, #63	@ 0x3f
 800059a:	dc08      	bgt.n	80005ae <HAL_TIM_IC_CaptureCallback+0x4a>
          values[counter++] = new_val;
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	4907      	ldr	r1, [pc, #28]	@ (80005c0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80005a4:	600a      	str	r2, [r1, #0]
 80005a6:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	54ca      	strb	r2, [r1, r3]
        else
          __BKPT(0);
        break;
 80005ac:	e002      	b.n	80005b4 <HAL_TIM_IC_CaptureCallback+0x50>
          __BKPT(0);
 80005ae:	be00      	bkpt	0x0000
        break;
 80005b0:	e000      	b.n	80005b4 <HAL_TIM_IC_CaptureCallback+0x50>
      default:
        break;
 80005b2:	bf00      	nop
    }
  }
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000006c 	.word	0x2000006c
 80005c0:	20000068 	.word	0x20000068
 80005c4:	20000028 	.word	0x20000028

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fa75 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f812 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff ff70 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005d8:	f000 f8e6 	bl	80007a8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f9b8 	bl	8000950 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <main+0x2c>)
 80005e2:	f002 f933 	bl	800284c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <main+0x2c>)
 80005ea:	f002 f9f9 	bl	80029e0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x26>
 80005f2:	bf00      	nop
 80005f4:	2000006c 	.word	0x2000006c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 ff3f 	bl	800448a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f000 fd9b 	bl	8001158 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 f848 	bl	80006bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f000 fd76 	bl	800111c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	@ 0x28
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fdc5 	bl	8001204 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 f81c 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f98d 	bl	80019bc <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 f808 	bl	80006bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f001 fe94 	bl	80023d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	@ 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x44>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_MspInit+0x44>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <NMI_Handler+0x4>

08000718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <MemManage_Handler+0x4>

08000728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <UsageFault_Handler+0x4>

08000738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000766:	f000 f9fd 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <TIM2_IRQHandler+0x10>)
 8000776:	f002 fa7d 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000006c 	.word	0x2000006c

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b090      	sub	sp, #64	@ 0x40
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <MX_TIM2_Init+0x114>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80007ec:	4b33      	ldr	r3, [pc, #204]	@ (80008bc <MX_TIM2_Init+0x114>)
 80007ee:	224f      	movs	r2, #79	@ 0x4f
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <MX_TIM2_Init+0x114>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007f8:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <MX_TIM2_Init+0x114>)
 80007fa:	f04f 32ff 	mov.w	r2, #4294967295
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_TIM2_Init+0x114>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_TIM2_Init+0x114>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	482b      	ldr	r0, [pc, #172]	@ (80008bc <MX_TIM2_Init+0x114>)
 800080e:	f001 ffc5 	bl	800279c <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000818:	f7ff ff50 	bl	80006bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000826:	4619      	mov	r1, r3
 8000828:	4824      	ldr	r0, [pc, #144]	@ (80008bc <MX_TIM2_Init+0x114>)
 800082a:	f002 fbc6 	bl	8002fba <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000834:	f7ff ff42 	bl	80006bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000838:	4820      	ldr	r0, [pc, #128]	@ (80008bc <MX_TIM2_Init+0x114>)
 800083a:	f002 f86f 	bl	800291c <HAL_TIM_IC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000844:	f7ff ff3a 	bl	80006bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000848:	2304      	movs	r3, #4
 800084a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4817      	ldr	r0, [pc, #92]	@ (80008bc <MX_TIM2_Init+0x114>)
 8000860:	f002 fc74 	bl	800314c <HAL_TIM_SlaveConfigSynchro>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800086a:	f7ff ff27 	bl	80006bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	480f      	ldr	r0, [pc, #60]	@ (80008bc <MX_TIM2_Init+0x114>)
 800087e:	f003 f83d 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000888:	f7ff ff18 	bl	80006bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800088c:	2302      	movs	r3, #2
 800088e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <MX_TIM2_Init+0x114>)
 80008a4:	f002 faed 	bl	8002e82 <HAL_TIM_IC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80008ae:	f7ff ff05 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3740      	adds	r7, #64	@ 0x40
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000006c 	.word	0x2000006c

080008c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008e0:	d130      	bne.n	8000944 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	4a19      	ldr	r2, [pc, #100]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a13      	ldr	r2, [pc, #76]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_TIM_Base_MspInit+0x8c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000922:	2301      	movs	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f000 fa4a 	bl	8000dc8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2108      	movs	r1, #8
 8000938:	201c      	movs	r0, #28
 800093a:	f000 fa0e 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800093e:	201c      	movs	r0, #28
 8000940:	f000 fa27 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	f003 f858 	bl	8003a48 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f7ff fe8d 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000b8 	.word	0x200000b8
 80009ac:	40004400 	.word	0x40004400

080009b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0ac      	sub	sp, #176	@ 0xb0
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2288      	movs	r2, #136	@ 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fd5a 	bl	800448a <memset>
  if(uartHandle->Instance==USART2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_UART_MspInit+0xb0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d13b      	bne.n	8000a58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fa09 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f8:	f7ff fe60 	bl	80006bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a00:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_UART_MspInit+0xb4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a54:	f000 f9b8 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	37b0      	adds	r7, #176	@ 0xb0
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40021000 	.word	0x40021000

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff fe8a 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 fd01 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fd95 	bl	80005c8 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	08004554 	.word	0x08004554
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	20000144 	.word	0x20000144

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>

08000aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f93d 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f80e 	bl	8000aec <HAL_InitTick>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e001      	b.n	8000ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000adc:	f7ff fdf4 	bl	80006c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d023      	beq.n	8000b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_InitTick+0x70>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f949 	bl	8000dae <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10f      	bne.n	8000b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f913 	bl	8000d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_InitTick+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e001      	b.n	8000b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000140 	.word	0x20000140

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000140 	.word	0x20000140

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	@ (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e17f      	b.n	80010d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8171 	beq.w	80010d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <HAL_GPIO_Init+0x40>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d118      	bne.n	8000ea8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80ac 	beq.w	80010d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f86:	4b5c      	ldr	r3, [pc, #368]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <HAL_GPIO_Init+0x334>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x242>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <HAL_GPIO_Init+0x338>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x23e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001104 <HAL_GPIO_Init+0x33c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x23a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001108 <HAL_GPIO_Init+0x340>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x236>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800110c <HAL_GPIO_Init+0x344>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x232>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8001110 <HAL_GPIO_Init+0x348>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x22e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8001114 <HAL_GPIO_Init+0x34c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x22a>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x244>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x244>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x244>
 800100a:	2300      	movs	r3, #0
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101c:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_GPIO_Init+0x334>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <HAL_GPIO_Init+0x350>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104e:	4a32      	ldr	r2, [pc, #200]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001054:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <HAL_GPIO_Init+0x350>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f47f ae78 	bne.w	8000dd8 <HAL_GPIO_Init+0x10>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	48001800 	.word	0x48001800
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40007000 	.word	0x40007000

0800113c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <HAL_PWREx_GetVoltageRange+0x18>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001166:	d130      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001174:	d038      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800117e:	4a1e      	ldr	r2, [pc, #120]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2232      	movs	r2, #50	@ 0x32
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	e002      	b.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b0:	d102      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f2      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c4:	d110      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e00f      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d6:	d007      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011e0:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83

08001204 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e3ca      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4b97      	ldr	r3, [pc, #604]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4b94      	ldr	r3, [pc, #592]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80e4 	beq.w	8001400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_RCC_OscConfig+0x4a>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	f040 808b 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 8087 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124e:	4b89      	ldr	r3, [pc, #548]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x62>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e3a2      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4b82      	ldr	r3, [pc, #520]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001276:	4b7f      	ldr	r3, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127e:	e005      	b.n	800128c <HAL_RCC_OscConfig+0x88>
 8001280:	4b7c      	ldr	r3, [pc, #496]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800128c:	4293      	cmp	r3, r2
 800128e:	d223      	bcs.n	80012d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fd55 	bl	8001d44 <RCC_SetFlashLatencyFromMSIRange>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e383      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a4:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a72      	ldr	r2, [pc, #456]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	496d      	ldr	r1, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	4968      	ldr	r1, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
 80012d6:	e025      	b.n	8001324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4960      	ldr	r1, [pc, #384]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	495b      	ldr	r1, [pc, #364]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fd15 	bl	8001d44 <RCC_SetFlashLatencyFromMSIRange>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e343      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001324:	f000 fc4a 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b52      	ldr	r3, [pc, #328]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	4950      	ldr	r1, [pc, #320]	@ (8001478 <HAL_RCC_OscConfig+0x274>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_RCC_OscConfig+0x278>)
 8001342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001344:	4b4e      	ldr	r3, [pc, #312]	@ (8001480 <HAL_RCC_OscConfig+0x27c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fbcf 	bl	8000aec <HAL_InitTick>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d052      	beq.n	80013fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	e327      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d032      	beq.n	80013ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001364:	4b43      	ldr	r3, [pc, #268]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc0c 	bl	8000b8c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001378:	f7ff fc08 	bl	8000b8c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e310      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138a:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a36      	ldr	r2, [pc, #216]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4931      	ldr	r1, [pc, #196]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	492c      	ldr	r1, [pc, #176]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
 80013c8:	e01a      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fbd9 	bl	8000b8c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013de:	f7ff fbd5 	bl	8000b8c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2dd      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x1da>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d074      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x21a>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d10e      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d064      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d160      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2ba      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x24a>
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e026      	b.n	800149c <HAL_RCC_OscConfig+0x298>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001456:	d115      	bne.n	8001484 <HAL_RCC_OscConfig+0x280>
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a02      	ldr	r2, [pc, #8]	@ (8001474 <HAL_RCC_OscConfig+0x270>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x298>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	080044fc 	.word	0x080044fc
 800147c:	20000000 	.word	0x20000000
 8001480:	20000004 	.word	0x20000004
 8001484:	4ba0      	ldr	r3, [pc, #640]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a9f      	ldr	r2, [pc, #636]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b9d      	ldr	r3, [pc, #628]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a9c      	ldr	r2, [pc, #624]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb72 	bl	8000b8c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fb6e 	bl	8000b8c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e276      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	4b92      	ldr	r3, [pc, #584]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x2a8>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb5e 	bl	8000b8c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb5a 	bl	8000b8c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e262      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d0>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d060      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x310>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d119      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d116      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	4b7c      	ldr	r3, [pc, #496]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x328>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e23f      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b76      	ldr	r3, [pc, #472]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	4973      	ldr	r1, [pc, #460]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	e040      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d023      	beq.n	8001592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb19 	bl	8000b8c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fb15 	bl	8000b8c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e21d      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	4b65      	ldr	r3, [pc, #404]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b62      	ldr	r3, [pc, #392]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	495f      	ldr	r1, [pc, #380]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a5c      	ldr	r2, [pc, #368]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff faf5 	bl	8000b8c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff faf1 	bl	8000b8c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1f9      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015de:	4a4a      	ldr	r2, [pc, #296]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fad0 	bl	8000b8c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff facc 	bl	8000b8c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1d4      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001602:	4b41      	ldr	r3, [pc, #260]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3ec>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001618:	4a3b      	ldr	r2, [pc, #236]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fab3 	bl	8000b8c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff faaf 	bl	8000b8c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1b7      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	4b32      	ldr	r3, [pc, #200]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a6 	beq.w	80017a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	4a26      	ldr	r2, [pc, #152]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001672:	6593      	str	r3, [r2, #88]	@ 0x58
 8001674:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001680:	2301      	movs	r3, #1
 8001682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_RCC_OscConfig+0x508>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_RCC_OscConfig+0x508>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_RCC_OscConfig+0x508>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa76 	bl	8000b8c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fa72 	bl	8000b8c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e17a      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_RCC_OscConfig+0x508>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x4d8>
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016da:	e029      	b.n	8001730 <HAL_RCC_OscConfig+0x52c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d115      	bne.n	8001710 <HAL_RCC_OscConfig+0x50c>
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ea:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fa:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x52c>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	4b9c      	ldr	r3, [pc, #624]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	4a9b      	ldr	r2, [pc, #620]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001720:	4b98      	ldr	r3, [pc, #608]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001726:	4a97      	ldr	r2, [pc, #604]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d016      	beq.n	8001766 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fa28 	bl	8000b8c <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fa24 	bl	8000b8c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e12a      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001756:	4b8b      	ldr	r3, [pc, #556]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ed      	beq.n	8001740 <HAL_RCC_OscConfig+0x53c>
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff fa11 	bl	8000b8c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fa0d 	bl	8000b8c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e113      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001784:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ed      	bne.n	800176e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b7a      	ldr	r3, [pc, #488]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	4a79      	ldr	r2, [pc, #484]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800179e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80fe 	beq.w	80019aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 80d0 	bne.w	8001958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b8:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d130      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	3b01      	subs	r3, #1
 80017d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d127      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11f      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017f8:	2a07      	cmp	r2, #7
 80017fa:	bf14      	ite	ne
 80017fc:	2201      	movne	r2, #1
 80017fe:	2200      	moveq	r2, #0
 8001800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d109      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d06e      	beq.n	800190c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d069      	beq.n	8001908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0ad      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800185c:	f7ff f996 	bl	8000b8c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f992 	bl	8000b8c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e09a      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001882:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <HAL_RCC_OscConfig+0x784>)
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001892:	3a01      	subs	r2, #1
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800189c:	0212      	lsls	r2, r2, #8
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018a4:	0852      	lsrs	r2, r2, #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	0552      	lsls	r2, r2, #21
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018b0:	0852      	lsrs	r2, r2, #1
 80018b2:	3a01      	subs	r2, #1
 80018b4:	0652      	lsls	r2, r2, #25
 80018b6:	4311      	orrs	r1, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018bc:	0912      	lsrs	r2, r2, #4
 80018be:	0452      	lsls	r2, r2, #17
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4930      	ldr	r1, [pc, #192]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e0:	f7ff f954 	bl	8000b8c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f950 	bl	8000b8c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e058      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001906:	e050      	b.n	80019aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e04f      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d148      	bne.n	80019aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001930:	f7ff f92c 	bl	8000b8c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f928 	bl	8000b8c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e030      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x734>
 8001956:	e028      	b.n	80019aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d023      	beq.n	80019a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_RCC_OscConfig+0x780>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f90f 	bl	8000b8c <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	e00c      	b.n	800198c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f90b 	bl	8000b8c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d905      	bls.n	800198c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
 8001984:	40021000 	.word	0x40021000
 8001988:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_RCC_OscConfig+0x7b0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ec      	bne.n	8001972 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_OscConfig+0x7b0>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4905      	ldr	r1, [pc, #20]	@ (80019b4 <HAL_RCC_OscConfig+0x7b0>)
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x7b4>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
 80019a4:	e001      	b.n	80019aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	feeefffc 	.word	0xfeeefffc

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0e7      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b75      	ldr	r3, [pc, #468]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d910      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 0207 	bic.w	r2, r3, #7
 80019e6:	4970      	ldr	r1, [pc, #448]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0cf      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d010      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d908      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b63      	ldr	r3, [pc, #396]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4960      	ldr	r1, [pc, #384]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04c      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	4b5a      	ldr	r3, [pc, #360]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d121      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0a6      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	4b54      	ldr	r3, [pc, #336]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d115      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e09a      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a72:	4b4e      	ldr	r3, [pc, #312]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e08e      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e086      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b46      	ldr	r3, [pc, #280]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4943      	ldr	r1, [pc, #268]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f872 	bl	8000b8c <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff f86e 	bl	8000b8c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e06e      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d208      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	492b      	ldr	r1, [pc, #172]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d210      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 0207 	bic.w	r2, r3, #7
 8001b18:	4923      	ldr	r1, [pc, #140]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e036      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	4918      	ldr	r1, [pc, #96]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4910      	ldr	r1, [pc, #64]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b70:	f000 f824 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	490b      	ldr	r1, [pc, #44]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1fc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe ffa9 	bl	8000aec <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	080044fc 	.word	0x080044fc
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d11e      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf0:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e005      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c18:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	e004      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c40:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d134      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d003      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xac>
 8001c60:	e005      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c64:	617b      	str	r3, [r7, #20]
      break;
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6a:	617b      	str	r3, [r7, #20]
      break;
 8001c6c:	e002      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	617b      	str	r3, [r7, #20]
      break;
 8001c72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	3301      	adds	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	fb03 f202 	mul.w	r2, r3, r2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	0e5b      	lsrs	r3, r3, #25
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08004514 	.word	0x08004514
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4904      	ldr	r1, [pc, #16]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	0800450c 	.word	0x0800450c

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d1c:	f7ff ffda 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	0800450c 	.word	0x0800450c

08001d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d50:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d5c:	f7ff f9ee 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001d60:	6178      	str	r0, [r7, #20]
 8001d62:	e014      	b.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a24      	ldr	r2, [pc, #144]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d7c:	f7ff f9de 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d94:	d10b      	bne.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	@ 0x80
 8001d9a:	d919      	bls.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001da0:	d902      	bls.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da2:	2302      	movs	r3, #2
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e013      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e010      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	@ 0x80
 8001db2:	d902      	bls.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db4:	2303      	movs	r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e00a      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b80      	cmp	r3, #128	@ 0x80
 8001dbe:	d102      	bne.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e004      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b70      	cmp	r3, #112	@ 0x70
 8001dca:	d101      	bne.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0207 	bic.w	r2, r3, #7
 8001dd8:	4909      	ldr	r1, [pc, #36]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e10:	2300      	movs	r3, #0
 8001e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d041      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e28:	d02a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e2e:	d824      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e34:	d008      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e3a:	d81e      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e44:	d010      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e46:	e018      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e48:	4b86      	ldr	r3, [pc, #536]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a85      	ldr	r2, [pc, #532]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e54:	e015      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 facb 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e66:	e00c      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fbb6 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e78:	e003      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e7e:	e000      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e88:	4b76      	ldr	r3, [pc, #472]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e96:	4973      	ldr	r1, [pc, #460]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e9e:	e001      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d041      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eb8:	d02a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ebe:	d824      	bhi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eca:	d81e      	bhi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed4:	d010      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ed6:	e018      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed8:	4b62      	ldr	r3, [pc, #392]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a61      	ldr	r2, [pc, #388]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee4:	e015      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fa83 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef6:	e00c      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3320      	adds	r3, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fb6e 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f08:	e003      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0e:	e000      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f18:	4b52      	ldr	r3, [pc, #328]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f26:	494f      	ldr	r1, [pc, #316]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f2e:	e001      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a0 	beq.w	8002082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f46:	4b47      	ldr	r3, [pc, #284]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a40      	ldr	r2, [pc, #256]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fe02 	bl	8000b8c <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe fdfe 	bl	8000b8c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f9e:	e005      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fa0:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ef      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d15c      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01f      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d019      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fd0:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ffc:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe fdbd 	bl	8000b8c <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	e00b      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe fdb9 	bl	8000b8c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d902      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	74fb      	strb	r3, [r7, #19]
            break;
 800202c:	e006      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ec      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002052:	4904      	ldr	r1, [pc, #16]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800205a:	e009      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
 8002060:	e006      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002070:	7c7b      	ldrb	r3, [r7, #17]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d105      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b9e      	ldr	r3, [pc, #632]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a9d      	ldr	r2, [pc, #628]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208e:	4b98      	ldr	r3, [pc, #608]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f023 0203 	bic.w	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	4994      	ldr	r1, [pc, #592]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b0:	4b8f      	ldr	r3, [pc, #572]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f023 020c 	bic.w	r2, r3, #12
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020be:	498c      	ldr	r1, [pc, #560]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d2:	4b87      	ldr	r3, [pc, #540]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	4983      	ldr	r1, [pc, #524]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f4:	4b7e      	ldr	r3, [pc, #504]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	497b      	ldr	r1, [pc, #492]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002116:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002124:	4972      	ldr	r1, [pc, #456]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002138:	4b6d      	ldr	r3, [pc, #436]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	496a      	ldr	r1, [pc, #424]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800215a:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	4961      	ldr	r1, [pc, #388]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800217c:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218a:	4959      	ldr	r1, [pc, #356]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219e:	4b54      	ldr	r3, [pc, #336]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ac:	4950      	ldr	r1, [pc, #320]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c0:	4b4b      	ldr	r3, [pc, #300]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	4948      	ldr	r1, [pc, #288]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	493f      	ldr	r1, [pc, #252]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d028      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002204:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002212:	4937      	ldr	r1, [pc, #220]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800221e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002222:	d106      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002224:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800222e:	60d3      	str	r3, [r2, #12]
 8002230:	e011      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800223a:	d10c      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	2101      	movs	r1, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f8d8 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d028      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	491f      	ldr	r1, [pc, #124]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002280:	d106      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228c:	60d3      	str	r3, [r2, #12]
 800228e:	e011      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f8a9 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d02b      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022de:	d109      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a02      	ldr	r2, [pc, #8]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ea:	60d3      	str	r3, [r2, #12]
 80022ec:	e014      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f877 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02f      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002324:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002332:	4928      	ldr	r1, [pc, #160]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002342:	d10d      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f854 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	74bb      	strb	r3, [r7, #18]
 800235e:	e011      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3320      	adds	r3, #32
 800236e:	2102      	movs	r1, #2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f935 	bl	80025e0 <RCCEx_PLLSAI2_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002390:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023c2:	4904      	ldr	r1, [pc, #16]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002406:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002412:	4b72      	ldr	r3, [pc, #456]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d10d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
       ||
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242a:	4b6c      	ldr	r3, [pc, #432]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
       ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d047      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e044      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d018      	beq.n	800247e <RCCEx_PLLSAI1_Config+0x86>
 800244c:	2b03      	cmp	r3, #3
 800244e:	d825      	bhi.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x62>
 8002454:	2b02      	cmp	r3, #2
 8002456:	d009      	beq.n	800246c <RCCEx_PLLSAI1_Config+0x74>
 8002458:	e020      	b.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245a:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246a:	e01a      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800246c:	4b5b      	ldr	r3, [pc, #364]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e013      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800247e:	4b57      	ldr	r3, [pc, #348]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248a:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249a:	e006      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      break;
 80024a0:	e004      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a2:	bf00      	nop
 80024a4:	e002      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	430b      	orrs	r3, r1
 80024c8:	4944      	ldr	r1, [pc, #272]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d17d      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d4:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe fb54 	bl	8000b8c <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e6:	e009      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e8:	f7fe fb50 	bl	8000b8c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	73fb      	strb	r3, [r7, #15]
        break;
 80024fa:	e005      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fc:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ef      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d160      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d111      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800251c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	0211      	lsls	r1, r2, #8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68d2      	ldr	r2, [r2, #12]
 800252a:	0912      	lsrs	r2, r2, #4
 800252c:	0452      	lsls	r2, r2, #17
 800252e:	430a      	orrs	r2, r1
 8002530:	492a      	ldr	r1, [pc, #168]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
 8002536:	e027      	b.n	8002588 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d112      	bne.n	8002564 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800253e:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002546:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	0211      	lsls	r1, r2, #8
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6912      	ldr	r2, [r2, #16]
 8002554:	0852      	lsrs	r2, r2, #1
 8002556:	3a01      	subs	r2, #1
 8002558:	0552      	lsls	r2, r2, #21
 800255a:	430a      	orrs	r2, r1
 800255c:	491f      	ldr	r1, [pc, #124]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	610b      	str	r3, [r1, #16]
 8002562:	e011      	b.n	8002588 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002564:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800256c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	0211      	lsls	r1, r2, #8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6952      	ldr	r2, [r2, #20]
 800257a:	0852      	lsrs	r2, r2, #1
 800257c:	3a01      	subs	r2, #1
 800257e:	0652      	lsls	r2, r2, #25
 8002580:	430a      	orrs	r2, r1
 8002582:	4916      	ldr	r1, [pc, #88]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fafa 	bl	8000b8c <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259a:	e009      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259c:	f7fe faf6 	bl	8000b8c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d902      	bls.n	80025b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	73fb      	strb	r3, [r7, #15]
          break;
 80025ae:	e005      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4904      	ldr	r1, [pc, #16]	@ (80025dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000

080025e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025fa:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0203 	and.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
       ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002612:	4b61      	ldr	r3, [pc, #388]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
       ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d047      	beq.n	80026b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e044      	b.n	80026b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d018      	beq.n	8002666 <RCCEx_PLLSAI2_Config+0x86>
 8002634:	2b03      	cmp	r3, #3
 8002636:	d825      	bhi.n	8002684 <RCCEx_PLLSAI2_Config+0xa4>
 8002638:	2b01      	cmp	r3, #1
 800263a:	d002      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x62>
 800263c:	2b02      	cmp	r3, #2
 800263e:	d009      	beq.n	8002654 <RCCEx_PLLSAI2_Config+0x74>
 8002640:	e020      	b.n	8002684 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002642:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11d      	bne.n	800268a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002652:	e01a      	b.n	800268a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002664:	e013      	b.n	800268e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002666:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002682:	e006      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e004      	b.n	8002694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800268a:	bf00      	nop
 800268c:	e002      	b.n	8002694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002692:	bf00      	nop
    }

    if(status == HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10d      	bne.n	80026b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800269a:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	430b      	orrs	r3, r1
 80026b0:	4939      	ldr	r1, [pc, #228]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d167      	bne.n	800278c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026bc:	4b36      	ldr	r3, [pc, #216]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a35      	ldr	r2, [pc, #212]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c8:	f7fe fa60 	bl	8000b8c <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ce:	e009      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d0:	f7fe fa5c 	bl	8000b8c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d902      	bls.n	80026e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	73fb      	strb	r3, [r7, #15]
        break;
 80026e2:	e005      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ef      	bne.n	80026d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d14a      	bne.n	800278c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026fc:	4b26      	ldr	r3, [pc, #152]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	0211      	lsls	r1, r2, #8
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	0912      	lsrs	r2, r2, #4
 8002714:	0452      	lsls	r2, r2, #17
 8002716:	430a      	orrs	r2, r1
 8002718:	491f      	ldr	r1, [pc, #124]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	614b      	str	r3, [r1, #20]
 800271e:	e011      	b.n	8002744 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002728:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0211      	lsls	r1, r2, #8
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6912      	ldr	r2, [r2, #16]
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	3a01      	subs	r2, #1
 800273a:	0652      	lsls	r2, r2, #25
 800273c:	430a      	orrs	r2, r1
 800273e:	4916      	ldr	r1, [pc, #88]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fa1c 	bl	8000b8c <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002758:	f7fe fa18 	bl	8000b8c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
          break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4904      	ldr	r1, [pc, #16]	@ (8002798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	4313      	orrs	r3, r2
 800278a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e049      	b.n	8002842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe f87c 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f000 fd70 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e047      	b.n	80028f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a23      	ldr	r2, [pc, #140]	@ (8002900 <HAL_TIM_Base_Start+0xb4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287e:	d018      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <HAL_TIM_Base_Start+0xb8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1e      	ldr	r2, [pc, #120]	@ (8002908 <HAL_TIM_Base_Start+0xbc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <HAL_TIM_Base_Start+0xc0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <HAL_TIM_Base_Start+0xc4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIM_Base_Start+0x66>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_TIM_Base_Start+0xc8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d115      	bne.n	80028de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <HAL_TIM_Base_Start+0xcc>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d015      	beq.n	80028f0 <HAL_TIM_Base_Start+0xa4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ca:	d011      	beq.n	80028f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	e008      	b.n	80028f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e000      	b.n	80028f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40013400 	.word	0x40013400
 8002914:	40014000 	.word	0x40014000
 8002918:	00010007 	.word	0x00010007

0800291c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e049      	b.n	80029c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f841 	bl	80029ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 fcb0 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_IC_Start_IT+0x1e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e023      	b.n	8002a46 <HAL_TIM_IC_Start_IT+0x66>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_IC_Start_IT+0x2e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e01b      	b.n	8002a46 <HAL_TIM_IC_Start_IT+0x66>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_IC_Start_IT+0x3e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_IC_Start_IT+0x66>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0x4e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_IC_Start_IT+0x66>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_IC_Start_IT+0x5e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_IC_Start_IT+0x66>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_TIM_IC_Start_IT+0x78>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e013      	b.n	8002a80 <HAL_TIM_IC_Start_IT+0xa0>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d104      	bne.n	8002a68 <HAL_TIM_IC_Start_IT+0x88>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e00b      	b.n	8002a80 <HAL_TIM_IC_Start_IT+0xa0>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d104      	bne.n	8002a78 <HAL_TIM_IC_Start_IT+0x98>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e003      	b.n	8002a80 <HAL_TIM_IC_Start_IT+0xa0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	7bbb      	ldrb	r3, [r7, #14]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a88:	7b7b      	ldrb	r3, [r7, #13]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0dd      	b.n	8002c4e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0xc2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa0:	e023      	b.n	8002aea <HAL_TIM_IC_Start_IT+0x10a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_IC_Start_IT+0xd2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	e01b      	b.n	8002aea <HAL_TIM_IC_Start_IT+0x10a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_IC_Start_IT+0xe2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac0:	e013      	b.n	8002aea <HAL_TIM_IC_Start_IT+0x10a>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_IC_Start_IT+0xf2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad0:	e00b      	b.n	8002aea <HAL_TIM_IC_Start_IT+0x10a>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_IC_Start_IT+0x102>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	e003      	b.n	8002aea <HAL_TIM_IC_Start_IT+0x10a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_IC_Start_IT+0x11a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x142>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_IC_Start_IT+0x12a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x142>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start_IT+0x13a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_IC_Start_IT+0x142>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d841      	bhi.n	8002bac <HAL_TIM_IC_Start_IT+0x1cc>
 8002b28:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <HAL_TIM_IC_Start_IT+0x150>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002bad 	.word	0x08002bad
 8002b38:	08002bad 	.word	0x08002bad
 8002b3c:	08002bad 	.word	0x08002bad
 8002b40:	08002b77 	.word	0x08002b77
 8002b44:	08002bad 	.word	0x08002bad
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002bad 	.word	0x08002bad
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002bad 	.word	0x08002bad
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002b9b 	.word	0x08002b9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0202 	orr.w	r2, r2, #2
 8002b72:	60da      	str	r2, [r3, #12]
      break;
 8002b74:	e01d      	b.n	8002bb2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0204 	orr.w	r2, r2, #4
 8002b84:	60da      	str	r2, [r3, #12]
      break;
 8002b86:	e014      	b.n	8002bb2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0208 	orr.w	r2, r2, #8
 8002b96:	60da      	str	r2, [r3, #12]
      break;
 8002b98:	e00b      	b.n	8002bb2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0210 	orr.w	r2, r2, #16
 8002ba8:	60da      	str	r2, [r3, #12]
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d149      	bne.n	8002c4c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fe75 	bl	80038b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <HAL_TIM_IC_Start_IT+0x278>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd8:	d018      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <HAL_TIM_IC_Start_IT+0x27c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c60 <HAL_TIM_IC_Start_IT+0x280>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <HAL_TIM_IC_Start_IT+0x284>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c68 <HAL_TIM_IC_Start_IT+0x288>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_IC_Start_IT+0x22c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a19      	ldr	r2, [pc, #100]	@ (8002c6c <HAL_TIM_IC_Start_IT+0x28c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d115      	bne.n	8002c38 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <HAL_TIM_IC_Start_IT+0x290>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d015      	beq.n	8002c4a <HAL_TIM_IC_Start_IT+0x26a>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c24:	d011      	beq.n	8002c4a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e008      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40013400 	.word	0x40013400
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	00010007 	.word	0x00010007

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d020      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0202 	mvn.w	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fc50 	bl	8000564 <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fad0 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fad7 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d020      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fc2a 	bl	8000564 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 faaa 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fab1 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0208 	mvn.w	r2, #8
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd fc04 	bl	8000564 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa84 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa8b 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0210 	mvn.w	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2208      	movs	r2, #8
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fbde 	bl	8000564 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa5e 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa65 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0201 	mvn.w	r2, #1
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa3c 	bl	8003258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fe09 	bl	8003a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fe01 	bl	8003a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fa1f 	bl	8003294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fdc9 	bl	8003a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e088      	b.n	8002fb2 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11b      	bne.n	8002ee6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ebe:	f000 fb39 	bl	8003534 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 020c 	bic.w	r2, r2, #12
 8002ed0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6999      	ldr	r1, [r3, #24]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	619a      	str	r2, [r3, #24]
 8002ee4:	e060      	b.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d11c      	bne.n	8002f26 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002efc:	f000 fbb7 	bl	800366e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f0e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6999      	ldr	r1, [r3, #24]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	021a      	lsls	r2, r3, #8
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	e040      	b.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f3c:	f000 fc04 	bl	8003748 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020c 	bic.w	r2, r2, #12
 8002f4e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69d9      	ldr	r1, [r3, #28]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	61da      	str	r2, [r3, #28]
 8002f62:	e021      	b.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d11c      	bne.n	8002fa4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002f7a:	f000 fc21 	bl	80037c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	61da      	str	r2, [r3, #28]
 8002fa2:	e001      	b.n	8002fa8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0b6      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x18a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ff8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003000:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003012:	d03e      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xd8>
 8003014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003018:	f200 8087 	bhi.w	800312a <HAL_TIM_ConfigClockSource+0x170>
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003020:	f000 8086 	beq.w	8003130 <HAL_TIM_ConfigClockSource+0x176>
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003028:	d87f      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 800302a:	2b70      	cmp	r3, #112	@ 0x70
 800302c:	d01a      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0xaa>
 800302e:	2b70      	cmp	r3, #112	@ 0x70
 8003030:	d87b      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 8003032:	2b60      	cmp	r3, #96	@ 0x60
 8003034:	d050      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0x11e>
 8003036:	2b60      	cmp	r3, #96	@ 0x60
 8003038:	d877      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 800303a:	2b50      	cmp	r3, #80	@ 0x50
 800303c:	d03c      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0xfe>
 800303e:	2b50      	cmp	r3, #80	@ 0x50
 8003040:	d873      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d058      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0x13e>
 8003046:	2b40      	cmp	r3, #64	@ 0x40
 8003048:	d86f      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 800304a:	2b30      	cmp	r3, #48	@ 0x30
 800304c:	d064      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x15e>
 800304e:	2b30      	cmp	r3, #48	@ 0x30
 8003050:	d86b      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 8003052:	2b20      	cmp	r3, #32
 8003054:	d060      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x15e>
 8003056:	2b20      	cmp	r3, #32
 8003058:	d867      	bhi.n	800312a <HAL_TIM_ConfigClockSource+0x170>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d05c      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x15e>
 800305e:	2b10      	cmp	r3, #16
 8003060:	d05a      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x15e>
 8003062:	e062      	b.n	800312a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	f000 fbfc 	bl	8003870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003086:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
      break;
 8003090:	e04f      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	f000 fbe5 	bl	8003870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b4:	609a      	str	r2, [r3, #8]
      break;
 80030b6:	e03c      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c4:	461a      	mov	r2, r3
 80030c6:	f000 faa3 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2150      	movs	r1, #80	@ 0x50
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fbb2 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80030d6:	e02c      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e4:	461a      	mov	r2, r3
 80030e6:	f000 faff 	bl	80036e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2160      	movs	r1, #96	@ 0x60
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fba2 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80030f6:	e01c      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003104:	461a      	mov	r2, r3
 8003106:	f000 fa83 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2140      	movs	r1, #64	@ 0x40
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fb92 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 8003116:	e00c      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fb89 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 8003128:	e003      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003160:	2302      	movs	r3, #2
 8003162:	e031      	b.n	80031c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f948 	bl	800340c <TIM_SlaveTimer_SetConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e018      	b.n	80031c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d831      	bhi.n	8003248 <HAL_TIM_ReadCapturedValue+0x78>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003249 	.word	0x08003249
 80031f4:	08003249 	.word	0x08003249
 80031f8:	08003249 	.word	0x08003249
 80031fc:	0800322b 	.word	0x0800322b
 8003200:	08003249 	.word	0x08003249
 8003204:	08003249 	.word	0x08003249
 8003208:	08003249 	.word	0x08003249
 800320c:	08003235 	.word	0x08003235
 8003210:	08003249 	.word	0x08003249
 8003214:	08003249 	.word	0x08003249
 8003218:	08003249 	.word	0x08003249
 800321c:	0800323f 	.word	0x0800323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003226:	60fb      	str	r3, [r7, #12]

      break;
 8003228:	e00f      	b.n	800324a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	60fb      	str	r3, [r7, #12]

      break;
 8003232:	e00a      	b.n	800324a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	60fb      	str	r3, [r7, #12]

      break;
 800323c:	e005      	b.n	800324a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	60fb      	str	r3, [r7, #12]

      break;
 8003246:	e000      	b.n	800324a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003248:	bf00      	nop
  }

  return tmpreg;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7f1b      	ldrb	r3, [r3, #28]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a43      	ldr	r2, [pc, #268]	@ (80033f0 <TIM_Base_SetConfig+0x130>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a42      	ldr	r2, [pc, #264]	@ (80033f4 <TIM_Base_SetConfig+0x134>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a41      	ldr	r2, [pc, #260]	@ (80033f8 <TIM_Base_SetConfig+0x138>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a40      	ldr	r2, [pc, #256]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a35      	ldr	r2, [pc, #212]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003320:	d01b      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d017      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a30      	ldr	r2, [pc, #192]	@ (80033f8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <TIM_Base_SetConfig+0x140>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2d      	ldr	r2, [pc, #180]	@ (8003404 <TIM_Base_SetConfig+0x144>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x9a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2c      	ldr	r2, [pc, #176]	@ (8003408 <TIM_Base_SetConfig+0x148>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a16      	ldr	r2, [pc, #88]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00f      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a17      	ldr	r2, [pc, #92]	@ (8003400 <TIM_Base_SetConfig+0x140>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <TIM_Base_SetConfig+0x144>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <TIM_Base_SetConfig+0x148>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]
  }
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800

0800340c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003428:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b70      	cmp	r3, #112	@ 0x70
 8003458:	d01a      	beq.n	8003490 <TIM_SlaveTimer_SetConfig+0x84>
 800345a:	2b70      	cmp	r3, #112	@ 0x70
 800345c:	d860      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 800345e:	2b60      	cmp	r3, #96	@ 0x60
 8003460:	d054      	beq.n	800350c <TIM_SlaveTimer_SetConfig+0x100>
 8003462:	2b60      	cmp	r3, #96	@ 0x60
 8003464:	d85c      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 8003466:	2b50      	cmp	r3, #80	@ 0x50
 8003468:	d046      	beq.n	80034f8 <TIM_SlaveTimer_SetConfig+0xec>
 800346a:	2b50      	cmp	r3, #80	@ 0x50
 800346c:	d858      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d019      	beq.n	80034a6 <TIM_SlaveTimer_SetConfig+0x9a>
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	d854      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 8003476:	2b30      	cmp	r3, #48	@ 0x30
 8003478:	d055      	beq.n	8003526 <TIM_SlaveTimer_SetConfig+0x11a>
 800347a:	2b30      	cmp	r3, #48	@ 0x30
 800347c:	d850      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 800347e:	2b20      	cmp	r3, #32
 8003480:	d051      	beq.n	8003526 <TIM_SlaveTimer_SetConfig+0x11a>
 8003482:	2b20      	cmp	r3, #32
 8003484:	d84c      	bhi.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04d      	beq.n	8003526 <TIM_SlaveTimer_SetConfig+0x11a>
 800348a:	2b10      	cmp	r3, #16
 800348c:	d04b      	beq.n	8003526 <TIM_SlaveTimer_SetConfig+0x11a>
 800348e:	e047      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80034a0:	f000 f9e6 	bl	8003870 <TIM_ETR_SetConfig>
      break;
 80034a4:	e040      	b.n	8003528 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d101      	bne.n	80034b2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e03b      	b.n	800352a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
      break;
 80034f6:	e017      	b.n	8003528 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003504:	461a      	mov	r2, r3
 8003506:	f000 f883 	bl	8003610 <TIM_TI1_ConfigInputStage>
      break;
 800350a:	e00d      	b.n	8003528 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003518:	461a      	mov	r2, r3
 800351a:	f000 f8e5 	bl	80036e8 <TIM_TI2_ConfigInputStage>
      break;
 800351e:	e003      	b.n	8003528 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	75fb      	strb	r3, [r7, #23]
      break;
 8003524:	e000      	b.n	8003528 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003526:	bf00      	nop
  }

  return status;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f023 0201 	bic.w	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <TIM_TI1_SetConfig+0xc4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d017      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003568:	d013      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <TIM_TI1_SetConfig+0xc8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00f      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <TIM_TI1_SetConfig+0xcc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a21      	ldr	r2, [pc, #132]	@ (8003604 <TIM_TI1_SetConfig+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a20      	ldr	r2, [pc, #128]	@ (8003608 <TIM_TI1_SetConfig+0xd4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_TI1_SetConfig+0x5e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <TIM_TI1_SetConfig+0xd8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <TIM_TI1_SetConfig+0x62>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <TIM_TI1_SetConfig+0x64>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e003      	b.n	80035b6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f023 030a 	bic.w	r3, r3, #10
 80035d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 030a 	and.w	r3, r3, #10
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0210 	bic.w	r2, r3, #16
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003784:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	b2db      	uxtb	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003798:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	031b      	lsls	r3, r3, #12
 8003804:	b29b      	uxth	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003812:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	031b      	lsls	r3, r3, #12
 8003818:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	f043 0307 	orr.w	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e068      	b.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2e      	ldr	r2, [pc, #184]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2d      	ldr	r2, [pc, #180]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800394e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003986:	d018      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1a      	ldr	r2, [pc, #104]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10c      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40013400 	.word	0x40013400
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40014000 	.word	0x40014000

08003a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e040      	b.n	8003adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc ffa0 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fae0 	bl	8004054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f825 	bl	8003ae4 <UART_SetConfig>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e01b      	b.n	8003adc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb5f 	bl	8004198 <UART_CheckIdleState>
 8003ada:	4603      	mov	r3, r0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae8:	b08a      	sub	sp, #40	@ 0x28
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4ba4      	ldr	r3, [pc, #656]	@ (8003da4 <UART_SetConfig+0x2c0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a99      	ldr	r2, [pc, #612]	@ (8003da8 <UART_SetConfig+0x2c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a90      	ldr	r2, [pc, #576]	@ (8003dac <UART_SetConfig+0x2c8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d126      	bne.n	8003bbc <UART_SetConfig+0xd8>
 8003b6e:	4b90      	ldr	r3, [pc, #576]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d81b      	bhi.n	8003bb4 <UART_SetConfig+0xd0>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0xa0>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba5 	.word	0x08003ba5
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003bad 	.word	0x08003bad
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e116      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e112      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e10e      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e10a      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e106      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a7c      	ldr	r2, [pc, #496]	@ (8003db4 <UART_SetConfig+0x2d0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d138      	bne.n	8003c38 <UART_SetConfig+0x154>
 8003bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d82d      	bhi.n	8003c30 <UART_SetConfig+0x14c>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <UART_SetConfig+0xf8>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003c31 	.word	0x08003c31
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c31 	.word	0x08003c31
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	08003c31 	.word	0x08003c31
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c31 	.word	0x08003c31
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e0d8      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e0d4      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e0d0      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e0cc      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e0c8      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5e      	ldr	r2, [pc, #376]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d125      	bne.n	8003c8e <UART_SetConfig+0x1aa>
 8003c42:	4b5b      	ldr	r3, [pc, #364]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c4c:	2b30      	cmp	r3, #48	@ 0x30
 8003c4e:	d016      	beq.n	8003c7e <UART_SetConfig+0x19a>
 8003c50:	2b30      	cmp	r3, #48	@ 0x30
 8003c52:	d818      	bhi.n	8003c86 <UART_SetConfig+0x1a2>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d00a      	beq.n	8003c6e <UART_SetConfig+0x18a>
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d814      	bhi.n	8003c86 <UART_SetConfig+0x1a2>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <UART_SetConfig+0x182>
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d008      	beq.n	8003c76 <UART_SetConfig+0x192>
 8003c64:	e00f      	b.n	8003c86 <UART_SetConfig+0x1a2>
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6c:	e0ad      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c74:	e0a9      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c76:	2304      	movs	r3, #4
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	e0a5      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c84:	e0a1      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c86:	2310      	movs	r3, #16
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8c:	e09d      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4a      	ldr	r2, [pc, #296]	@ (8003dbc <UART_SetConfig+0x2d8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d125      	bne.n	8003ce4 <UART_SetConfig+0x200>
 8003c98:	4b45      	ldr	r3, [pc, #276]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca4:	d016      	beq.n	8003cd4 <UART_SetConfig+0x1f0>
 8003ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ca8:	d818      	bhi.n	8003cdc <UART_SetConfig+0x1f8>
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d00a      	beq.n	8003cc4 <UART_SetConfig+0x1e0>
 8003cae:	2b80      	cmp	r3, #128	@ 0x80
 8003cb0:	d814      	bhi.n	8003cdc <UART_SetConfig+0x1f8>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <UART_SetConfig+0x1d8>
 8003cb6:	2b40      	cmp	r3, #64	@ 0x40
 8003cb8:	d008      	beq.n	8003ccc <UART_SetConfig+0x1e8>
 8003cba:	e00f      	b.n	8003cdc <UART_SetConfig+0x1f8>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e082      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e07e      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e07a      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e076      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e072      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a35      	ldr	r2, [pc, #212]	@ (8003dc0 <UART_SetConfig+0x2dc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d12a      	bne.n	8003d44 <UART_SetConfig+0x260>
 8003cee:	4b30      	ldr	r3, [pc, #192]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfc:	d01a      	beq.n	8003d34 <UART_SetConfig+0x250>
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d02:	d81b      	bhi.n	8003d3c <UART_SetConfig+0x258>
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d08:	d00c      	beq.n	8003d24 <UART_SetConfig+0x240>
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0e:	d815      	bhi.n	8003d3c <UART_SetConfig+0x258>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <UART_SetConfig+0x238>
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d18:	d008      	beq.n	8003d2c <UART_SetConfig+0x248>
 8003d1a:	e00f      	b.n	8003d3c <UART_SetConfig+0x258>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e052      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d24:	2302      	movs	r3, #2
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e04e      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e04a      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d34:	2308      	movs	r3, #8
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e046      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e042      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <UART_SetConfig+0x2c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d13a      	bne.n	8003dc4 <UART_SetConfig+0x2e0>
 8003d4e:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d5c:	d01a      	beq.n	8003d94 <UART_SetConfig+0x2b0>
 8003d5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d62:	d81b      	bhi.n	8003d9c <UART_SetConfig+0x2b8>
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d68:	d00c      	beq.n	8003d84 <UART_SetConfig+0x2a0>
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6e:	d815      	bhi.n	8003d9c <UART_SetConfig+0x2b8>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <UART_SetConfig+0x298>
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d78:	d008      	beq.n	8003d8c <UART_SetConfig+0x2a8>
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x2b8>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e022      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e01e      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e01a      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d94:	2308      	movs	r3, #8
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e016      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e012      	b.n	8003dca <UART_SetConfig+0x2e6>
 8003da4:	efff69f3 	.word	0xefff69f3
 8003da8:	40008000 	.word	0x40008000
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40004400 	.word	0x40004400
 8003db8:	40004800 	.word	0x40004800
 8003dbc:	40004c00 	.word	0x40004c00
 8003dc0:	40005000 	.word	0x40005000
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a9f      	ldr	r2, [pc, #636]	@ (800404c <UART_SetConfig+0x568>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d17a      	bne.n	8003eca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d824      	bhi.n	8003e26 <UART_SetConfig+0x342>
 8003ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <UART_SetConfig+0x300>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e27 	.word	0x08003e27
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e27 	.word	0x08003e27
 8003df4:	08003e17 	.word	0x08003e17
 8003df8:	08003e27 	.word	0x08003e27
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	08003e27 	.word	0x08003e27
 8003e04:	08003e1f 	.word	0x08003e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7fd ff70 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003e0c:	61f8      	str	r0, [r7, #28]
        break;
 8003e0e:	e010      	b.n	8003e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e10:	4b8f      	ldr	r3, [pc, #572]	@ (8004050 <UART_SetConfig+0x56c>)
 8003e12:	61fb      	str	r3, [r7, #28]
        break;
 8003e14:	e00d      	b.n	8003e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e16:	f7fd fed1 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8003e1a:	61f8      	str	r0, [r7, #28]
        break;
 8003e1c:	e009      	b.n	8003e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e005      	b.n	8003e32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80fb 	beq.w	8004030 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d305      	bcc.n	8003e56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d903      	bls.n	8003e5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e5c:	e0e8      	b.n	8004030 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2200      	movs	r2, #0
 8003e62:	461c      	mov	r4, r3
 8003e64:	4615      	mov	r5, r2
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	022b      	lsls	r3, r5, #8
 8003e70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e74:	0222      	lsls	r2, r4, #8
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6849      	ldr	r1, [r1, #4]
 8003e7a:	0849      	lsrs	r1, r1, #1
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4681      	mov	r9, r0
 8003e82:	eb12 0a08 	adds.w	sl, r2, r8
 8003e86:	eb43 0b09 	adc.w	fp, r3, r9
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e98:	4650      	mov	r0, sl
 8003e9a:	4659      	mov	r1, fp
 8003e9c:	f7fc f994 	bl	80001c8 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eae:	d308      	bcc.n	8003ec2 <UART_SetConfig+0x3de>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb6:	d204      	bcs.n	8003ec2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e0b6      	b.n	8004030 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ec8:	e0b2      	b.n	8004030 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ed2:	d15e      	bne.n	8003f92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d828      	bhi.n	8003f2e <UART_SetConfig+0x44a>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0x400>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f1f 	.word	0x08003f1f
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7fd fef0 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003f0c:	61f8      	str	r0, [r7, #28]
        break;
 8003f0e:	e014      	b.n	8003f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fd ff02 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003f14:	61f8      	str	r0, [r7, #28]
        break;
 8003f16:	e010      	b.n	8003f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <UART_SetConfig+0x56c>)
 8003f1a:	61fb      	str	r3, [r7, #28]
        break;
 8003f1c:	e00d      	b.n	8003f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7fd fe4d 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8003f22:	61f8      	str	r0, [r7, #28]
        break;
 8003f24:	e009      	b.n	8003f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e005      	b.n	8003f3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d077      	beq.n	8004030 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005a      	lsls	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d916      	bls.n	8003f8a <UART_SetConfig+0x4a6>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d212      	bcs.n	8003f8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f023 030f 	bic.w	r3, r3, #15
 8003f6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	8afb      	ldrh	r3, [r7, #22]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	8afa      	ldrh	r2, [r7, #22]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e052      	b.n	8004030 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f90:	e04e      	b.n	8004030 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d827      	bhi.n	8003fea <UART_SetConfig+0x506>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x4bc>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fcd 	.word	0x08003fcd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fdb 	.word	0x08003fdb
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003feb 	.word	0x08003feb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fd fe92 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61f8      	str	r0, [r7, #28]
        break;
 8003fca:	e014      	b.n	8003ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fd fea4 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	61f8      	str	r0, [r7, #28]
        break;
 8003fd2:	e010      	b.n	8003ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <UART_SetConfig+0x56c>)
 8003fd6:	61fb      	str	r3, [r7, #28]
        break;
 8003fd8:	e00d      	b.n	8003ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fd fdef 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8003fde:	61f8      	str	r0, [r7, #28]
        break;
 8003fe0:	e009      	b.n	8003ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e005      	b.n	8003ff6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ff4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	085a      	lsrs	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	d909      	bls.n	800402a <UART_SetConfig+0x546>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d205      	bcs.n	800402a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	e002      	b.n	8004030 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800403c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	@ 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404a:	bf00      	nop
 800404c:	40008000 	.word	0x40008000
 8004050:	00f42400 	.word	0x00f42400

08004054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01a      	beq.n	800416a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004152:	d10a      	bne.n	800416a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b098      	sub	sp, #96	@ 0x60
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a8:	f7fc fcf0 	bl	8000b8c <HAL_GetTick>
 80041ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d12e      	bne.n	800421a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f88c 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d021      	beq.n	800421a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e062      	b.n	80042e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d149      	bne.n	80042bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	2200      	movs	r2, #0
 8004232:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f856 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03c      	beq.n	80042bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	623b      	str	r3, [r7, #32]
   return(result);
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
 8004262:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	60fb      	str	r3, [r7, #12]
   return(result);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004294:	61fa      	str	r2, [r7, #28]
 8004296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	617b      	str	r3, [r7, #20]
   return(result);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e011      	b.n	80042e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3758      	adds	r7, #88	@ 0x58
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e04f      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d04b      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fc fc43 	bl	8000b8c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e04e      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d037      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b80      	cmp	r3, #128	@ 0x80
 800432e:	d034      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d031      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d110      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2208      	movs	r2, #8
 800434a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f838 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2208      	movs	r2, #8
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e029      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004374:	d111      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800437e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f81e 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e00f      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d0a0      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b095      	sub	sp, #84	@ 0x54
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	61fb      	str	r3, [r7, #28]
   return(result);
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800441c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004434:	2b01      	cmp	r3, #1
 8004436:	d118      	bne.n	800446a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	60bb      	str	r3, [r7, #8]
   return(result);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	613b      	str	r3, [r7, #16]
   return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800447e:	bf00      	nop
 8004480:	3754      	adds	r7, #84	@ 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <memset>:
 800448a:	4402      	add	r2, r0
 800448c:	4603      	mov	r3, r0
 800448e:	4293      	cmp	r3, r2
 8004490:	d100      	bne.n	8004494 <memset+0xa>
 8004492:	4770      	bx	lr
 8004494:	f803 1b01 	strb.w	r1, [r3], #1
 8004498:	e7f9      	b.n	800448e <memset+0x4>
	...

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	@ (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	@ (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	@ (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	@ (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 f818 	bl	80044e4 <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	0800454c 	.word	0x0800454c
 80044d8:	0800454c 	.word	0x0800454c
 80044dc:	0800454c 	.word	0x0800454c
 80044e0:	08004550 	.word	0x08004550

080044e4 <_init>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr

080044f0 <_fini>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr
